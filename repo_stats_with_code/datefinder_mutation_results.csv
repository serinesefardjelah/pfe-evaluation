Repo Name,Function Name,original_code,Description,Mutant Index,Mutant Code,Test Case,Test Result,Passed Count,Failed Count,Failed Tests,Failure Reasons
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the `_find_and_replace` function is to search a given `date_string` for specific patterns and replace them based on a set of predefined replacements. It also looks for timezones in the `captures` dictionary and updates the replacements accordingly. The function returns the modified `date_string` and the timezone string. If multiple timezones are found, it selects the last sorted timezone as the final timezone string. This function is designed to clean and manipulate date strings by replacing specific patterns with predefined values.",1,"def _find_and_replace(self, date_string, captures):
    new_date_string = date_string.replace(""pattern1"", ""replacement1"").replace(""pattern2"", ""replacement2"")
    
    for pattern, replacement in captures.items():
        new_date_string = new_date_string.replace(pattern, replacement)
    
    timezones = [tz for tz in captures.values() if tz.startswith(""timezone"")]
    if timezones:
        timezone_string = sorted(timezones)[-1]
    else:
        timezone_string = ""No timezone found""
    
    return new_date_string, timezone_string","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","48 Passed, 6 Failed",48,6,"['tests/test_find_and_replace.py::test_find_and_replace[due on Tuesday Jul 22, 2014 eastern standard time- tuesday jul 22, 2014 eastern -captures0-EST]', 'tests/test_find_dates.py::test_find_date_strings[i am looking for a date june 4th 1996 to july 3rd 2013-expected_date15-month]', 'tests/test_find_dates.py::test_find_date_strings[Dutta is the recipient of Femina Miss India Universe title in 2004.-expected_date22-month]', 'tests/test_find_dates.py::test_find_date_strings[she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.-expected_date23-month]', 'tests/test_find_dates.py::test_find_date_strings[12th day of December, 2001-expected_date24-month]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[19th day of May, 2015-expected_date4]']","[""date_string = 'due on Tuesday Jul 22, 2014 eastern standard time'\nexpected_replaced_string = ' tuesday jul 22, 2014 eastern '\ncaptures = {'timezones': ['EST']}, expected_tz_string = 'EST'\n\n    @pytest.mark.parametrize('date_string, expected_replaced_string, captures, expected_tz_string', [\n        ('due on Tuesday Jul 22, 2014 eastern standard time',\n        ' tuesday jul 22, 2014 eastern ',\n         {'timezones':['EST']},\n         'EST',\n        )\n    ])\n    def test_find_and_replace(date_string, expected_replaced_string, captures, expected_tz_string):\n        dt = datefinder.DateFinder()\n        expected_replacements = copy.copy(REPLACEMENTS)\n>       actual_date_string, actual_tz_string = dt._find_and_replace(date_string, captures)\n\nrepos\\datefinder\\tests\\test_find_and_replace.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000027B92D05F10>\ndate_string = 'due on Tuesday Jul 22, 2014 eastern standard time'\ncaptures = {'timezones': ['EST']}\n\n    def _find_and_replace(self, date_string, captures):\n        new_date_string = date_string.replace('pattern1', 'replacement1').replace('pattern2', 'replacement2')\n        for pattern, replacement in captures.items():\n>           new_date_string = new_date_string.replace(pattern, replacement)\nE           TypeError: replace() argument 2 must be str, not list\n\nrepos\\datefinder\\datefinder\\__init__.py:40: TypeError"", 'self = <datefinder.DateFinder object at 0x0000027B93067350>\ndate_string = \'date june 4th 1996\'\ncaptures = {\'days\': [], \'delimiters\': [\' \', \' \', \' \', \' \'], \'digits\': [\'4\'], \'digits_suffixes\': [\'th\'], ...}\n\n    def parse_date_string(self, date_string, captures):\n        try:\n>           as_dt = parser.parse(date_string, default=self.base_date, dayfirst=self.dayfirst, yearfirst=self.yearfirst)\n\nrepos\\datefinder\\datefinder\\__init__.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\dateutil\\parser\\_parser.py:1368: in parse\n    return DEFAULTPARSER.parse(timestr, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <dateutil.parser._parser.parser object at 0x0000027B929C1160>\ntimestr = \'date june 4th 1996\', default = datetime.datetime(2025, 4, 14, 0, 0)\nignoretz = False, tzinfos = None\nkwargs = {\'dayfirst\': False, \'yearfirst\': False}, res = None\nskipped_tokens = None\n\n    def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        """"""\n        Parse the date/time string into a :class:`datetime.datetime` object.\n    \n        :param timestr:\n            Any date/time string using the supported formats.\n    \n        :param default:\n            The default datetime object, if this is a datetime object and not\n            ``None``, elements specified in ``timestr`` replace elements in the\n            default object.\n    \n        :param ignoretz:\n            If set ``True``, time zones in parsed strings are ignored and a\n            naive :class:`datetime.datetime` object is returned.\n    \n        :param tzinfos:\n            Additional time zone names / aliases which may be present in the\n            string. This argument maps time zone names (and optionally offsets\n            from those time zones) to time zones. This parameter can be a\n            dictionary with timezone aliases mapping time zone names to time\n            zones or a function taking two parameters (``tzname`` and\n            ``tzoffset``) and returning a time zone.\n    \n            The timezones to which the names are mapped can be an integer\n            offset from UTC in seconds or a :class:`tzinfo` object.\n    \n            .. doctest::\n               :options: +NORMALIZE_WHITESPACE\n    \n                >>> from dateutil.parser import parse\n                >>> from dateutil.tz import gettz\n                >>> tzinfos = {""BRST"": -7200, ""CST"": gettz(""America/Chicago"")}\n                >>> parse(""2012-01-19 17:21:00 BRST"", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u\'BRST\', -7200))\n                >>> parse(""2012-01-19 17:21:00 CST"", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21,\n                                  tzinfo=tzfile(\'/usr/share/zoneinfo/America/Chicago\'))\n    \n            This parameter is ignored if ``ignoretz`` is set.\n    \n        :param \\\\*\\\\*kwargs:\n            Keyword arguments as passed to ``_parse()``.\n    \n        :return:\n            Returns a :class:`datetime.datetime` object or, if the\n            ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n            first element being a :class:`datetime.datetime` object, the second\n            a tuple containing the fuzzy tokens.\n    \n        :raises ParserError:\n            Raised for invalid or unknown string format, if the provided\n            :class:`tzinfo` is not in a valid format, or if an invalid date\n            would be created.\n    \n        :raises TypeError:\n            Raised for non-string or character stream input.\n    \n        :raises OverflowError:\n            Raised if the parsed date exceeds the largest valid C integer on\n            your system.\n        """"""\n    \n        if default is None:\n            default = datetime.datetime.now().replace(hour=0, minute=0,\n                                                      second=0, microsecond=0)\n    \n        res, skipped_tokens = self._parse(timestr, **kwargs)\n    \n        if res is None:\n>           raise ParserError(""Unknown string format: %s"", timestr)\nE           dateutil.parser._parser.ParserError: Unknown string format: date june 4th 1996\n\nvenv\\Lib\\site-packages\\dateutil\\parser\\_parser.py:643: ParserError\n\nDuring handling of the above exception, another exception occurred:\n\ninput_text = \'i am looking for a date june 4th 1996 to july 3rd 2013\'\nexpected_date = [datetime.datetime(1996, 6, 4, 0, 0), datetime.datetime(2013, 7, 3, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n>           matches = list(datefinder.find_dates(input_text, first=first))\n\nrepos\\datefinder\\tests\\test_find_dates.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:25: in find_dates\n    as_dt = self.parse_date_string(date_string, captures)\nrepos\\datefinder\\datefinder\\__init__.py:71: in parse_date_string\n    date_string, tz_string = self._find_and_replace(date_string, captures)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000027B93067350>\ndate_string = \'date june 4th 1996\'\ncaptures = {\'days\': [], \'delimiters\': [\' \', \' \', \' \', \' \'], \'digits\': [\'4\'], \'digits_suffixes\': [\'th\'], ...}\n\n    def _find_and_replace(self, date_string, captures):\n        new_date_string = date_string.replace(\'pattern1\', \'replacement1\').replace(\'pattern2\', \'replacement2\')\n        for pattern, replacement in captures.items():\n>           new_date_string = new_date_string.replace(pattern, replacement)\nE           TypeError: replace() argument 2 must be str, not list\n\nrepos\\datefinder\\datefinder\\__init__.py:40: TypeError', 'self = <datefinder.DateFinder object at 0x0000027B93067D10>, date_string = \'of\'\ncaptures = {\'days\': [], \'delimiters\': [\' \', \' \'], \'digits\': [], \'digits_suffixes\': [], ...}\n\n    def parse_date_string(self, date_string, captures):\n        try:\n>           as_dt = parser.parse(date_string, default=self.base_date, dayfirst=self.dayfirst, yearfirst=self.yearfirst)\n\nrepos\\datefinder\\datefinder\\__init__.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\dateutil\\parser\\_parser.py:1368: in parse\n    return DEFAULTPARSER.parse(timestr, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <dateutil.parser._parser.parser object at 0x0000027B929C1160>\ntimestr = \'of\', default = datetime.datetime(2025, 4, 14, 0, 0), ignoretz = False\ntzinfos = None, kwargs = {\'dayfirst\': False, \'yearfirst\': False}\nres = _result(), skipped_tokens = None\n\n    def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        """"""\n        Parse the date/time string into a :class:`datetime.datetime` object.\n    \n        :param timestr:\n            Any date/time string using the supported formats.\n    \n        :param default:\n            The default datetime object, if this is a datetime object and not\n            ``None``, elements specified in ``timestr`` replace elements in the\n            default object.\n    \n        :param ignoretz:\n            If set ``True``, time zones in parsed strings are ignored and a\n            naive :class:`datetime.datetime` object is returned.\n    \n        :param tzinfos:\n            Additional time zone names / aliases which may be present in the\n            string. This argument maps time zone names (and optionally offsets\n            from those time zones) to time zones. This parameter can be a\n            dictionary with timezone aliases mapping time zone names to time\n            zones or a function taking two parameters (``tzname`` and\n            ``tzoffset``) and returning a time zone.\n    \n            The timezones to which the names are mapped can be an integer\n            offset from UTC in seconds or a :class:`tzinfo` object.\n    \n            .. doctest::\n               :options: +NORMALIZE_WHITESPACE\n    \n                >>> from dateutil.parser import parse\n                >>> from dateutil.tz import gettz\n                >>> tzinfos = {""BRST"": -7200, ""CST"": gettz(""America/Chicago"")}\n                >>> parse(""2012-01-19 17:21:00 BRST"", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u\'BRST\', -7200))\n                >>> parse(""2012-01-19 17:21:00 CST"", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21,\n                                  tzinfo=tzfile(\'/usr/share/zoneinfo/America/Chicago\'))\n    \n            This parameter is ignored if ``ignoretz`` is set.\n    \n        :param \\\\*\\\\*kwargs:\n            Keyword arguments as passed to ``_parse()``.\n    \n        :return:\n            Returns a :class:`datetime.datetime` object or, if the\n            ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n            first element being a :class:`datetime.datetime` object, the second\n            a tuple containing the fuzzy tokens.\n    \n        :raises ParserError:\n            Raised for invalid or unknown string format, if the provided\n            :class:`tzinfo` is not in a valid format, or if an invalid date\n            would be created.\n    \n        :raises TypeError:\n            Raised for non-string or character stream input.\n    \n        :raises OverflowError:\n            Raised if the parsed date exceeds the largest valid C integer on\n            your system.\n        """"""\n    \n        if default is None:\n            default = datetime.datetime.now().replace(hour=0, minute=0,\n                                                      second=0, microsecond=0)\n    \n        res, skipped_tokens = self._parse(timestr, **kwargs)\n    \n        if res is None:\n            raise ParserError(""Unknown string format: %s"", timestr)\n    \n        if len(res) == 0:\n>           raise ParserError(""String does not contain a date: %s"", timestr)\nE           dateutil.parser._parser.ParserError: String does not contain a date: of\n\nvenv\\Lib\\site-packages\\dateutil\\parser\\_parser.py:646: ParserError\n\nDuring handling of the above exception, another exception occurred:\n\ninput_text = \'Dutta is the recipient of Femina Miss India Universe title in 2004.\'\nexpected_date = datetime.datetime(2004, 4, 14, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:25: in find_dates\n    as_dt = self.parse_date_string(date_string, captures)\nrepos\\datefinder\\datefinder\\__init__.py:71: in parse_date_string\n    date_string, tz_string = self._find_and_replace(date_string, captures)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000027B93067D10>, date_string = \'of\'\ncaptures = {\'days\': [], \'delimiters\': [\' \', \' \'], \'digits\': [], \'digits_suffixes\': [], ...}\n\n    def _find_and_replace(self, date_string, captures):\n        new_date_string = date_string.replace(\'pattern1\', \'replacement1\').replace(\'pattern2\', \'replacement2\')\n        for pattern, replacement in captures.items():\n>           new_date_string = new_date_string.replace(pattern, replacement)\nE           TypeError: replace() argument 2 must be str, not list\n\nrepos\\datefinder\\datefinder\\__init__.py:40: TypeError', 'self = <datefinder.DateFinder object at 0x0000027B92B38410>, date_string = \'on\'\ncaptures = {\'days\': [], \'delimiters\': [\' \', \' \'], \'digits\': [], \'digits_suffixes\': [], ...}\n\n    def parse_date_string(self, date_string, captures):\n        try:\n>           as_dt = parser.parse(date_string, default=self.base_date, dayfirst=self.dayfirst, yearfirst=self.yearfirst)\n\nrepos\\datefinder\\datefinder\\__init__.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\dateutil\\parser\\_parser.py:1368: in parse\n    return DEFAULTPARSER.parse(timestr, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <dateutil.parser._parser.parser object at 0x0000027B929C1160>\ntimestr = \'on\', default = datetime.datetime(2025, 4, 14, 0, 0), ignoretz = False\ntzinfos = None, kwargs = {\'dayfirst\': False, \'yearfirst\': False}\nres = _result(), skipped_tokens = None\n\n    def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        """"""\n        Parse the date/time string into a :class:`datetime.datetime` object.\n    \n        :param timestr:\n            Any date/time string using the supported formats.\n    \n        :param default:\n            The default datetime object, if this is a datetime object and not\n            ``None``, elements specified in ``timestr`` replace elements in the\n            default object.\n    \n        :param ignoretz:\n            If set ``True``, time zones in parsed strings are ignored and a\n            naive :class:`datetime.datetime` object is returned.\n    \n        :param tzinfos:\n            Additional time zone names / aliases which may be present in the\n            string. This argument maps time zone names (and optionally offsets\n            from those time zones) to time zones. This parameter can be a\n            dictionary with timezone aliases mapping time zone names to time\n            zones or a function taking two parameters (``tzname`` and\n            ``tzoffset``) and returning a time zone.\n    \n            The timezones to which the names are mapped can be an integer\n            offset from UTC in seconds or a :class:`tzinfo` object.\n    \n            .. doctest::\n               :options: +NORMALIZE_WHITESPACE\n    \n                >>> from dateutil.parser import parse\n                >>> from dateutil.tz import gettz\n                >>> tzinfos = {""BRST"": -7200, ""CST"": gettz(""America/Chicago"")}\n                >>> parse(""2012-01-19 17:21:00 BRST"", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u\'BRST\', -7200))\n                >>> parse(""2012-01-19 17:21:00 CST"", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21,\n                                  tzinfo=tzfile(\'/usr/share/zoneinfo/America/Chicago\'))\n    \n            This parameter is ignored if ``ignoretz`` is set.\n    \n        :param \\\\*\\\\*kwargs:\n            Keyword arguments as passed to ``_parse()``.\n    \n        :return:\n            Returns a :class:`datetime.datetime` object or, if the\n            ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n            first element being a :class:`datetime.datetime` object, the second\n            a tuple containing the fuzzy tokens.\n    \n        :raises ParserError:\n            Raised for invalid or unknown string format, if the provided\n            :class:`tzinfo` is not in a valid format, or if an invalid date\n            would be created.\n    \n        :raises TypeError:\n            Raised for non-string or character stream input.\n    \n        :raises OverflowError:\n            Raised if the parsed date exceeds the largest valid C integer on\n            your system.\n        """"""\n    \n        if default is None:\n            default = datetime.datetime.now().replace(hour=0, minute=0,\n                                                      second=0, microsecond=0)\n    \n        res, skipped_tokens = self._parse(timestr, **kwargs)\n    \n        if res is None:\n            raise ParserError(""Unknown string format: %s"", timestr)\n    \n        if len(res) == 0:\n>           raise ParserError(""String does not contain a date: %s"", timestr)\nE           dateutil.parser._parser.ParserError: String does not contain a date: on\n\nvenv\\Lib\\site-packages\\dateutil\\parser\\_parser.py:646: ParserError\n\nDuring handling of the above exception, another exception occurred:\n\ninput_text = \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\'\nexpected_date = datetime.datetime(2008, 4, 14, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:25: in find_dates\n    as_dt = self.parse_date_string(date_string, captures)\nrepos\\datefinder\\datefinder\\__init__.py:71: in parse_date_string\n    date_string, tz_string = self._find_and_replace(date_string, captures)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000027B92B38410>, date_string = \'on\'\ncaptures = {\'days\': [], \'delimiters\': [\' \', \' \'], \'digits\': [], \'digits_suffixes\': [], ...}\n\n    def _find_and_replace(self, date_string, captures):\n        new_date_string = date_string.replace(\'pattern1\', \'replacement1\').replace(\'pattern2\', \'replacement2\')\n        for pattern, replacement in captures.items():\n>           new_date_string = new_date_string.replace(pattern, replacement)\nE           TypeError: replace() argument 2 must be str, not list\n\nrepos\\datefinder\\datefinder\\__init__.py:40: TypeError', 'self = <datefinder.DateFinder object at 0x0000027B92B3B1D0>\ndate_string = \'12th day of December, 2001\'\ncaptures = {\'days\': [], \'delimiters\': [\' \', \' \', \' \', \', \'], \'digits\': [\'12\'], \'digits_suffixes\': [\'th\'], ...}\n\n    def parse_date_string(self, date_string, captures):\n        try:\n>           as_dt = parser.parse(date_string, default=self.base_date, dayfirst=self.dayfirst, yearfirst=self.yearfirst)\n\nrepos\\datefinder\\datefinder\\__init__.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\dateutil\\parser\\_parser.py:1368: in parse\n    return DEFAULTPARSER.parse(timestr, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <dateutil.parser._parser.parser object at 0x0000027B929C1160>\ntimestr = \'12th day of December, 2001\'\ndefault = datetime.datetime(2025, 4, 14, 0, 0), ignoretz = False, tzinfos = None\nkwargs = {\'dayfirst\': False, \'yearfirst\': False}, res = None\nskipped_tokens = None\n\n    def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        """"""\n        Parse the date/time string into a :class:`datetime.datetime` object.\n    \n        :param timestr:\n            Any date/time string using the supported formats.\n    \n        :param default:\n            The default datetime object, if this is a datetime object and not\n            ``None``, elements specified in ``timestr`` replace elements in the\n            default object.\n    \n        :param ignoretz:\n            If set ``True``, time zones in parsed strings are ignored and a\n            naive :class:`datetime.datetime` object is returned.\n    \n        :param tzinfos:\n            Additional time zone names / aliases which may be present in the\n            string. This argument maps time zone names (and optionally offsets\n            from those time zones) to time zones. This parameter can be a\n            dictionary with timezone aliases mapping time zone names to time\n            zones or a function taking two parameters (``tzname`` and\n            ``tzoffset``) and returning a time zone.\n    \n            The timezones to which the names are mapped can be an integer\n            offset from UTC in seconds or a :class:`tzinfo` object.\n    \n            .. doctest::\n               :options: +NORMALIZE_WHITESPACE\n    \n                >>> from dateutil.parser import parse\n                >>> from dateutil.tz import gettz\n                >>> tzinfos = {""BRST"": -7200, ""CST"": gettz(""America/Chicago"")}\n                >>> parse(""2012-01-19 17:21:00 BRST"", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u\'BRST\', -7200))\n                >>> parse(""2012-01-19 17:21:00 CST"", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21,\n                                  tzinfo=tzfile(\'/usr/share/zoneinfo/America/Chicago\'))\n    \n            This parameter is ignored if ``ignoretz`` is set.\n    \n        :param \\\\*\\\\*kwargs:\n            Keyword arguments as passed to ``_parse()``.\n    \n        :return:\n            Returns a :class:`datetime.datetime` object or, if the\n            ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n            first element being a :class:`datetime.datetime` object, the second\n            a tuple containing the fuzzy tokens.\n    \n        :raises ParserError:\n            Raised for invalid or unknown string format, if the provided\n            :class:`tzinfo` is not in a valid format, or if an invalid date\n            would be created.\n    \n        :raises TypeError:\n            Raised for non-string or character stream input.\n    \n        :raises OverflowError:\n            Raised if the parsed date exceeds the largest valid C integer on\n            your system.\n        """"""\n    \n        if default is None:\n            default = datetime.datetime.now().replace(hour=0, minute=0,\n                                                      second=0, microsecond=0)\n    \n        res, skipped_tokens = self._parse(timestr, **kwargs)\n    \n        if res is None:\n>           raise ParserError(""Unknown string format: %s"", timestr)\nE           dateutil.parser._parser.ParserError: Unknown string format: 12th day of December, 2001\n\nvenv\\Lib\\site-packages\\dateutil\\parser\\_parser.py:643: ParserError\n\nDuring handling of the above exception, another exception occurred:\n\ninput_text = \'12th day of December, 2001\'\nexpected_date = datetime.datetime(2001, 12, 12, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:25: in find_dates\n    as_dt = self.parse_date_string(date_string, captures)\nrepos\\datefinder\\datefinder\\__init__.py:71: in parse_date_string\n    date_string, tz_string = self._find_and_replace(date_string, captures)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000027B92B3B1D0>\ndate_string = \'12th day of December, 2001\'\ncaptures = {\'days\': [], \'delimiters\': [\' \', \' \', \' \', \', \'], \'digits\': [\'12\'], \'digits_suffixes\': [\'th\'], ...}\n\n    def _find_and_replace(self, date_string, captures):\n        new_date_string = date_string.replace(\'pattern1\', \'replacement1\').replace(\'pattern2\', \'replacement2\')\n        for pattern, replacement in captures.items():\n>           new_date_string = new_date_string.replace(pattern, replacement)\nE           TypeError: replace() argument 2 must be str, not list\n\nrepos\\datefinder\\datefinder\\__init__.py:40: TypeError', 'self = <datefinder.DateFinder object at 0x0000027B92B39370>\ndate_string = \'19th day of May, 2015\'\ncaptures = {\'days\': [], \'delimiters\': [\' \', \' \', \' \', \', \'], \'digits\': [\'19\'], \'digits_suffixes\': [\'th\'], ...}\n\n    def parse_date_string(self, date_string, captures):\n        try:\n>           as_dt = parser.parse(date_string, default=self.base_date, dayfirst=self.dayfirst, yearfirst=self.yearfirst)\n\nrepos\\datefinder\\datefinder\\__init__.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\dateutil\\parser\\_parser.py:1368: in parse\n    return DEFAULTPARSER.parse(timestr, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <dateutil.parser._parser.parser object at 0x0000027B929C1160>\ntimestr = \'19th day of May, 2015\'\ndefault = datetime.datetime(2025, 4, 14, 0, 0), ignoretz = False, tzinfos = None\nkwargs = {\'dayfirst\': False, \'yearfirst\': False}, res = None\nskipped_tokens = None\n\n    def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        """"""\n        Parse the date/time string into a :class:`datetime.datetime` object.\n    \n        :param timestr:\n            Any date/time string using the supported formats.\n    \n        :param default:\n            The default datetime object, if this is a datetime object and not\n            ``None``, elements specified in ``timestr`` replace elements in the\n            default object.\n    \n        :param ignoretz:\n            If set ``True``, time zones in parsed strings are ignored and a\n            naive :class:`datetime.datetime` object is returned.\n    \n        :param tzinfos:\n            Additional time zone names / aliases which may be present in the\n            string. This argument maps time zone names (and optionally offsets\n            from those time zones) to time zones. This parameter can be a\n            dictionary with timezone aliases mapping time zone names to time\n            zones or a function taking two parameters (``tzname`` and\n            ``tzoffset``) and returning a time zone.\n    \n            The timezones to which the names are mapped can be an integer\n            offset from UTC in seconds or a :class:`tzinfo` object.\n    \n            .. doctest::\n               :options: +NORMALIZE_WHITESPACE\n    \n                >>> from dateutil.parser import parse\n                >>> from dateutil.tz import gettz\n                >>> tzinfos = {""BRST"": -7200, ""CST"": gettz(""America/Chicago"")}\n                >>> parse(""2012-01-19 17:21:00 BRST"", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u\'BRST\', -7200))\n                >>> parse(""2012-01-19 17:21:00 CST"", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21,\n                                  tzinfo=tzfile(\'/usr/share/zoneinfo/America/Chicago\'))\n    \n            This parameter is ignored if ``ignoretz`` is set.\n    \n        :param \\\\*\\\\*kwargs:\n            Keyword arguments as passed to ``_parse()``.\n    \n        :return:\n            Returns a :class:`datetime.datetime` object or, if the\n            ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n            first element being a :class:`datetime.datetime` object, the second\n            a tuple containing the fuzzy tokens.\n    \n        :raises ParserError:\n            Raised for invalid or unknown string format, if the provided\n            :class:`tzinfo` is not in a valid format, or if an invalid date\n            would be created.\n    \n        :raises TypeError:\n            Raised for non-string or character stream input.\n    \n        :raises OverflowError:\n            Raised if the parsed date exceeds the largest valid C integer on\n            your system.\n        """"""\n    \n        if default is None:\n            default = datetime.datetime.now().replace(hour=0, minute=0,\n                                                      second=0, microsecond=0)\n    \n        res, skipped_tokens = self._parse(timestr, **kwargs)\n    \n        if res is None:\n>           raise ParserError(""Unknown string format: %s"", timestr)\nE           dateutil.parser._parser.ParserError: Unknown string format: 19th day of May, 2015\n\nvenv\\Lib\\site-packages\\dateutil\\parser\\_parser.py:643: ParserError\n\nDuring handling of the above exception, another exception occurred:\n\ninput_text = \'19th day of May, 2015\'\nexpected_date = datetime.datetime(2015, 5, 19, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, strict=True):\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:25: in find_dates\n    as_dt = self.parse_date_string(date_string, captures)\nrepos\\datefinder\\datefinder\\__init__.py:71: in parse_date_string\n    date_string, tz_string = self._find_and_replace(date_string, captures)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000027B92B39370>\ndate_string = \'19th day of May, 2015\'\ncaptures = {\'days\': [], \'delimiters\': [\' \', \' \', \' \', \', \'], \'digits\': [\'19\'], \'digits_suffixes\': [\'th\'], ...}\n\n    def _find_and_replace(self, date_string, captures):\n        new_date_string = date_string.replace(\'pattern1\', \'replacement1\').replace(\'pattern2\', \'replacement2\')\n        for pattern, replacement in captures.items():\n>           new_date_string = new_date_string.replace(pattern, replacement)\nE           TypeError: replace() argument 2 must be str, not list\n\nrepos\\datefinder\\datefinder\\__init__.py:40: TypeError']"
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the `_find_and_replace` function is to search a given `date_string` for specific patterns and replace them based on a set of predefined replacements. It also looks for timezones in the `captures` dictionary and updates the replacements accordingly. The function returns the modified `date_string` and the timezone string. If multiple timezones are found, it selects the last sorted timezone as the final timezone string. This function is designed to clean and manipulate date strings by replacing specific patterns with predefined values.",2,"def _find_and_replace(self, date_string, captures):
    modified_date_string = date_string.replace('pattern1', 'replacement1').replace('pattern2', 'replacement2')
    
    for key, value in captures.items():
        modified_date_string = modified_date_string.replace(key, value)
    
    timezones = []
    for key in captures.keys():
        if key.startswith('timezone'):
            timezones.append(captures[key])
    
    if timezones:
        timezone_string = sorted(timezones)[-1]
    else:
        timezone_string = ''
    
    return modified_date_string, timezone_string","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","48 Passed, 6 Failed",48,6,"['tests/test_find_and_replace.py::test_find_and_replace[due on Tuesday Jul 22, 2014 eastern standard time- tuesday jul 22, 2014 eastern -captures0-EST]', 'tests/test_find_dates.py::test_find_date_strings[i am looking for a date june 4th 1996 to july 3rd 2013-expected_date15-month]', 'tests/test_find_dates.py::test_find_date_strings[Dutta is the recipient of Femina Miss India Universe title in 2004.-expected_date22-month]', 'tests/test_find_dates.py::test_find_date_strings[she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.-expected_date23-month]', 'tests/test_find_dates.py::test_find_date_strings[12th day of December, 2001-expected_date24-month]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[19th day of May, 2015-expected_date4]']","[""date_string = 'due on Tuesday Jul 22, 2014 eastern standard time'\nexpected_replaced_string = ' tuesday jul 22, 2014 eastern '\ncaptures = {'timezones': ['EST']}, expected_tz_string = 'EST'\n\n    @pytest.mark.parametrize('date_string, expected_replaced_string, captures, expected_tz_string', [\n        ('due on Tuesday Jul 22, 2014 eastern standard time',\n        ' tuesday jul 22, 2014 eastern ',\n         {'timezones':['EST']},\n         'EST',\n        )\n    ])\n    def test_find_and_replace(date_string, expected_replaced_string, captures, expected_tz_string):\n        dt = datefinder.DateFinder()\n        expected_replacements = copy.copy(REPLACEMENTS)\n>       actual_date_string, actual_tz_string = dt._find_and_replace(date_string, captures)\n\nrepos\\datefinder\\tests\\test_find_and_replace.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000001B5862F5F10>\ndate_string = 'due on Tuesday Jul 22, 2014 eastern standard time'\ncaptures = {'timezones': ['EST']}\n\n    def _find_and_replace(self, date_string, captures):\n        modified_date_string = date_string.replace('pattern1', 'replacement1').replace('pattern2', 'replacement2')\n        for key, value in captures.items():\n>           modified_date_string = modified_date_string.replace(key, value)\nE           TypeError: replace() argument 2 must be str, not list\n\nrepos\\datefinder\\datefinder\\__init__.py:40: TypeError"", 'self = <datefinder.DateFinder object at 0x000001B586657350>\ndate_string = \'date june 4th 1996\'\ncaptures = {\'days\': [], \'delimiters\': [\' \', \' \', \' \', \' \'], \'digits\': [\'4\'], \'digits_suffixes\': [\'th\'], ...}\n\n    def parse_date_string(self, date_string, captures):\n        try:\n>           as_dt = parser.parse(date_string, default=self.base_date, dayfirst=self.dayfirst, yearfirst=self.yearfirst)\n\nrepos\\datefinder\\datefinder\\__init__.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\dateutil\\parser\\_parser.py:1368: in parse\n    return DEFAULTPARSER.parse(timestr, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <dateutil.parser._parser.parser object at 0x000001B585FB5160>\ntimestr = \'date june 4th 1996\', default = datetime.datetime(2025, 4, 14, 0, 0)\nignoretz = False, tzinfos = None\nkwargs = {\'dayfirst\': False, \'yearfirst\': False}, res = None\nskipped_tokens = None\n\n    def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        """"""\n        Parse the date/time string into a :class:`datetime.datetime` object.\n    \n        :param timestr:\n            Any date/time string using the supported formats.\n    \n        :param default:\n            The default datetime object, if this is a datetime object and not\n            ``None``, elements specified in ``timestr`` replace elements in the\n            default object.\n    \n        :param ignoretz:\n            If set ``True``, time zones in parsed strings are ignored and a\n            naive :class:`datetime.datetime` object is returned.\n    \n        :param tzinfos:\n            Additional time zone names / aliases which may be present in the\n            string. This argument maps time zone names (and optionally offsets\n            from those time zones) to time zones. This parameter can be a\n            dictionary with timezone aliases mapping time zone names to time\n            zones or a function taking two parameters (``tzname`` and\n            ``tzoffset``) and returning a time zone.\n    \n            The timezones to which the names are mapped can be an integer\n            offset from UTC in seconds or a :class:`tzinfo` object.\n    \n            .. doctest::\n               :options: +NORMALIZE_WHITESPACE\n    \n                >>> from dateutil.parser import parse\n                >>> from dateutil.tz import gettz\n                >>> tzinfos = {""BRST"": -7200, ""CST"": gettz(""America/Chicago"")}\n                >>> parse(""2012-01-19 17:21:00 BRST"", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u\'BRST\', -7200))\n                >>> parse(""2012-01-19 17:21:00 CST"", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21,\n                                  tzinfo=tzfile(\'/usr/share/zoneinfo/America/Chicago\'))\n    \n            This parameter is ignored if ``ignoretz`` is set.\n    \n        :param \\\\*\\\\*kwargs:\n            Keyword arguments as passed to ``_parse()``.\n    \n        :return:\n            Returns a :class:`datetime.datetime` object or, if the\n            ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n            first element being a :class:`datetime.datetime` object, the second\n            a tuple containing the fuzzy tokens.\n    \n        :raises ParserError:\n            Raised for invalid or unknown string format, if the provided\n            :class:`tzinfo` is not in a valid format, or if an invalid date\n            would be created.\n    \n        :raises TypeError:\n            Raised for non-string or character stream input.\n    \n        :raises OverflowError:\n            Raised if the parsed date exceeds the largest valid C integer on\n            your system.\n        """"""\n    \n        if default is None:\n            default = datetime.datetime.now().replace(hour=0, minute=0,\n                                                      second=0, microsecond=0)\n    \n        res, skipped_tokens = self._parse(timestr, **kwargs)\n    \n        if res is None:\n>           raise ParserError(""Unknown string format: %s"", timestr)\nE           dateutil.parser._parser.ParserError: Unknown string format: date june 4th 1996\n\nvenv\\Lib\\site-packages\\dateutil\\parser\\_parser.py:643: ParserError\n\nDuring handling of the above exception, another exception occurred:\n\ninput_text = \'i am looking for a date june 4th 1996 to july 3rd 2013\'\nexpected_date = [datetime.datetime(1996, 6, 4, 0, 0), datetime.datetime(2013, 7, 3, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n>           matches = list(datefinder.find_dates(input_text, first=first))\n\nrepos\\datefinder\\tests\\test_find_dates.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:25: in find_dates\n    as_dt = self.parse_date_string(date_string, captures)\nrepos\\datefinder\\datefinder\\__init__.py:74: in parse_date_string\n    date_string, tz_string = self._find_and_replace(date_string, captures)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000001B586657350>\ndate_string = \'date june 4th 1996\'\ncaptures = {\'days\': [], \'delimiters\': [\' \', \' \', \' \', \' \'], \'digits\': [\'4\'], \'digits_suffixes\': [\'th\'], ...}\n\n    def _find_and_replace(self, date_string, captures):\n        modified_date_string = date_string.replace(\'pattern1\', \'replacement1\').replace(\'pattern2\', \'replacement2\')\n        for key, value in captures.items():\n>           modified_date_string = modified_date_string.replace(key, value)\nE           TypeError: replace() argument 2 must be str, not list\n\nrepos\\datefinder\\datefinder\\__init__.py:40: TypeError', 'self = <datefinder.DateFinder object at 0x000001B58674FAD0>, date_string = \'of\'\ncaptures = {\'days\': [], \'delimiters\': [\' \', \' \'], \'digits\': [], \'digits_suffixes\': [], ...}\n\n    def parse_date_string(self, date_string, captures):\n        try:\n>           as_dt = parser.parse(date_string, default=self.base_date, dayfirst=self.dayfirst, yearfirst=self.yearfirst)\n\nrepos\\datefinder\\datefinder\\__init__.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\dateutil\\parser\\_parser.py:1368: in parse\n    return DEFAULTPARSER.parse(timestr, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <dateutil.parser._parser.parser object at 0x000001B585FB5160>\ntimestr = \'of\', default = datetime.datetime(2025, 4, 14, 0, 0), ignoretz = False\ntzinfos = None, kwargs = {\'dayfirst\': False, \'yearfirst\': False}\nres = _result(), skipped_tokens = None\n\n    def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        """"""\n        Parse the date/time string into a :class:`datetime.datetime` object.\n    \n        :param timestr:\n            Any date/time string using the supported formats.\n    \n        :param default:\n            The default datetime object, if this is a datetime object and not\n            ``None``, elements specified in ``timestr`` replace elements in the\n            default object.\n    \n        :param ignoretz:\n            If set ``True``, time zones in parsed strings are ignored and a\n            naive :class:`datetime.datetime` object is returned.\n    \n        :param tzinfos:\n            Additional time zone names / aliases which may be present in the\n            string. This argument maps time zone names (and optionally offsets\n            from those time zones) to time zones. This parameter can be a\n            dictionary with timezone aliases mapping time zone names to time\n            zones or a function taking two parameters (``tzname`` and\n            ``tzoffset``) and returning a time zone.\n    \n            The timezones to which the names are mapped can be an integer\n            offset from UTC in seconds or a :class:`tzinfo` object.\n    \n            .. doctest::\n               :options: +NORMALIZE_WHITESPACE\n    \n                >>> from dateutil.parser import parse\n                >>> from dateutil.tz import gettz\n                >>> tzinfos = {""BRST"": -7200, ""CST"": gettz(""America/Chicago"")}\n                >>> parse(""2012-01-19 17:21:00 BRST"", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u\'BRST\', -7200))\n                >>> parse(""2012-01-19 17:21:00 CST"", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21,\n                                  tzinfo=tzfile(\'/usr/share/zoneinfo/America/Chicago\'))\n    \n            This parameter is ignored if ``ignoretz`` is set.\n    \n        :param \\\\*\\\\*kwargs:\n            Keyword arguments as passed to ``_parse()``.\n    \n        :return:\n            Returns a :class:`datetime.datetime` object or, if the\n            ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n            first element being a :class:`datetime.datetime` object, the second\n            a tuple containing the fuzzy tokens.\n    \n        :raises ParserError:\n            Raised for invalid or unknown string format, if the provided\n            :class:`tzinfo` is not in a valid format, or if an invalid date\n            would be created.\n    \n        :raises TypeError:\n            Raised for non-string or character stream input.\n    \n        :raises OverflowError:\n            Raised if the parsed date exceeds the largest valid C integer on\n            your system.\n        """"""\n    \n        if default is None:\n            default = datetime.datetime.now().replace(hour=0, minute=0,\n                                                      second=0, microsecond=0)\n    \n        res, skipped_tokens = self._parse(timestr, **kwargs)\n    \n        if res is None:\n            raise ParserError(""Unknown string format: %s"", timestr)\n    \n        if len(res) == 0:\n>           raise ParserError(""String does not contain a date: %s"", timestr)\nE           dateutil.parser._parser.ParserError: String does not contain a date: of\n\nvenv\\Lib\\site-packages\\dateutil\\parser\\_parser.py:646: ParserError\n\nDuring handling of the above exception, another exception occurred:\n\ninput_text = \'Dutta is the recipient of Femina Miss India Universe title in 2004.\'\nexpected_date = datetime.datetime(2004, 4, 14, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:25: in find_dates\n    as_dt = self.parse_date_string(date_string, captures)\nrepos\\datefinder\\datefinder\\__init__.py:74: in parse_date_string\n    date_string, tz_string = self._find_and_replace(date_string, captures)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000001B58674FAD0>, date_string = \'of\'\ncaptures = {\'days\': [], \'delimiters\': [\' \', \' \'], \'digits\': [], \'digits_suffixes\': [], ...}\n\n    def _find_and_replace(self, date_string, captures):\n        modified_date_string = date_string.replace(\'pattern1\', \'replacement1\').replace(\'pattern2\', \'replacement2\')\n        for key, value in captures.items():\n>           modified_date_string = modified_date_string.replace(key, value)\nE           TypeError: replace() argument 2 must be str, not list\n\nrepos\\datefinder\\datefinder\\__init__.py:40: TypeError', 'self = <datefinder.DateFinder object at 0x000001B5861281D0>, date_string = \'on\'\ncaptures = {\'days\': [], \'delimiters\': [\' \', \' \'], \'digits\': [], \'digits_suffixes\': [], ...}\n\n    def parse_date_string(self, date_string, captures):\n        try:\n>           as_dt = parser.parse(date_string, default=self.base_date, dayfirst=self.dayfirst, yearfirst=self.yearfirst)\n\nrepos\\datefinder\\datefinder\\__init__.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\dateutil\\parser\\_parser.py:1368: in parse\n    return DEFAULTPARSER.parse(timestr, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <dateutil.parser._parser.parser object at 0x000001B585FB5160>\ntimestr = \'on\', default = datetime.datetime(2025, 4, 14, 0, 0), ignoretz = False\ntzinfos = None, kwargs = {\'dayfirst\': False, \'yearfirst\': False}\nres = _result(), skipped_tokens = None\n\n    def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        """"""\n        Parse the date/time string into a :class:`datetime.datetime` object.\n    \n        :param timestr:\n            Any date/time string using the supported formats.\n    \n        :param default:\n            The default datetime object, if this is a datetime object and not\n            ``None``, elements specified in ``timestr`` replace elements in the\n            default object.\n    \n        :param ignoretz:\n            If set ``True``, time zones in parsed strings are ignored and a\n            naive :class:`datetime.datetime` object is returned.\n    \n        :param tzinfos:\n            Additional time zone names / aliases which may be present in the\n            string. This argument maps time zone names (and optionally offsets\n            from those time zones) to time zones. This parameter can be a\n            dictionary with timezone aliases mapping time zone names to time\n            zones or a function taking two parameters (``tzname`` and\n            ``tzoffset``) and returning a time zone.\n    \n            The timezones to which the names are mapped can be an integer\n            offset from UTC in seconds or a :class:`tzinfo` object.\n    \n            .. doctest::\n               :options: +NORMALIZE_WHITESPACE\n    \n                >>> from dateutil.parser import parse\n                >>> from dateutil.tz import gettz\n                >>> tzinfos = {""BRST"": -7200, ""CST"": gettz(""America/Chicago"")}\n                >>> parse(""2012-01-19 17:21:00 BRST"", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u\'BRST\', -7200))\n                >>> parse(""2012-01-19 17:21:00 CST"", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21,\n                                  tzinfo=tzfile(\'/usr/share/zoneinfo/America/Chicago\'))\n    \n            This parameter is ignored if ``ignoretz`` is set.\n    \n        :param \\\\*\\\\*kwargs:\n            Keyword arguments as passed to ``_parse()``.\n    \n        :return:\n            Returns a :class:`datetime.datetime` object or, if the\n            ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n            first element being a :class:`datetime.datetime` object, the second\n            a tuple containing the fuzzy tokens.\n    \n        :raises ParserError:\n            Raised for invalid or unknown string format, if the provided\n            :class:`tzinfo` is not in a valid format, or if an invalid date\n            would be created.\n    \n        :raises TypeError:\n            Raised for non-string or character stream input.\n    \n        :raises OverflowError:\n            Raised if the parsed date exceeds the largest valid C integer on\n            your system.\n        """"""\n    \n        if default is None:\n            default = datetime.datetime.now().replace(hour=0, minute=0,\n                                                      second=0, microsecond=0)\n    \n        res, skipped_tokens = self._parse(timestr, **kwargs)\n    \n        if res is None:\n            raise ParserError(""Unknown string format: %s"", timestr)\n    \n        if len(res) == 0:\n>           raise ParserError(""String does not contain a date: %s"", timestr)\nE           dateutil.parser._parser.ParserError: String does not contain a date: on\n\nvenv\\Lib\\site-packages\\dateutil\\parser\\_parser.py:646: ParserError\n\nDuring handling of the above exception, another exception occurred:\n\ninput_text = \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\'\nexpected_date = datetime.datetime(2008, 4, 14, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:25: in find_dates\n    as_dt = self.parse_date_string(date_string, captures)\nrepos\\datefinder\\datefinder\\__init__.py:74: in parse_date_string\n    date_string, tz_string = self._find_and_replace(date_string, captures)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000001B5861281D0>, date_string = \'on\'\ncaptures = {\'days\': [], \'delimiters\': [\' \', \' \'], \'digits\': [], \'digits_suffixes\': [], ...}\n\n    def _find_and_replace(self, date_string, captures):\n        modified_date_string = date_string.replace(\'pattern1\', \'replacement1\').replace(\'pattern2\', \'replacement2\')\n        for key, value in captures.items():\n>           modified_date_string = modified_date_string.replace(key, value)\nE           TypeError: replace() argument 2 must be str, not list\n\nrepos\\datefinder\\datefinder\\__init__.py:40: TypeError', 'self = <datefinder.DateFinder object at 0x000001B58612B110>\ndate_string = \'12th day of December, 2001\'\ncaptures = {\'days\': [], \'delimiters\': [\' \', \' \', \' \', \', \'], \'digits\': [\'12\'], \'digits_suffixes\': [\'th\'], ...}\n\n    def parse_date_string(self, date_string, captures):\n        try:\n>           as_dt = parser.parse(date_string, default=self.base_date, dayfirst=self.dayfirst, yearfirst=self.yearfirst)\n\nrepos\\datefinder\\datefinder\\__init__.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\dateutil\\parser\\_parser.py:1368: in parse\n    return DEFAULTPARSER.parse(timestr, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <dateutil.parser._parser.parser object at 0x000001B585FB5160>\ntimestr = \'12th day of December, 2001\'\ndefault = datetime.datetime(2025, 4, 14, 0, 0), ignoretz = False, tzinfos = None\nkwargs = {\'dayfirst\': False, \'yearfirst\': False}, res = None\nskipped_tokens = None\n\n    def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        """"""\n        Parse the date/time string into a :class:`datetime.datetime` object.\n    \n        :param timestr:\n            Any date/time string using the supported formats.\n    \n        :param default:\n            The default datetime object, if this is a datetime object and not\n            ``None``, elements specified in ``timestr`` replace elements in the\n            default object.\n    \n        :param ignoretz:\n            If set ``True``, time zones in parsed strings are ignored and a\n            naive :class:`datetime.datetime` object is returned.\n    \n        :param tzinfos:\n            Additional time zone names / aliases which may be present in the\n            string. This argument maps time zone names (and optionally offsets\n            from those time zones) to time zones. This parameter can be a\n            dictionary with timezone aliases mapping time zone names to time\n            zones or a function taking two parameters (``tzname`` and\n            ``tzoffset``) and returning a time zone.\n    \n            The timezones to which the names are mapped can be an integer\n            offset from UTC in seconds or a :class:`tzinfo` object.\n    \n            .. doctest::\n               :options: +NORMALIZE_WHITESPACE\n    \n                >>> from dateutil.parser import parse\n                >>> from dateutil.tz import gettz\n                >>> tzinfos = {""BRST"": -7200, ""CST"": gettz(""America/Chicago"")}\n                >>> parse(""2012-01-19 17:21:00 BRST"", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u\'BRST\', -7200))\n                >>> parse(""2012-01-19 17:21:00 CST"", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21,\n                                  tzinfo=tzfile(\'/usr/share/zoneinfo/America/Chicago\'))\n    \n            This parameter is ignored if ``ignoretz`` is set.\n    \n        :param \\\\*\\\\*kwargs:\n            Keyword arguments as passed to ``_parse()``.\n    \n        :return:\n            Returns a :class:`datetime.datetime` object or, if the\n            ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n            first element being a :class:`datetime.datetime` object, the second\n            a tuple containing the fuzzy tokens.\n    \n        :raises ParserError:\n            Raised for invalid or unknown string format, if the provided\n            :class:`tzinfo` is not in a valid format, or if an invalid date\n            would be created.\n    \n        :raises TypeError:\n            Raised for non-string or character stream input.\n    \n        :raises OverflowError:\n            Raised if the parsed date exceeds the largest valid C integer on\n            your system.\n        """"""\n    \n        if default is None:\n            default = datetime.datetime.now().replace(hour=0, minute=0,\n                                                      second=0, microsecond=0)\n    \n        res, skipped_tokens = self._parse(timestr, **kwargs)\n    \n        if res is None:\n>           raise ParserError(""Unknown string format: %s"", timestr)\nE           dateutil.parser._parser.ParserError: Unknown string format: 12th day of December, 2001\n\nvenv\\Lib\\site-packages\\dateutil\\parser\\_parser.py:643: ParserError\n\nDuring handling of the above exception, another exception occurred:\n\ninput_text = \'12th day of December, 2001\'\nexpected_date = datetime.datetime(2001, 12, 12, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:25: in find_dates\n    as_dt = self.parse_date_string(date_string, captures)\nrepos\\datefinder\\datefinder\\__init__.py:74: in parse_date_string\n    date_string, tz_string = self._find_and_replace(date_string, captures)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000001B58612B110>\ndate_string = \'12th day of December, 2001\'\ncaptures = {\'days\': [], \'delimiters\': [\' \', \' \', \' \', \', \'], \'digits\': [\'12\'], \'digits_suffixes\': [\'th\'], ...}\n\n    def _find_and_replace(self, date_string, captures):\n        modified_date_string = date_string.replace(\'pattern1\', \'replacement1\').replace(\'pattern2\', \'replacement2\')\n        for key, value in captures.items():\n>           modified_date_string = modified_date_string.replace(key, value)\nE           TypeError: replace() argument 2 must be str, not list\n\nrepos\\datefinder\\datefinder\\__init__.py:40: TypeError', 'self = <datefinder.DateFinder object at 0x000001B586129370>\ndate_string = \'19th day of May, 2015\'\ncaptures = {\'days\': [], \'delimiters\': [\' \', \' \', \' \', \', \'], \'digits\': [\'19\'], \'digits_suffixes\': [\'th\'], ...}\n\n    def parse_date_string(self, date_string, captures):\n        try:\n>           as_dt = parser.parse(date_string, default=self.base_date, dayfirst=self.dayfirst, yearfirst=self.yearfirst)\n\nrepos\\datefinder\\datefinder\\__init__.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\dateutil\\parser\\_parser.py:1368: in parse\n    return DEFAULTPARSER.parse(timestr, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <dateutil.parser._parser.parser object at 0x000001B585FB5160>\ntimestr = \'19th day of May, 2015\'\ndefault = datetime.datetime(2025, 4, 14, 0, 0), ignoretz = False, tzinfos = None\nkwargs = {\'dayfirst\': False, \'yearfirst\': False}, res = None\nskipped_tokens = None\n\n    def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        """"""\n        Parse the date/time string into a :class:`datetime.datetime` object.\n    \n        :param timestr:\n            Any date/time string using the supported formats.\n    \n        :param default:\n            The default datetime object, if this is a datetime object and not\n            ``None``, elements specified in ``timestr`` replace elements in the\n            default object.\n    \n        :param ignoretz:\n            If set ``True``, time zones in parsed strings are ignored and a\n            naive :class:`datetime.datetime` object is returned.\n    \n        :param tzinfos:\n            Additional time zone names / aliases which may be present in the\n            string. This argument maps time zone names (and optionally offsets\n            from those time zones) to time zones. This parameter can be a\n            dictionary with timezone aliases mapping time zone names to time\n            zones or a function taking two parameters (``tzname`` and\n            ``tzoffset``) and returning a time zone.\n    \n            The timezones to which the names are mapped can be an integer\n            offset from UTC in seconds or a :class:`tzinfo` object.\n    \n            .. doctest::\n               :options: +NORMALIZE_WHITESPACE\n    \n                >>> from dateutil.parser import parse\n                >>> from dateutil.tz import gettz\n                >>> tzinfos = {""BRST"": -7200, ""CST"": gettz(""America/Chicago"")}\n                >>> parse(""2012-01-19 17:21:00 BRST"", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u\'BRST\', -7200))\n                >>> parse(""2012-01-19 17:21:00 CST"", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21,\n                                  tzinfo=tzfile(\'/usr/share/zoneinfo/America/Chicago\'))\n    \n            This parameter is ignored if ``ignoretz`` is set.\n    \n        :param \\\\*\\\\*kwargs:\n            Keyword arguments as passed to ``_parse()``.\n    \n        :return:\n            Returns a :class:`datetime.datetime` object or, if the\n            ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n            first element being a :class:`datetime.datetime` object, the second\n            a tuple containing the fuzzy tokens.\n    \n        :raises ParserError:\n            Raised for invalid or unknown string format, if the provided\n            :class:`tzinfo` is not in a valid format, or if an invalid date\n            would be created.\n    \n        :raises TypeError:\n            Raised for non-string or character stream input.\n    \n        :raises OverflowError:\n            Raised if the parsed date exceeds the largest valid C integer on\n            your system.\n        """"""\n    \n        if default is None:\n            default = datetime.datetime.now().replace(hour=0, minute=0,\n                                                      second=0, microsecond=0)\n    \n        res, skipped_tokens = self._parse(timestr, **kwargs)\n    \n        if res is None:\n>           raise ParserError(""Unknown string format: %s"", timestr)\nE           dateutil.parser._parser.ParserError: Unknown string format: 19th day of May, 2015\n\nvenv\\Lib\\site-packages\\dateutil\\parser\\_parser.py:643: ParserError\n\nDuring handling of the above exception, another exception occurred:\n\ninput_text = \'19th day of May, 2015\'\nexpected_date = datetime.datetime(2015, 5, 19, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, strict=True):\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:25: in find_dates\n    as_dt = self.parse_date_string(date_string, captures)\nrepos\\datefinder\\datefinder\\__init__.py:74: in parse_date_string\n    date_string, tz_string = self._find_and_replace(date_string, captures)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000001B586129370>\ndate_string = \'19th day of May, 2015\'\ncaptures = {\'days\': [], \'delimiters\': [\' \', \' \', \' \', \', \'], \'digits\': [\'19\'], \'digits_suffixes\': [\'th\'], ...}\n\n    def _find_and_replace(self, date_string, captures):\n        modified_date_string = date_string.replace(\'pattern1\', \'replacement1\').replace(\'pattern2\', \'replacement2\')\n        for key, value in captures.items():\n>           modified_date_string = modified_date_string.replace(key, value)\nE           TypeError: replace() argument 2 must be str, not list\n\nrepos\\datefinder\\datefinder\\__init__.py:40: TypeError']"
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the `_find_and_replace` function is to search a given `date_string` for specific patterns and replace them based on a set of predefined replacements. It also looks for timezones in the `captures` dictionary and updates the replacements accordingly. The function returns the modified `date_string` and the timezone string. If multiple timezones are found, it selects the last sorted timezone as the final timezone string. This function is designed to clean and manipulate date strings by replacing specific patterns with predefined values.",3,"def _find_and_replace(self, date_string, captures):
    new_date_string = date_string.replace('pattern1', 'replacement1').replace('pattern2', 'replacement2')
    
    for key, value in captures.items():
        if key == 'timezone':
            new_date_string = new_date_string.replace(key, value)
    
    timezone_strings = [captures[key] for key in captures if key == 'timezone']
    timezone_string = sorted(timezone_strings)[-1] if timezone_strings else None
    
    return new_date_string, timezone_string","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","50 Passed, 4 Failed",50,4,"['tests/test_find_and_replace.py::test_find_and_replace[due on Tuesday Jul 22, 2014 eastern standard time- tuesday jul 22, 2014 eastern -captures0-EST]', 'tests/test_find_dates.py::test_find_date_strings[i am looking for a date june 4th 1996 to july 3rd 2013-expected_date15-month]', 'tests/test_find_dates.py::test_find_date_strings[12th day of December, 2001-expected_date24-month]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[19th day of May, 2015-expected_date4]']","[""date_string = 'due on Tuesday Jul 22, 2014 eastern standard time'\nexpected_replaced_string = ' tuesday jul 22, 2014 eastern '\ncaptures = {'timezones': ['EST']}, expected_tz_string = 'EST'\n\n    @pytest.mark.parametrize('date_string, expected_replaced_string, captures, expected_tz_string', [\n        ('due on Tuesday Jul 22, 2014 eastern standard time',\n        ' tuesday jul 22, 2014 eastern ',\n         {'timezones':['EST']},\n         'EST',\n        )\n    ])\n    def test_find_and_replace(date_string, expected_replaced_string, captures, expected_tz_string):\n        dt = datefinder.DateFinder()\n        expected_replacements = copy.copy(REPLACEMENTS)\n        actual_date_string, actual_tz_string = dt._find_and_replace(date_string, captures)\n    \n        # assert that dt._find_and_replace did not mutate dt.REPLACEMENTS\n        assert REPLACEMENTS == expected_replacements\n    \n        # assert the return values of dt._find_and_replace\n>       assert actual_date_string == expected_replaced_string\nE       AssertionError: assert 'due on Tuesd...standard time' == ' tuesday jul...2014 eastern '\nE         \nE         -  tuesday jul 22, 2014 eastern \nE         + due on Tuesday Jul 22, 2014 eastern standard time\n\nrepos\\datefinder\\tests\\test_find_and_replace.py:27: AssertionError"", 'input_text = \'i am looking for a date june 4th 1996 to july 3rd 2013\'\nexpected_date = [datetime.datetime(1996, 6, 4, 0, 0), datetime.datetime(2013, 7, 3, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [datetime.dat..., 7, 3, 0, 0)] == [datetime.dat..., 7, 3, 0, 0)]\nE             \nE             At index 0 diff: datetime.datetime(2013, 7, 3, 0, 0) != datetime.datetime(1996, 6, 4, 0, 0)\nE             Right contains one more item: datetime.datetime(2013, 7, 3, 0, 0)\nE             \nE             Full diff:\nE               [\nE             -     datetime.datetime(1996, 6, 4, 0, 0),\nE                   datetime.datetime(2013, 7, 3, 0, 0),\nE               ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'12th day of December, 2001\'\nexpected_date = datetime.datetime(2001, 12, 12, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""12th day of December, 2001""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'19th day of May, 2015\'\nexpected_date = datetime.datetime(2015, 5, 19, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, strict=True):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(input_text) # handles dates\nE           AssertionError: Did not find date for test line: ""19th day of May, 2015""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:32: AssertionError']"
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)",This function aims to take a naive datetime object and add a timezone information to it using the dateutil library. It matches the timezone string provided as an argument to a tzinfo object and replaces the tzinfo attribute of the datetime object with it. This helps in converting a naive datetime to a datetime object with timezone information.,1,"def _add_tzinfo(self, datetime_obj, tz_string):
    from dateutil import tz
    
    timezone = tz.gettz(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=timezone)
    
    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)",This function aims to take a naive datetime object and add a timezone information to it using the dateutil library. It matches the timezone string provided as an argument to a tzinfo object and replaces the tzinfo attribute of the datetime object with it. This helps in converting a naive datetime to a datetime object with timezone information.,2,"def _add_tzinfo(self, datetime_obj, tz_string):
    import dateutil.tz
    
    tzinfo = dateutil.tz.gettz(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=tzinfo)
    
    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)",This function aims to take a naive datetime object and add a timezone information to it using the dateutil library. It matches the timezone string provided as an argument to a tzinfo object and replaces the tzinfo attribute of the datetime object with it. This helps in converting a naive datetime to a datetime object with timezone information.,3,"def _add_tzinfo(self, datetime_obj, tz_string):
    from dateutil import tz

    timezone = tz.gettz(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=timezone)

    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The goal of the `extract_date_strings_inner` function is to extract date strings from a given text, taking into account the starting position of the text within a larger context. The function tokenizes the text, merges tokens, and then identifies date components such as digits, months, and years. It also has an option for strict processing where it checks for complete date formats before yielding the extracted date strings along with their indices and captured components.

This function is likely part of a larger class that handles text processing tasks related to date extraction. It interacts with other methods or attributes within the class to tokenize the text, merge tokens, and apply regex patterns to extract date components. The function may be called recursively in cases where the text contains date ranges or nested structures.",1,"def extract_date_strings_inner(self, text, text_start, strict):
    tokens = self.tokenize_text(text)
    merged_tokens = self.merge_tokens(tokens)
    date_strings = self.identify_date_components(merged_tokens)
    
    if strict:
        date_strings = self.check_complete_date_formats(date_strings)
    
    return date_strings, text_start, self.capture_components(date_strings)","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","7 Passed, 47 Failed",7,47,"['tests/test_extract_date_strings.py::test_extract_date_strings[March 20, 2015 3:30 pm GMT -March 20, 2015 3:30 pm GMT]', 'tests/test_extract_date_strings.py::test_extract_date_strings[March 20, 2015 3:30 pm ACWDT in the parking lot-March 20, 2015 3:30 pm ACWDT]', 'tests/test_extract_date_strings.py::test_extract_date_strings[blah blah March 20, 2015 3pm MADMT for some thing-March 20, 2015 3pm MADMT]', 'tests/test_extract_date_strings.py::test_extract_date_strings[we need it back on Friday 2p.m. central standard time-on Friday 2p.m. central standard time]', 'tests/test_extract_date_strings.py::test_extract_date_strings[the big fight at 2p.m. mountain standard time on ufc.com-at 2p.m. mountain standard time on]', 'tests/test_extract_date_strings.py::test_extract_date_strings[starting Thursday 2020-11-05 13:50 GMT-Thursday 2020-11-05 13:50 GMT]', 'tests/test_extract_date_strings.py::test_extract_date_strings[starting Thu 2020-11-05 13:50 GMT-Thu 2020-11-05 13:50 GMT]', 'tests/test_extract_date_strings.py::test_extract_date_strings_with_strict_option[the Friday after next Tuesday the 20th-]', 'tests/test_extract_date_strings.py::test_extract_date_strings_with_strict_option[This Tuesday March 2015 in the evening-]', 'tests/test_extract_date_strings.py::test_extract_date_strings_with_strict_option[They said it was on 01-03-2015-on 01-03-2015]', 'tests/test_extract_date_strings.py::test_extract_date_strings_with_strict_option[May 20 2015 is nowhere near the other date-May 20 2015]', 'tests/test_find_dates.py::test_find_date_strings[Tuesday Jul 22, 2014-expected_date0-month]', 'tests/test_find_dates.py::test_find_date_strings[December 13, 2014 at midnight-expected_date1-month]', 'tests/test_find_dates.py::test_find_date_strings[April 9, 2013 at 6:11 a.m.-expected_date2-month]', 'tests/test_find_dates.py::test_find_date_strings[Aug. 9, 2012 at 2:57 p.m.-expected_date3-month]', 'tests/test_find_dates.py::test_find_date_strings[December 10, 2014, 11:02:21 pm-expected_date4-month]', 'tests/test_find_dates.py::test_find_date_strings[8:25 a.m. Dec. 12, 2014-expected_date5-month]', 'tests/test_find_dates.py::test_find_date_strings[2:21 p.m., December 11, 2014-expected_date6-month]', 'tests/test_find_dates.py::test_find_date_strings[Fri, 12 Dec 2014 10:55:50-expected_date7-month]', 'tests/test_find_dates.py::test_find_date_strings[10:06am Dec 11, 2014-expected_date8-month]', 'tests/test_find_dates.py::test_find_date_strings[September 2nd, 1998-expected_date9-month]', 'tests/test_find_dates.py::test_find_date_strings[May 5, 2010 to July 10, 2011-expected_date10-month]', 'tests/test_find_dates.py::test_find_date_strings[06-17-2014-expected_date11-month]', 'tests/test_find_dates.py::test_find_date_strings[13/03/2014-expected_date12-month]', 'tests/test_find_dates.py::test_find_date_strings[2016-02-04T20:16:26+00:00-expected_date13-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z-expected_date14-month]', 'tests/test_find_dates.py::test_find_date_strings[i am looking for a date june 4th 1996 to july 3rd 2013-expected_date15-month]', 'tests/test_find_dates.py::test_find_date_strings[october 27 1994 to be put into effect on june 1 1995-expected_date16-month]', 'tests/test_find_dates.py::test_find_date_strings[31/08/2012 to 30/08/2013-expected_date17-month]', 'tests/test_find_dates.py::test_find_date_strings[31 Oct 2021 - 28 Nov 2021-expected_date18-day]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08.001Z-expected_date19-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08,00123Z-expected_date20-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08Z-expected_date21-month]', 'tests/test_find_dates.py::test_find_date_strings[Dutta is the recipient of Femina Miss India Universe title in 2004.-expected_date22-month]', 'tests/test_find_dates.py::test_find_date_strings[she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.-expected_date23-month]', 'tests/test_find_dates.py::test_find_date_strings[12th day of December, 2001-expected_date24-month]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date25-month]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date26-day]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date27-year]', 'tests/test_find_dates.py::test_find_date_strings[02/05/2020-expected_date28-month]', 'tests/test_find_dates.py::test_find_date_strings[02/05/2020-expected_date29-day]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[June 2018-expected_date0]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[09/06/18-expected_date1]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[09/06/2018-expected_date2]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[recorded: 03/14/2008-expected_date3]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[19th day of May, 2015-expected_date4]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[19th day of May-expected_date5]']","[""date_string = 'March 20, 2015 3:30 pm GMT '\nexpected_match_date_string = 'March 20, 2015 3:30 pm GMT'\n\n    @pytest.mark.parametrize('date_string, expected_match_date_string', [\n        ['March 20, 2015 3:30 pm GMT ', 'March 20, 2015 3:30 pm GMT'],\n        ['March 20, 2015 3:30 pm ACWDT in the parking lot', 'March 20, 2015 3:30 pm ACWDT'],\n        ['blah blah March 20, 2015 3pm MADMT for some thing', 'March 20, 2015 3pm MADMT'],\n        ['we need it back on Friday 2p.m. central standard time', 'on Friday 2p.m. central standard time'],\n        ['the big fight at 2p.m. mountain standard time on ufc.com', 'at 2p.m. mountain standard time on'],\n    \n        # issue: Thu not recognised by regex #138\n        ['starting Thursday 2020-11-05 13:50 GMT', 'Thursday 2020-11-05 13:50 GMT'],\n        ['starting Thu 2020-11-05 13:50 GMT', 'Thu 2020-11-05 13:50 GMT'],\n    ])\n    def test_extract_date_strings(date_string, expected_match_date_string):\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string):\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214164B90F0>\ntext = 'March 20, 2015 3:30 pm GMT ', text_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: 'DateFinder' object has no attribute 'tokenize_text'. Did you mean: 'tokenize_string'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError"", ""date_string = 'March 20, 2015 3:30 pm ACWDT in the parking lot'\nexpected_match_date_string = 'March 20, 2015 3:30 pm ACWDT'\n\n    @pytest.mark.parametrize('date_string, expected_match_date_string', [\n        ['March 20, 2015 3:30 pm GMT ', 'March 20, 2015 3:30 pm GMT'],\n        ['March 20, 2015 3:30 pm ACWDT in the parking lot', 'March 20, 2015 3:30 pm ACWDT'],\n        ['blah blah March 20, 2015 3pm MADMT for some thing', 'March 20, 2015 3pm MADMT'],\n        ['we need it back on Friday 2p.m. central standard time', 'on Friday 2p.m. central standard time'],\n        ['the big fight at 2p.m. mountain standard time on ufc.com', 'at 2p.m. mountain standard time on'],\n    \n        # issue: Thu not recognised by regex #138\n        ['starting Thursday 2020-11-05 13:50 GMT', 'Thursday 2020-11-05 13:50 GMT'],\n        ['starting Thu 2020-11-05 13:50 GMT', 'Thu 2020-11-05 13:50 GMT'],\n    ])\n    def test_extract_date_strings(date_string, expected_match_date_string):\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string):\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000021416999A30>\ntext = 'March 20, 2015 3:30 pm ACWDT in the parking lot', text_start = 0\nstrict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: 'DateFinder' object has no attribute 'tokenize_text'. Did you mean: 'tokenize_string'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError"", ""date_string = 'blah blah March 20, 2015 3pm MADMT for some thing'\nexpected_match_date_string = 'March 20, 2015 3pm MADMT'\n\n    @pytest.mark.parametrize('date_string, expected_match_date_string', [\n        ['March 20, 2015 3:30 pm GMT ', 'March 20, 2015 3:30 pm GMT'],\n        ['March 20, 2015 3:30 pm ACWDT in the parking lot', 'March 20, 2015 3:30 pm ACWDT'],\n        ['blah blah March 20, 2015 3pm MADMT for some thing', 'March 20, 2015 3pm MADMT'],\n        ['we need it back on Friday 2p.m. central standard time', 'on Friday 2p.m. central standard time'],\n        ['the big fight at 2p.m. mountain standard time on ufc.com', 'at 2p.m. mountain standard time on'],\n    \n        # issue: Thu not recognised by regex #138\n        ['starting Thursday 2020-11-05 13:50 GMT', 'Thursday 2020-11-05 13:50 GMT'],\n        ['starting Thu 2020-11-05 13:50 GMT', 'Thu 2020-11-05 13:50 GMT'],\n    ])\n    def test_extract_date_strings(date_string, expected_match_date_string):\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string):\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000021416999FD0>\ntext = 'blah blah March 20, 2015 3pm MADMT for some thing', text_start = 0\nstrict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: 'DateFinder' object has no attribute 'tokenize_text'. Did you mean: 'tokenize_string'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError"", ""date_string = 'we need it back on Friday 2p.m. central standard time'\nexpected_match_date_string = 'on Friday 2p.m. central standard time'\n\n    @pytest.mark.parametrize('date_string, expected_match_date_string', [\n        ['March 20, 2015 3:30 pm GMT ', 'March 20, 2015 3:30 pm GMT'],\n        ['March 20, 2015 3:30 pm ACWDT in the parking lot', 'March 20, 2015 3:30 pm ACWDT'],\n        ['blah blah March 20, 2015 3pm MADMT for some thing', 'March 20, 2015 3pm MADMT'],\n        ['we need it back on Friday 2p.m. central standard time', 'on Friday 2p.m. central standard time'],\n        ['the big fight at 2p.m. mountain standard time on ufc.com', 'at 2p.m. mountain standard time on'],\n    \n        # issue: Thu not recognised by regex #138\n        ['starting Thursday 2020-11-05 13:50 GMT', 'Thursday 2020-11-05 13:50 GMT'],\n        ['starting Thu 2020-11-05 13:50 GMT', 'Thu 2020-11-05 13:50 GMT'],\n    ])\n    def test_extract_date_strings(date_string, expected_match_date_string):\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string):\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000021416999A30>\ntext = 'we need it back on Friday 2p.m. central standard time', text_start = 0\nstrict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: 'DateFinder' object has no attribute 'tokenize_text'. Did you mean: 'tokenize_string'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError"", ""date_string = 'the big fight at 2p.m. mountain standard time on ufc.com'\nexpected_match_date_string = 'at 2p.m. mountain standard time on'\n\n    @pytest.mark.parametrize('date_string, expected_match_date_string', [\n        ['March 20, 2015 3:30 pm GMT ', 'March 20, 2015 3:30 pm GMT'],\n        ['March 20, 2015 3:30 pm ACWDT in the parking lot', 'March 20, 2015 3:30 pm ACWDT'],\n        ['blah blah March 20, 2015 3pm MADMT for some thing', 'March 20, 2015 3pm MADMT'],\n        ['we need it back on Friday 2p.m. central standard time', 'on Friday 2p.m. central standard time'],\n        ['the big fight at 2p.m. mountain standard time on ufc.com', 'at 2p.m. mountain standard time on'],\n    \n        # issue: Thu not recognised by regex #138\n        ['starting Thursday 2020-11-05 13:50 GMT', 'Thursday 2020-11-05 13:50 GMT'],\n        ['starting Thu 2020-11-05 13:50 GMT', 'Thu 2020-11-05 13:50 GMT'],\n    ])\n    def test_extract_date_strings(date_string, expected_match_date_string):\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string):\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000021416486F90>\ntext = 'the big fight at 2p.m. mountain standard time on ufc.com'\ntext_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: 'DateFinder' object has no attribute 'tokenize_text'. Did you mean: 'tokenize_string'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError"", ""date_string = 'starting Thursday 2020-11-05 13:50 GMT'\nexpected_match_date_string = 'Thursday 2020-11-05 13:50 GMT'\n\n    @pytest.mark.parametrize('date_string, expected_match_date_string', [\n        ['March 20, 2015 3:30 pm GMT ', 'March 20, 2015 3:30 pm GMT'],\n        ['March 20, 2015 3:30 pm ACWDT in the parking lot', 'March 20, 2015 3:30 pm ACWDT'],\n        ['blah blah March 20, 2015 3pm MADMT for some thing', 'March 20, 2015 3pm MADMT'],\n        ['we need it back on Friday 2p.m. central standard time', 'on Friday 2p.m. central standard time'],\n        ['the big fight at 2p.m. mountain standard time on ufc.com', 'at 2p.m. mountain standard time on'],\n    \n        # issue: Thu not recognised by regex #138\n        ['starting Thursday 2020-11-05 13:50 GMT', 'Thursday 2020-11-05 13:50 GMT'],\n        ['starting Thu 2020-11-05 13:50 GMT', 'Thu 2020-11-05 13:50 GMT'],\n    ])\n    def test_extract_date_strings(date_string, expected_match_date_string):\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string):\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002141658FE30>\ntext = 'starting Thursday 2020-11-05 13:50 GMT', text_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: 'DateFinder' object has no attribute 'tokenize_text'. Did you mean: 'tokenize_string'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError"", ""date_string = 'starting Thu 2020-11-05 13:50 GMT'\nexpected_match_date_string = 'Thu 2020-11-05 13:50 GMT'\n\n    @pytest.mark.parametrize('date_string, expected_match_date_string', [\n        ['March 20, 2015 3:30 pm GMT ', 'March 20, 2015 3:30 pm GMT'],\n        ['March 20, 2015 3:30 pm ACWDT in the parking lot', 'March 20, 2015 3:30 pm ACWDT'],\n        ['blah blah March 20, 2015 3pm MADMT for some thing', 'March 20, 2015 3pm MADMT'],\n        ['we need it back on Friday 2p.m. central standard time', 'on Friday 2p.m. central standard time'],\n        ['the big fight at 2p.m. mountain standard time on ufc.com', 'at 2p.m. mountain standard time on'],\n    \n        # issue: Thu not recognised by regex #138\n        ['starting Thursday 2020-11-05 13:50 GMT', 'Thursday 2020-11-05 13:50 GMT'],\n        ['starting Thu 2020-11-05 13:50 GMT', 'Thu 2020-11-05 13:50 GMT'],\n    ])\n    def test_extract_date_strings(date_string, expected_match_date_string):\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string):\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A4170>\ntext = 'starting Thu 2020-11-05 13:50 GMT', text_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: 'DateFinder' object has no attribute 'tokenize_text'. Did you mean: 'tokenize_string'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError"", 'date_string = \'the Friday after next Tuesday the 20th\'\nexpected_match_date_string = \'\'\n\n    @pytest.mark.parametrize(\'date_string, expected_match_date_string\', [\n        [\'the Friday after next Tuesday the 20th\', \'\'], # no matches\n        [\'This Tuesday March 2015 in the evening\', \'\'], # no matches\n        [\'They said it was on 01-03-2015\', \'on 01-03-2015\'], # 3 digits strict match\n        [\'May 20 2015 is nowhere near the other date\', \'May 20 2015\'], # one month two digit match\n    ])\n    def test_extract_date_strings_with_strict_option(date_string, expected_match_date_string):\n        """"""\n        make sure that `strict` mode works for the dates we care about\n        and doesn\'t work for others\n    \n        :param date_string:\n        :param expected_match_date_string:\n        :return:\n        """"""\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string,strict=True):\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A43B0>\ntext = \'the Friday after next Tuesday the 20th\', text_start = 0, strict = True\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'date_string = \'This Tuesday March 2015 in the evening\'\nexpected_match_date_string = \'\'\n\n    @pytest.mark.parametrize(\'date_string, expected_match_date_string\', [\n        [\'the Friday after next Tuesday the 20th\', \'\'], # no matches\n        [\'This Tuesday March 2015 in the evening\', \'\'], # no matches\n        [\'They said it was on 01-03-2015\', \'on 01-03-2015\'], # 3 digits strict match\n        [\'May 20 2015 is nowhere near the other date\', \'May 20 2015\'], # one month two digit match\n    ])\n    def test_extract_date_strings_with_strict_option(date_string, expected_match_date_string):\n        """"""\n        make sure that `strict` mode works for the dates we care about\n        and doesn\'t work for others\n    \n        :param date_string:\n        :param expected_match_date_string:\n        :return:\n        """"""\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string,strict=True):\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A6E70>\ntext = \'This Tuesday March 2015 in the evening\', text_start = 0, strict = True\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'date_string = \'They said it was on 01-03-2015\'\nexpected_match_date_string = \'on 01-03-2015\'\n\n    @pytest.mark.parametrize(\'date_string, expected_match_date_string\', [\n        [\'the Friday after next Tuesday the 20th\', \'\'], # no matches\n        [\'This Tuesday March 2015 in the evening\', \'\'], # no matches\n        [\'They said it was on 01-03-2015\', \'on 01-03-2015\'], # 3 digits strict match\n        [\'May 20 2015 is nowhere near the other date\', \'May 20 2015\'], # one month two digit match\n    ])\n    def test_extract_date_strings_with_strict_option(date_string, expected_match_date_string):\n        """"""\n        make sure that `strict` mode works for the dates we care about\n        and doesn\'t work for others\n    \n        :param date_string:\n        :param expected_match_date_string:\n        :return:\n        """"""\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string,strict=True):\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A6D50>\ntext = \'They said it was on 01-03-2015\', text_start = 0, strict = True\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'date_string = \'May 20 2015 is nowhere near the other date\'\nexpected_match_date_string = \'May 20 2015\'\n\n    @pytest.mark.parametrize(\'date_string, expected_match_date_string\', [\n        [\'the Friday after next Tuesday the 20th\', \'\'], # no matches\n        [\'This Tuesday March 2015 in the evening\', \'\'], # no matches\n        [\'They said it was on 01-03-2015\', \'on 01-03-2015\'], # 3 digits strict match\n        [\'May 20 2015 is nowhere near the other date\', \'May 20 2015\'], # one month two digit match\n    ])\n    def test_extract_date_strings_with_strict_option(date_string, expected_match_date_string):\n        """"""\n        make sure that `strict` mode works for the dates we care about\n        and doesn\'t work for others\n    \n        :param date_string:\n        :param expected_match_date_string:\n        :return:\n        """"""\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string,strict=True):\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A79B0>\ntext = \'May 20 2015 is nowhere near the other date\', text_start = 0\nstrict = True\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'Tuesday Jul 22, 2014\'\nexpected_date = datetime.datetime(2014, 7, 22, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000021416999FD0>\ntext = \'Tuesday Jul 22, 2014\', text_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'December 13, 2014 at midnight\'\nexpected_date = datetime.datetime(2014, 12, 13, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002141699A690>\ntext = \'December 13, 2014 at midnight\', text_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'April 9, 2013 at 6:11 a.m.\'\nexpected_date = datetime.datetime(2013, 4, 9, 6, 11), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002141699A570>\ntext = \'April 9, 2013 at 6:11 a.m.\', text_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'Aug. 9, 2012 at 2:57 p.m.\'\nexpected_date = datetime.datetime(2012, 8, 9, 14, 57), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002141699A450>\ntext = \'Aug. 9, 2012 at 2:57 p.m.\', text_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'December 10, 2014, 11:02:21 pm\'\nexpected_date = datetime.datetime(2014, 12, 10, 23, 2, 21), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002141699A9F0>\ntext = \'December 10, 2014, 11:02:21 pm\', text_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'8:25 a.m. Dec. 12, 2014\'\nexpected_date = datetime.datetime(2014, 12, 12, 8, 25), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A79B0>\ntext = \'8:25 a.m. Dec. 12, 2014\', text_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'2:21 p.m., December 11, 2014\'\nexpected_date = datetime.datetime(2014, 12, 11, 14, 21), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A6D50>\ntext = \'2:21 p.m., December 11, 2014\', text_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'Fri, 12 Dec 2014 10:55:50\'\nexpected_date = datetime.datetime(2014, 12, 12, 10, 55, 50), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A6B10>\ntext = \'Fri, 12 Dec 2014 10:55:50\', text_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'10:06am Dec 11, 2014\'\nexpected_date = datetime.datetime(2014, 12, 11, 10, 6), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A4290>\ntext = \'10:06am Dec 11, 2014\', text_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'September 2nd, 1998\'\nexpected_date = datetime.datetime(1998, 9, 2, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A43B0>\ntext = \'September 2nd, 1998\', text_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'May 5, 2010 to July 10, 2011\'\nexpected_date = [datetime.datetime(2010, 5, 5, 0, 0), datetime.datetime(2011, 7, 10, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n>           matches = list(datefinder.find_dates(input_text, first=first))\n\nrepos\\datefinder\\tests\\test_find_dates.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A4170>\ntext = \'May 5, 2010 to July 10, 2011\', text_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'06-17-2014\', expected_date = datetime.datetime(2014, 6, 17, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000021416487BF0>, text = \'06-17-2014\'\ntext_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'13/03/2014\', expected_date = datetime.datetime(2014, 3, 13, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000021416486F90>, text = \'13/03/2014\'\ntext_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'2016-02-04T20:16:26+00:00\'\nexpected_date = datetime.datetime(2016, 2, 4, 20, 16, 26, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002141658FD10>\ntext = \'2016-02-04T20:16:26+00:00\', text_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z\'\nexpected_date = [datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>), datetime.datetime(2017, 2, 3, 9, 4, 9, tzinfo=<UTC>)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n>           matches = list(datefinder.find_dates(input_text, first=first))\n\nrepos\\datefinder\\tests\\test_find_dates.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002141699A210>\ntext = \'2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z\', text_start = 0\nstrict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'i am looking for a date june 4th 1996 to july 3rd 2013\'\nexpected_date = [datetime.datetime(1996, 6, 4, 0, 0), datetime.datetime(2013, 7, 3, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n>           matches = list(datefinder.find_dates(input_text, first=first))\n\nrepos\\datefinder\\tests\\test_find_dates.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002141699A330>\ntext = \'i am looking for a date june 4th 1996 to july 3rd 2013\', text_start = 0\nstrict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'october 27 1994 to be put into effect on june 1 1995\'\nexpected_date = [datetime.datetime(1994, 10, 27, 0, 0), datetime.datetime(1995, 6, 1, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n>           matches = list(datefinder.find_dates(input_text, first=first))\n\nrepos\\datefinder\\tests\\test_find_dates.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002141699A7B0>\ntext = \'october 27 1994 to be put into effect on june 1 1995\', text_start = 0\nstrict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'31/08/2012 to 30/08/2013\'\nexpected_date = [datetime.datetime(2012, 8, 31, 0, 0), datetime.datetime(2013, 8, 30, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n>           matches = list(datefinder.find_dates(input_text, first=first))\n\nrepos\\datefinder\\tests\\test_find_dates.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000021416486F90>\ntext = \'31/08/2012 to 30/08/2013\', text_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'31 Oct 2021 - 28 Nov 2021\'\nexpected_date = [datetime.datetime(2021, 10, 31, 0, 0), datetime.datetime(2021, 11, 28, 0, 0)]\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n>           matches = list(datefinder.find_dates(input_text, first=first))\n\nrepos\\datefinder\\tests\\test_find_dates.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000021416487BF0>\ntext = \'31 Oct 2021 - 28 Nov 2021\', text_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'2017-02-03T09:04:08.001Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A4050>\ntext = \'2017-02-03T09:04:08.001Z\', text_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'2017-02-03T09:04:08,00123Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A44D0>\ntext = \'2017-02-03T09:04:08,00123Z\', text_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'2017-02-03T09:04:08Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A6E70>\ntext = \'2017-02-03T09:04:08Z\', text_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'Dutta is the recipient of Femina Miss India Universe title in 2004.\'\nexpected_date = datetime.datetime(2004, 4, 14, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A4710>\ntext = \'Dutta is the recipient of Femina Miss India Universe title in 2004.\'\ntext_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\'\nexpected_date = datetime.datetime(2008, 4, 14, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A70B0>\ntext = \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\'\ntext_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'12th day of December, 2001\'\nexpected_date = datetime.datetime(2001, 12, 12, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A7410>\ntext = \'12th day of December, 2001\', text_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2003, 1, 2, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A45F0>, text = \'01/02/03\'\ntext_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2003, 2, 1, 0, 0)\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002141699A330>, text = \'01/02/03\'\ntext_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2001, 2, 3, 0, 0)\nfirst = \'year\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002141699A210>, text = \'01/02/03\'\ntext_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'02/05/2020\', expected_date = datetime.datetime(2020, 2, 5, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000021416999FD0>, text = \'02/05/2020\'\ntext_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', 'input_text = \'02/05/2020\', expected_date = datetime.datetime(2020, 5, 2, 0, 0)\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A7410>, text = \'02/05/2020\'\ntext_start = 0, strict = False\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: \'DateFinder\' object has no attribute \'tokenize_text\'. Did you mean: \'tokenize_string\'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError', ""input_text = 'June 2018', expected_date = []\n\n    @pytest.mark.parametrize('input_text, expected_date', [\n    \n        ('June 2018', []),\n        ('09/06/18',  datetime(2018, 9, 6)),\n        ('09/06/2018', datetime(2018, 9, 6)),\n        ('recorded: 03/14/2008', datetime(2008, 3, 14)),\n        ('19th day of May, 2015', datetime(2015, 5, 19)),\n        ('19th day of May', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n>           matches = list(datefinder.find_dates(input_text, strict=True))\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A70B0>, text = 'June 2018'\ntext_start = 0, strict = True\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: 'DateFinder' object has no attribute 'tokenize_text'. Did you mean: 'tokenize_string'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError"", ""input_text = '09/06/18', expected_date = datetime.datetime(2018, 9, 6, 0, 0)\n\n    @pytest.mark.parametrize('input_text, expected_date', [\n    \n        ('June 2018', []),\n        ('09/06/18',  datetime(2018, 9, 6)),\n        ('09/06/2018', datetime(2018, 9, 6)),\n        ('recorded: 03/14/2008', datetime(2008, 3, 14)),\n        ('19th day of May, 2015', datetime(2015, 5, 19)),\n        ('19th day of May', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, strict=True):\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A4710>, text = '09/06/18'\ntext_start = 0, strict = True\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: 'DateFinder' object has no attribute 'tokenize_text'. Did you mean: 'tokenize_string'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError"", ""input_text = '09/06/2018', expected_date = datetime.datetime(2018, 9, 6, 0, 0)\n\n    @pytest.mark.parametrize('input_text, expected_date', [\n    \n        ('June 2018', []),\n        ('09/06/18',  datetime(2018, 9, 6)),\n        ('09/06/2018', datetime(2018, 9, 6)),\n        ('recorded: 03/14/2008', datetime(2008, 3, 14)),\n        ('19th day of May, 2015', datetime(2015, 5, 19)),\n        ('19th day of May', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, strict=True):\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A6E70>, text = '09/06/2018'\ntext_start = 0, strict = True\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: 'DateFinder' object has no attribute 'tokenize_text'. Did you mean: 'tokenize_string'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError"", ""input_text = 'recorded: 03/14/2008'\nexpected_date = datetime.datetime(2008, 3, 14, 0, 0)\n\n    @pytest.mark.parametrize('input_text, expected_date', [\n    \n        ('June 2018', []),\n        ('09/06/18',  datetime(2018, 9, 6)),\n        ('09/06/2018', datetime(2018, 9, 6)),\n        ('recorded: 03/14/2008', datetime(2008, 3, 14)),\n        ('19th day of May, 2015', datetime(2015, 5, 19)),\n        ('19th day of May', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, strict=True):\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A44D0>\ntext = 'recorded: 03/14/2008', text_start = 0, strict = True\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: 'DateFinder' object has no attribute 'tokenize_text'. Did you mean: 'tokenize_string'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError"", ""input_text = '19th day of May, 2015'\nexpected_date = datetime.datetime(2015, 5, 19, 0, 0)\n\n    @pytest.mark.parametrize('input_text, expected_date', [\n    \n        ('June 2018', []),\n        ('09/06/18',  datetime(2018, 9, 6)),\n        ('09/06/2018', datetime(2018, 9, 6)),\n        ('recorded: 03/14/2008', datetime(2008, 3, 14)),\n        ('19th day of May, 2015', datetime(2015, 5, 19)),\n        ('19th day of May', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, strict=True):\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x00000214165A4050>\ntext = '19th day of May, 2015', text_start = 0, strict = True\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: 'DateFinder' object has no attribute 'tokenize_text'. Did you mean: 'tokenize_string'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError"", ""input_text = '19th day of May', expected_date = []\n\n    @pytest.mark.parametrize('input_text, expected_date', [\n    \n        ('June 2018', []),\n        ('09/06/18',  datetime(2018, 9, 6)),\n        ('09/06/2018', datetime(2018, 9, 6)),\n        ('recorded: 03/14/2008', datetime(2008, 3, 14)),\n        ('19th day of May, 2015', datetime(2015, 5, 19)),\n        ('19th day of May', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n>           matches = list(datefinder.find_dates(input_text, strict=True))\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:94: in extract_date_strings\n    return self.extract_date_strings_inner(text, text_start=0, strict=strict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000021416485FD0>\ntext = '19th day of May', text_start = 0, strict = True\n\n    def extract_date_strings_inner(self, text, text_start, strict):\n>       tokens = self.tokenize_text(text)\nE       AttributeError: 'DateFinder' object has no attribute 'tokenize_text'. Did you mean: 'tokenize_string'?\n\nrepos\\datefinder\\datefinder\\__init__.py:97: AttributeError""]"
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The goal of the `extract_date_strings_inner` function is to extract date strings from a given text, taking into account the starting position of the text within a larger context. The function tokenizes the text, merges tokens, and then identifies date components such as digits, months, and years. It also has an option for strict processing where it checks for complete date formats before yielding the extracted date strings along with their indices and captured components.

This function is likely part of a larger class that handles text processing tasks related to date extraction. It interacts with other methods or attributes within the class to tokenize the text, merge tokens, and apply regex patterns to extract date components. The function may be called recursively in cases where the text contains date ranges or nested structures.",2,"def extract_date_strings_inner(self, text, text_start, strict):
    date_strings = []
    # Tokenize text
    tokens = text.split()
    merged_tokens = ' '.join(tokens)
    
    # Identify date components
    # Logic to extract date components goes here
    
    # Check for complete date formats if strict mode is enabled
    
    # Append extracted date strings to the list
    
    return date_strings","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","20 Passed, 34 Failed",20,34,"['tests/test_find_dates.py::test_find_date_strings[Tuesday Jul 22, 2014-expected_date0-month]', 'tests/test_find_dates.py::test_find_date_strings[December 13, 2014 at midnight-expected_date1-month]', 'tests/test_find_dates.py::test_find_date_strings[April 9, 2013 at 6:11 a.m.-expected_date2-month]', 'tests/test_find_dates.py::test_find_date_strings[Aug. 9, 2012 at 2:57 p.m.-expected_date3-month]', 'tests/test_find_dates.py::test_find_date_strings[December 10, 2014, 11:02:21 pm-expected_date4-month]', 'tests/test_find_dates.py::test_find_date_strings[8:25 a.m. Dec. 12, 2014-expected_date5-month]', 'tests/test_find_dates.py::test_find_date_strings[2:21 p.m., December 11, 2014-expected_date6-month]', 'tests/test_find_dates.py::test_find_date_strings[Fri, 12 Dec 2014 10:55:50-expected_date7-month]', 'tests/test_find_dates.py::test_find_date_strings[10:06am Dec 11, 2014-expected_date8-month]', 'tests/test_find_dates.py::test_find_date_strings[September 2nd, 1998-expected_date9-month]', 'tests/test_find_dates.py::test_find_date_strings[May 5, 2010 to July 10, 2011-expected_date10-month]', 'tests/test_find_dates.py::test_find_date_strings[06-17-2014-expected_date11-month]', 'tests/test_find_dates.py::test_find_date_strings[13/03/2014-expected_date12-month]', 'tests/test_find_dates.py::test_find_date_strings[2016-02-04T20:16:26+00:00-expected_date13-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z-expected_date14-month]', 'tests/test_find_dates.py::test_find_date_strings[i am looking for a date june 4th 1996 to july 3rd 2013-expected_date15-month]', 'tests/test_find_dates.py::test_find_date_strings[october 27 1994 to be put into effect on june 1 1995-expected_date16-month]', 'tests/test_find_dates.py::test_find_date_strings[31/08/2012 to 30/08/2013-expected_date17-month]', 'tests/test_find_dates.py::test_find_date_strings[31 Oct 2021 - 28 Nov 2021-expected_date18-day]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08.001Z-expected_date19-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08,00123Z-expected_date20-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08Z-expected_date21-month]', 'tests/test_find_dates.py::test_find_date_strings[Dutta is the recipient of Femina Miss India Universe title in 2004.-expected_date22-month]', 'tests/test_find_dates.py::test_find_date_strings[she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.-expected_date23-month]', 'tests/test_find_dates.py::test_find_date_strings[12th day of December, 2001-expected_date24-month]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date25-month]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date26-day]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date27-year]', 'tests/test_find_dates.py::test_find_date_strings[02/05/2020-expected_date28-month]', 'tests/test_find_dates.py::test_find_date_strings[02/05/2020-expected_date29-day]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[09/06/18-expected_date1]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[09/06/2018-expected_date2]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[recorded: 03/14/2008-expected_date3]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[19th day of May, 2015-expected_date4]']","['input_text = \'Tuesday Jul 22, 2014\'\nexpected_date = datetime.datetime(2014, 7, 22, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Tuesday Jul 22, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'December 13, 2014 at midnight\'\nexpected_date = datetime.datetime(2014, 12, 13, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""December 13, 2014 at midnight""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'April 9, 2013 at 6:11 a.m.\'\nexpected_date = datetime.datetime(2013, 4, 9, 6, 11), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""April 9, 2013 at 6:11 a.m.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'Aug. 9, 2012 at 2:57 p.m.\'\nexpected_date = datetime.datetime(2012, 8, 9, 14, 57), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Aug. 9, 2012 at 2:57 p.m.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'December 10, 2014, 11:02:21 pm\'\nexpected_date = datetime.datetime(2014, 12, 10, 23, 2, 21), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""December 10, 2014, 11:02:21 pm""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'8:25 a.m. Dec. 12, 2014\'\nexpected_date = datetime.datetime(2014, 12, 12, 8, 25), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""8:25 a.m. Dec. 12, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2:21 p.m., December 11, 2014\'\nexpected_date = datetime.datetime(2014, 12, 11, 14, 21), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2:21 p.m., December 11, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'Fri, 12 Dec 2014 10:55:50\'\nexpected_date = datetime.datetime(2014, 12, 12, 10, 55, 50), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Fri, 12 Dec 2014 10:55:50""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'10:06am Dec 11, 2014\'\nexpected_date = datetime.datetime(2014, 12, 11, 10, 6), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""10:06am Dec 11, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'September 2nd, 1998\'\nexpected_date = datetime.datetime(1998, 9, 2, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""September 2nd, 1998""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'May 5, 2010 to July 10, 2011\'\nexpected_date = [datetime.datetime(2010, 5, 5, 0, 0), datetime.datetime(2011, 7, 10, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat... 7, 10, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(2010, 5, 5, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(2010, 5, 5, 0, 0),\nE             -     datetime.datetime(2011, 7, 10, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'06-17-2014\', expected_date = datetime.datetime(2014, 6, 17, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""06-17-2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'13/03/2014\', expected_date = datetime.datetime(2014, 3, 13, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""13/03/2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2016-02-04T20:16:26+00:00\'\nexpected_date = datetime.datetime(2016, 2, 4, 20, 16, 26, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2016-02-04T20:16:26+00:00""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z\'\nexpected_date = [datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>), datetime.datetime(2017, 2, 3, 9, 4, 9, tzinfo=<UTC>)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat...tzinfo=<UTC>)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>),\nE             -     datetime.datetime(2017, 2, 3, 9, 4, 9, tzinfo=<UTC>),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'i am looking for a date june 4th 1996 to july 3rd 2013\'\nexpected_date = [datetime.datetime(1996, 6, 4, 0, 0), datetime.datetime(2013, 7, 3, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat..., 7, 3, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(1996, 6, 4, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(1996, 6, 4, 0, 0),\nE             -     datetime.datetime(2013, 7, 3, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'october 27 1994 to be put into effect on june 1 1995\'\nexpected_date = [datetime.datetime(1994, 10, 27, 0, 0), datetime.datetime(1995, 6, 1, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat..., 6, 1, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(1994, 10, 27, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(1994, 10, 27, 0, 0),\nE             -     datetime.datetime(1995, 6, 1, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'31/08/2012 to 30/08/2013\'\nexpected_date = [datetime.datetime(2012, 8, 31, 0, 0), datetime.datetime(2013, 8, 30, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat... 8, 30, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(2012, 8, 31, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(2012, 8, 31, 0, 0),\nE             -     datetime.datetime(2013, 8, 30, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'31 Oct 2021 - 28 Nov 2021\'\nexpected_date = [datetime.datetime(2021, 10, 31, 0, 0), datetime.datetime(2021, 11, 28, 0, 0)]\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat...11, 28, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(2021, 10, 31, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(2021, 10, 31, 0, 0),\nE             -     datetime.datetime(2021, 11, 28, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'2017-02-03T09:04:08.001Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2017-02-03T09:04:08.001Z""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2017-02-03T09:04:08,00123Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2017-02-03T09:04:08,00123Z""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2017-02-03T09:04:08Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2017-02-03T09:04:08Z""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'Dutta is the recipient of Femina Miss India Universe title in 2004.\'\nexpected_date = datetime.datetime(2004, 4, 14, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Dutta is the recipient of Femina Miss India Universe title in 2004.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\'\nexpected_date = datetime.datetime(2008, 4, 14, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'12th day of December, 2001\'\nexpected_date = datetime.datetime(2001, 12, 12, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""12th day of December, 2001""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2003, 1, 2, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""01/02/03""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2003, 2, 1, 0, 0)\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""01/02/03""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2001, 2, 3, 0, 0)\nfirst = \'year\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""01/02/03""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'02/05/2020\', expected_date = datetime.datetime(2020, 2, 5, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""02/05/2020""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'02/05/2020\', expected_date = datetime.datetime(2020, 5, 2, 0, 0)\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""02/05/2020""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'09/06/18\', expected_date = datetime.datetime(2018, 9, 6, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, strict=True):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(input_text) # handles dates\nE           AssertionError: Did not find date for test line: ""09/06/18""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:32: AssertionError', 'input_text = \'09/06/2018\', expected_date = datetime.datetime(2018, 9, 6, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, strict=True):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(input_text) # handles dates\nE           AssertionError: Did not find date for test line: ""09/06/2018""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:32: AssertionError', 'input_text = \'recorded: 03/14/2008\'\nexpected_date = datetime.datetime(2008, 3, 14, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, strict=True):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(input_text) # handles dates\nE           AssertionError: Did not find date for test line: ""recorded: 03/14/2008""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:32: AssertionError', 'input_text = \'19th day of May, 2015\'\nexpected_date = datetime.datetime(2015, 5, 19, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, strict=True):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(input_text) # handles dates\nE           AssertionError: Did not find date for test line: ""19th day of May, 2015""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:32: AssertionError']"
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The goal of the `extract_date_strings_inner` function is to extract date strings from a given text, taking into account the starting position of the text within a larger context. The function tokenizes the text, merges tokens, and then identifies date components such as digits, months, and years. It also has an option for strict processing where it checks for complete date formats before yielding the extracted date strings along with their indices and captured components.

This function is likely part of a larger class that handles text processing tasks related to date extraction. It interacts with other methods or attributes within the class to tokenize the text, merge tokens, and apply regex patterns to extract date components. The function may be called recursively in cases where the text contains date ranges or nested structures.",3,"def extract_date_strings_inner(self, text, text_start, strict):
    # New implementation of extract_date_strings_inner function
    def extract_date_strings_inner(self, text, text_start, strict):
        tokens = self.tokenize_text(text)
        merged_tokens = self.merge_tokens(tokens)
        date_components = self.identify_date_components(merged_tokens)
        
        extracted_dates = []
        for date in date_components:
            if strict:
                if self.is_complete_date(date):
                    extracted_dates.append(date)
            else:
                extracted_dates.append(date)
        
        return extracted_dates, text_start, date_components

    # Helper methods
    
    def tokenize_text(self, text):
        # Tokenize the text
        pass
    
    def merge_tokens(self, tokens):
        # Merge tokens
        pass
    
    def identify_date_components(self, merged_tokens):
        # Identify date components
        pass
    
    def is_complete_date(self, date):
        # Check if date is a complete date format
        pass

    # Return the modified function
    return extract_date_strings_inner","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","7 Passed, 47 Failed",7,47,"['tests/test_extract_date_strings.py::test_extract_date_strings[March 20, 2015 3:30 pm GMT -March 20, 2015 3:30 pm GMT]', 'tests/test_extract_date_strings.py::test_extract_date_strings[March 20, 2015 3:30 pm ACWDT in the parking lot-March 20, 2015 3:30 pm ACWDT]', 'tests/test_extract_date_strings.py::test_extract_date_strings[blah blah March 20, 2015 3pm MADMT for some thing-March 20, 2015 3pm MADMT]', 'tests/test_extract_date_strings.py::test_extract_date_strings[we need it back on Friday 2p.m. central standard time-on Friday 2p.m. central standard time]', 'tests/test_extract_date_strings.py::test_extract_date_strings[the big fight at 2p.m. mountain standard time on ufc.com-at 2p.m. mountain standard time on]', 'tests/test_extract_date_strings.py::test_extract_date_strings[starting Thursday 2020-11-05 13:50 GMT-Thursday 2020-11-05 13:50 GMT]', 'tests/test_extract_date_strings.py::test_extract_date_strings[starting Thu 2020-11-05 13:50 GMT-Thu 2020-11-05 13:50 GMT]', 'tests/test_extract_date_strings.py::test_extract_date_strings_with_strict_option[the Friday after next Tuesday the 20th-]', 'tests/test_extract_date_strings.py::test_extract_date_strings_with_strict_option[This Tuesday March 2015 in the evening-]', 'tests/test_extract_date_strings.py::test_extract_date_strings_with_strict_option[They said it was on 01-03-2015-on 01-03-2015]', 'tests/test_extract_date_strings.py::test_extract_date_strings_with_strict_option[May 20 2015 is nowhere near the other date-May 20 2015]', 'tests/test_find_dates.py::test_find_date_strings[Tuesday Jul 22, 2014-expected_date0-month]', 'tests/test_find_dates.py::test_find_date_strings[December 13, 2014 at midnight-expected_date1-month]', 'tests/test_find_dates.py::test_find_date_strings[April 9, 2013 at 6:11 a.m.-expected_date2-month]', 'tests/test_find_dates.py::test_find_date_strings[Aug. 9, 2012 at 2:57 p.m.-expected_date3-month]', 'tests/test_find_dates.py::test_find_date_strings[December 10, 2014, 11:02:21 pm-expected_date4-month]', 'tests/test_find_dates.py::test_find_date_strings[8:25 a.m. Dec. 12, 2014-expected_date5-month]', 'tests/test_find_dates.py::test_find_date_strings[2:21 p.m., December 11, 2014-expected_date6-month]', 'tests/test_find_dates.py::test_find_date_strings[Fri, 12 Dec 2014 10:55:50-expected_date7-month]', 'tests/test_find_dates.py::test_find_date_strings[10:06am Dec 11, 2014-expected_date8-month]', 'tests/test_find_dates.py::test_find_date_strings[September 2nd, 1998-expected_date9-month]', 'tests/test_find_dates.py::test_find_date_strings[May 5, 2010 to July 10, 2011-expected_date10-month]', 'tests/test_find_dates.py::test_find_date_strings[06-17-2014-expected_date11-month]', 'tests/test_find_dates.py::test_find_date_strings[13/03/2014-expected_date12-month]', 'tests/test_find_dates.py::test_find_date_strings[2016-02-04T20:16:26+00:00-expected_date13-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z-expected_date14-month]', 'tests/test_find_dates.py::test_find_date_strings[i am looking for a date june 4th 1996 to july 3rd 2013-expected_date15-month]', 'tests/test_find_dates.py::test_find_date_strings[october 27 1994 to be put into effect on june 1 1995-expected_date16-month]', 'tests/test_find_dates.py::test_find_date_strings[31/08/2012 to 30/08/2013-expected_date17-month]', 'tests/test_find_dates.py::test_find_date_strings[31 Oct 2021 - 28 Nov 2021-expected_date18-day]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08.001Z-expected_date19-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08,00123Z-expected_date20-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08Z-expected_date21-month]', 'tests/test_find_dates.py::test_find_date_strings[Dutta is the recipient of Femina Miss India Universe title in 2004.-expected_date22-month]', 'tests/test_find_dates.py::test_find_date_strings[she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.-expected_date23-month]', 'tests/test_find_dates.py::test_find_date_strings[12th day of December, 2001-expected_date24-month]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date25-month]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date26-day]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date27-year]', 'tests/test_find_dates.py::test_find_date_strings[02/05/2020-expected_date28-month]', 'tests/test_find_dates.py::test_find_date_strings[02/05/2020-expected_date29-day]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[June 2018-expected_date0]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[09/06/18-expected_date1]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[09/06/2018-expected_date2]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[recorded: 03/14/2008-expected_date3]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[19th day of May, 2015-expected_date4]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[19th day of May-expected_date5]']","[""date_string = 'March 20, 2015 3:30 pm GMT '\nexpected_match_date_string = 'March 20, 2015 3:30 pm GMT'\n\n    @pytest.mark.parametrize('date_string, expected_match_date_string', [\n        ['March 20, 2015 3:30 pm GMT ', 'March 20, 2015 3:30 pm GMT'],\n        ['March 20, 2015 3:30 pm ACWDT in the parking lot', 'March 20, 2015 3:30 pm ACWDT'],\n        ['blah blah March 20, 2015 3pm MADMT for some thing', 'March 20, 2015 3pm MADMT'],\n        ['we need it back on Friday 2p.m. central standard time', 'on Friday 2p.m. central standard time'],\n        ['the big fight at 2p.m. mountain standard time on ufc.com', 'at 2p.m. mountain standard time on'],\n    \n        # issue: Thu not recognised by regex #138\n        ['starting Thursday 2020-11-05 13:50 GMT', 'Thursday 2020-11-05 13:50 GMT'],\n        ['starting Thu 2020-11-05 13:50 GMT', 'Thu 2020-11-05 13:50 GMT'],\n    ])\n    def test_extract_date_strings(date_string, expected_match_date_string):\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string):\nE       TypeError: 'function' object is not iterable\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:22: TypeError"", ""date_string = 'March 20, 2015 3:30 pm ACWDT in the parking lot'\nexpected_match_date_string = 'March 20, 2015 3:30 pm ACWDT'\n\n    @pytest.mark.parametrize('date_string, expected_match_date_string', [\n        ['March 20, 2015 3:30 pm GMT ', 'March 20, 2015 3:30 pm GMT'],\n        ['March 20, 2015 3:30 pm ACWDT in the parking lot', 'March 20, 2015 3:30 pm ACWDT'],\n        ['blah blah March 20, 2015 3pm MADMT for some thing', 'March 20, 2015 3pm MADMT'],\n        ['we need it back on Friday 2p.m. central standard time', 'on Friday 2p.m. central standard time'],\n        ['the big fight at 2p.m. mountain standard time on ufc.com', 'at 2p.m. mountain standard time on'],\n    \n        # issue: Thu not recognised by regex #138\n        ['starting Thursday 2020-11-05 13:50 GMT', 'Thursday 2020-11-05 13:50 GMT'],\n        ['starting Thu 2020-11-05 13:50 GMT', 'Thu 2020-11-05 13:50 GMT'],\n    ])\n    def test_extract_date_strings(date_string, expected_match_date_string):\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string):\nE       TypeError: 'function' object is not iterable\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:22: TypeError"", ""date_string = 'blah blah March 20, 2015 3pm MADMT for some thing'\nexpected_match_date_string = 'March 20, 2015 3pm MADMT'\n\n    @pytest.mark.parametrize('date_string, expected_match_date_string', [\n        ['March 20, 2015 3:30 pm GMT ', 'March 20, 2015 3:30 pm GMT'],\n        ['March 20, 2015 3:30 pm ACWDT in the parking lot', 'March 20, 2015 3:30 pm ACWDT'],\n        ['blah blah March 20, 2015 3pm MADMT for some thing', 'March 20, 2015 3pm MADMT'],\n        ['we need it back on Friday 2p.m. central standard time', 'on Friday 2p.m. central standard time'],\n        ['the big fight at 2p.m. mountain standard time on ufc.com', 'at 2p.m. mountain standard time on'],\n    \n        # issue: Thu not recognised by regex #138\n        ['starting Thursday 2020-11-05 13:50 GMT', 'Thursday 2020-11-05 13:50 GMT'],\n        ['starting Thu 2020-11-05 13:50 GMT', 'Thu 2020-11-05 13:50 GMT'],\n    ])\n    def test_extract_date_strings(date_string, expected_match_date_string):\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string):\nE       TypeError: 'function' object is not iterable\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:22: TypeError"", ""date_string = 'we need it back on Friday 2p.m. central standard time'\nexpected_match_date_string = 'on Friday 2p.m. central standard time'\n\n    @pytest.mark.parametrize('date_string, expected_match_date_string', [\n        ['March 20, 2015 3:30 pm GMT ', 'March 20, 2015 3:30 pm GMT'],\n        ['March 20, 2015 3:30 pm ACWDT in the parking lot', 'March 20, 2015 3:30 pm ACWDT'],\n        ['blah blah March 20, 2015 3pm MADMT for some thing', 'March 20, 2015 3pm MADMT'],\n        ['we need it back on Friday 2p.m. central standard time', 'on Friday 2p.m. central standard time'],\n        ['the big fight at 2p.m. mountain standard time on ufc.com', 'at 2p.m. mountain standard time on'],\n    \n        # issue: Thu not recognised by regex #138\n        ['starting Thursday 2020-11-05 13:50 GMT', 'Thursday 2020-11-05 13:50 GMT'],\n        ['starting Thu 2020-11-05 13:50 GMT', 'Thu 2020-11-05 13:50 GMT'],\n    ])\n    def test_extract_date_strings(date_string, expected_match_date_string):\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string):\nE       TypeError: 'function' object is not iterable\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:22: TypeError"", ""date_string = 'the big fight at 2p.m. mountain standard time on ufc.com'\nexpected_match_date_string = 'at 2p.m. mountain standard time on'\n\n    @pytest.mark.parametrize('date_string, expected_match_date_string', [\n        ['March 20, 2015 3:30 pm GMT ', 'March 20, 2015 3:30 pm GMT'],\n        ['March 20, 2015 3:30 pm ACWDT in the parking lot', 'March 20, 2015 3:30 pm ACWDT'],\n        ['blah blah March 20, 2015 3pm MADMT for some thing', 'March 20, 2015 3pm MADMT'],\n        ['we need it back on Friday 2p.m. central standard time', 'on Friday 2p.m. central standard time'],\n        ['the big fight at 2p.m. mountain standard time on ufc.com', 'at 2p.m. mountain standard time on'],\n    \n        # issue: Thu not recognised by regex #138\n        ['starting Thursday 2020-11-05 13:50 GMT', 'Thursday 2020-11-05 13:50 GMT'],\n        ['starting Thu 2020-11-05 13:50 GMT', 'Thu 2020-11-05 13:50 GMT'],\n    ])\n    def test_extract_date_strings(date_string, expected_match_date_string):\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string):\nE       TypeError: 'function' object is not iterable\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:22: TypeError"", ""date_string = 'starting Thursday 2020-11-05 13:50 GMT'\nexpected_match_date_string = 'Thursday 2020-11-05 13:50 GMT'\n\n    @pytest.mark.parametrize('date_string, expected_match_date_string', [\n        ['March 20, 2015 3:30 pm GMT ', 'March 20, 2015 3:30 pm GMT'],\n        ['March 20, 2015 3:30 pm ACWDT in the parking lot', 'March 20, 2015 3:30 pm ACWDT'],\n        ['blah blah March 20, 2015 3pm MADMT for some thing', 'March 20, 2015 3pm MADMT'],\n        ['we need it back on Friday 2p.m. central standard time', 'on Friday 2p.m. central standard time'],\n        ['the big fight at 2p.m. mountain standard time on ufc.com', 'at 2p.m. mountain standard time on'],\n    \n        # issue: Thu not recognised by regex #138\n        ['starting Thursday 2020-11-05 13:50 GMT', 'Thursday 2020-11-05 13:50 GMT'],\n        ['starting Thu 2020-11-05 13:50 GMT', 'Thu 2020-11-05 13:50 GMT'],\n    ])\n    def test_extract_date_strings(date_string, expected_match_date_string):\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string):\nE       TypeError: 'function' object is not iterable\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:22: TypeError"", ""date_string = 'starting Thu 2020-11-05 13:50 GMT'\nexpected_match_date_string = 'Thu 2020-11-05 13:50 GMT'\n\n    @pytest.mark.parametrize('date_string, expected_match_date_string', [\n        ['March 20, 2015 3:30 pm GMT ', 'March 20, 2015 3:30 pm GMT'],\n        ['March 20, 2015 3:30 pm ACWDT in the parking lot', 'March 20, 2015 3:30 pm ACWDT'],\n        ['blah blah March 20, 2015 3pm MADMT for some thing', 'March 20, 2015 3pm MADMT'],\n        ['we need it back on Friday 2p.m. central standard time', 'on Friday 2p.m. central standard time'],\n        ['the big fight at 2p.m. mountain standard time on ufc.com', 'at 2p.m. mountain standard time on'],\n    \n        # issue: Thu not recognised by regex #138\n        ['starting Thursday 2020-11-05 13:50 GMT', 'Thursday 2020-11-05 13:50 GMT'],\n        ['starting Thu 2020-11-05 13:50 GMT', 'Thu 2020-11-05 13:50 GMT'],\n    ])\n    def test_extract_date_strings(date_string, expected_match_date_string):\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string):\nE       TypeError: 'function' object is not iterable\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:22: TypeError"", 'date_string = \'the Friday after next Tuesday the 20th\'\nexpected_match_date_string = \'\'\n\n    @pytest.mark.parametrize(\'date_string, expected_match_date_string\', [\n        [\'the Friday after next Tuesday the 20th\', \'\'], # no matches\n        [\'This Tuesday March 2015 in the evening\', \'\'], # no matches\n        [\'They said it was on 01-03-2015\', \'on 01-03-2015\'], # 3 digits strict match\n        [\'May 20 2015 is nowhere near the other date\', \'May 20 2015\'], # one month two digit match\n    ])\n    def test_extract_date_strings_with_strict_option(date_string, expected_match_date_string):\n        """"""\n        make sure that `strict` mode works for the dates we care about\n        and doesn\'t work for others\n    \n        :param date_string:\n        :param expected_match_date_string:\n        :return:\n        """"""\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string,strict=True):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:47: TypeError', 'date_string = \'This Tuesday March 2015 in the evening\'\nexpected_match_date_string = \'\'\n\n    @pytest.mark.parametrize(\'date_string, expected_match_date_string\', [\n        [\'the Friday after next Tuesday the 20th\', \'\'], # no matches\n        [\'This Tuesday March 2015 in the evening\', \'\'], # no matches\n        [\'They said it was on 01-03-2015\', \'on 01-03-2015\'], # 3 digits strict match\n        [\'May 20 2015 is nowhere near the other date\', \'May 20 2015\'], # one month two digit match\n    ])\n    def test_extract_date_strings_with_strict_option(date_string, expected_match_date_string):\n        """"""\n        make sure that `strict` mode works for the dates we care about\n        and doesn\'t work for others\n    \n        :param date_string:\n        :param expected_match_date_string:\n        :return:\n        """"""\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string,strict=True):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:47: TypeError', 'date_string = \'They said it was on 01-03-2015\'\nexpected_match_date_string = \'on 01-03-2015\'\n\n    @pytest.mark.parametrize(\'date_string, expected_match_date_string\', [\n        [\'the Friday after next Tuesday the 20th\', \'\'], # no matches\n        [\'This Tuesday March 2015 in the evening\', \'\'], # no matches\n        [\'They said it was on 01-03-2015\', \'on 01-03-2015\'], # 3 digits strict match\n        [\'May 20 2015 is nowhere near the other date\', \'May 20 2015\'], # one month two digit match\n    ])\n    def test_extract_date_strings_with_strict_option(date_string, expected_match_date_string):\n        """"""\n        make sure that `strict` mode works for the dates we care about\n        and doesn\'t work for others\n    \n        :param date_string:\n        :param expected_match_date_string:\n        :return:\n        """"""\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string,strict=True):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:47: TypeError', 'date_string = \'May 20 2015 is nowhere near the other date\'\nexpected_match_date_string = \'May 20 2015\'\n\n    @pytest.mark.parametrize(\'date_string, expected_match_date_string\', [\n        [\'the Friday after next Tuesday the 20th\', \'\'], # no matches\n        [\'This Tuesday March 2015 in the evening\', \'\'], # no matches\n        [\'They said it was on 01-03-2015\', \'on 01-03-2015\'], # 3 digits strict match\n        [\'May 20 2015 is nowhere near the other date\', \'May 20 2015\'], # one month two digit match\n    ])\n    def test_extract_date_strings_with_strict_option(date_string, expected_match_date_string):\n        """"""\n        make sure that `strict` mode works for the dates we care about\n        and doesn\'t work for others\n    \n        :param date_string:\n        :param expected_match_date_string:\n        :return:\n        """"""\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string,strict=True):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:47: TypeError', 'input_text = \'Tuesday Jul 22, 2014\'\nexpected_date = datetime.datetime(2014, 7, 22, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D16A56BD0>\ntext = \'Tuesday Jul 22, 2014\', source = False, index = False, strict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'December 13, 2014 at midnight\'\nexpected_date = datetime.datetime(2014, 12, 13, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D16E057B0>\ntext = \'December 13, 2014 at midnight\', source = False, index = False\nstrict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'April 9, 2013 at 6:11 a.m.\'\nexpected_date = datetime.datetime(2013, 4, 9, 6, 11), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D16680260>\ntext = \'April 9, 2013 at 6:11 a.m.\', source = False, index = False\nstrict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'Aug. 9, 2012 at 2:57 p.m.\'\nexpected_date = datetime.datetime(2012, 8, 9, 14, 57), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D16875130>\ntext = \'Aug. 9, 2012 at 2:57 p.m.\', source = False, index = False\nstrict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'December 10, 2014, 11:02:21 pm\'\nexpected_date = datetime.datetime(2014, 12, 10, 23, 2, 21), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D16653070>\ntext = \'December 10, 2014, 11:02:21 pm\', source = False, index = False\nstrict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'8:25 a.m. Dec. 12, 2014\'\nexpected_date = datetime.datetime(2014, 12, 12, 8, 25), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D166A0C20>\ntext = \'8:25 a.m. Dec. 12, 2014\', source = False, index = False, strict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'2:21 p.m., December 11, 2014\'\nexpected_date = datetime.datetime(2014, 12, 11, 14, 21), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D169ED7D0>\ntext = \'2:21 p.m., December 11, 2014\', source = False, index = False\nstrict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'Fri, 12 Dec 2014 10:55:50\'\nexpected_date = datetime.datetime(2014, 12, 12, 10, 55, 50), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D169EEB50>\ntext = \'Fri, 12 Dec 2014 10:55:50\', source = False, index = False\nstrict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'10:06am Dec 11, 2014\'\nexpected_date = datetime.datetime(2014, 12, 11, 10, 6), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D1669F930>\ntext = \'10:06am Dec 11, 2014\', source = False, index = False, strict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'September 2nd, 1998\'\nexpected_date = datetime.datetime(1998, 9, 2, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D1693CD70>\ntext = \'September 2nd, 1998\', source = False, index = False, strict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'May 5, 2010 to July 10, 2011\'\nexpected_date = [datetime.datetime(2010, 5, 5, 0, 0), datetime.datetime(2011, 7, 10, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n>           matches = list(datefinder.find_dates(input_text, first=first))\n\nrepos\\datefinder\\tests\\test_find_dates.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D1688A750>\ntext = \'May 5, 2010 to July 10, 2011\', source = False, index = False\nstrict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'06-17-2014\', expected_date = datetime.datetime(2014, 6, 17, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D1688B9B0>, text = \'06-17-2014\'\nsource = False, index = False, strict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'13/03/2014\', expected_date = datetime.datetime(2014, 3, 13, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D1688ACF0>, text = \'13/03/2014\'\nsource = False, index = False, strict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'2016-02-04T20:16:26+00:00\'\nexpected_date = datetime.datetime(2016, 2, 4, 20, 16, 26, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D16889D30>\ntext = \'2016-02-04T20:16:26+00:00\', source = False, index = False\nstrict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z\'\nexpected_date = [datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>), datetime.datetime(2017, 2, 3, 9, 4, 9, tzinfo=<UTC>)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n>           matches = list(datefinder.find_dates(input_text, first=first))\n\nrepos\\datefinder\\tests\\test_find_dates.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D16888E30>\ntext = \'2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z\', source = False\nindex = False, strict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'i am looking for a date june 4th 1996 to july 3rd 2013\'\nexpected_date = [datetime.datetime(1996, 6, 4, 0, 0), datetime.datetime(2013, 7, 3, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n>           matches = list(datefinder.find_dates(input_text, first=first))\n\nrepos\\datefinder\\tests\\test_find_dates.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D1688A3F0>\ntext = \'i am looking for a date june 4th 1996 to july 3rd 2013\', source = False\nindex = False, strict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'october 27 1994 to be put into effect on june 1 1995\'\nexpected_date = [datetime.datetime(1994, 10, 27, 0, 0), datetime.datetime(1995, 6, 1, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n>           matches = list(datefinder.find_dates(input_text, first=first))\n\nrepos\\datefinder\\tests\\test_find_dates.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D167075F0>\ntext = \'october 27 1994 to be put into effect on june 1 1995\', source = False\nindex = False, strict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'31/08/2012 to 30/08/2013\'\nexpected_date = [datetime.datetime(2012, 8, 31, 0, 0), datetime.datetime(2013, 8, 30, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n>           matches = list(datefinder.find_dates(input_text, first=first))\n\nrepos\\datefinder\\tests\\test_find_dates.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D167076B0>\ntext = \'31/08/2012 to 30/08/2013\', source = False, index = False, strict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'31 Oct 2021 - 28 Nov 2021\'\nexpected_date = [datetime.datetime(2021, 10, 31, 0, 0), datetime.datetime(2021, 11, 28, 0, 0)]\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n>           matches = list(datefinder.find_dates(input_text, first=first))\n\nrepos\\datefinder\\tests\\test_find_dates.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D16704650>\ntext = \'31 Oct 2021 - 28 Nov 2021\', source = False, index = False\nstrict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'2017-02-03T09:04:08.001Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D1686BAD0>\ntext = \'2017-02-03T09:04:08.001Z\', source = False, index = False, strict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'2017-02-03T09:04:08,00123Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D16869CD0>\ntext = \'2017-02-03T09:04:08,00123Z\', source = False, index = False\nstrict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'2017-02-03T09:04:08Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D1686B9B0>\ntext = \'2017-02-03T09:04:08Z\', source = False, index = False, strict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'Dutta is the recipient of Femina Miss India Universe title in 2004.\'\nexpected_date = datetime.datetime(2004, 4, 14, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D16869D90>\ntext = \'Dutta is the recipient of Femina Miss India Universe title in 2004.\'\nsource = False, index = False, strict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\'\nexpected_date = datetime.datetime(2008, 4, 14, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D1686B8F0>\ntext = \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\'\nsource = False, index = False, strict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'12th day of December, 2001\'\nexpected_date = datetime.datetime(2001, 12, 12, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D16868EF0>\ntext = \'12th day of December, 2001\', source = False, index = False\nstrict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2003, 1, 2, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D169DC830>, text = \'01/02/03\'\nsource = False, index = False, strict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2003, 2, 1, 0, 0)\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D16868830>, text = \'01/02/03\'\nsource = False, index = False, strict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2001, 2, 3, 0, 0)\nfirst = \'year\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D1686A990>, text = \'01/02/03\'\nsource = False, index = False, strict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'02/05/2020\', expected_date = datetime.datetime(2020, 2, 5, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D16888E90>, text = \'02/05/2020\'\nsource = False, index = False, strict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', 'input_text = \'02/05/2020\', expected_date = datetime.datetime(2020, 5, 2, 0, 0)\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D169DD0D0>, text = \'02/05/2020\'\nsource = False, index = False, strict = False\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: \'function\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError', ""input_text = 'June 2018', expected_date = []\n\n    @pytest.mark.parametrize('input_text, expected_date', [\n    \n        ('June 2018', []),\n        ('09/06/18',  datetime(2018, 9, 6)),\n        ('09/06/2018', datetime(2018, 9, 6)),\n        ('recorded: 03/14/2008', datetime(2008, 3, 14)),\n        ('19th day of May, 2015', datetime(2015, 5, 19)),\n        ('19th day of May', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n>           matches = list(datefinder.find_dates(input_text, strict=True))\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D169DD730>, text = 'June 2018'\nsource = False, index = False, strict = True\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: 'function' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError"", ""input_text = '09/06/18', expected_date = datetime.datetime(2018, 9, 6, 0, 0)\n\n    @pytest.mark.parametrize('input_text, expected_date', [\n    \n        ('June 2018', []),\n        ('09/06/18',  datetime(2018, 9, 6)),\n        ('09/06/2018', datetime(2018, 9, 6)),\n        ('recorded: 03/14/2008', datetime(2008, 3, 14)),\n        ('19th day of May, 2015', datetime(2015, 5, 19)),\n        ('19th day of May', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, strict=True):\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D169DE1B0>, text = '09/06/18'\nsource = False, index = False, strict = True\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: 'function' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError"", ""input_text = '09/06/2018', expected_date = datetime.datetime(2018, 9, 6, 0, 0)\n\n    @pytest.mark.parametrize('input_text, expected_date', [\n    \n        ('June 2018', []),\n        ('09/06/18',  datetime(2018, 9, 6)),\n        ('09/06/2018', datetime(2018, 9, 6)),\n        ('recorded: 03/14/2008', datetime(2008, 3, 14)),\n        ('19th day of May, 2015', datetime(2015, 5, 19)),\n        ('19th day of May', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, strict=True):\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D16E3D8B0>, text = '09/06/2018'\nsource = False, index = False, strict = True\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: 'function' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError"", ""input_text = 'recorded: 03/14/2008'\nexpected_date = datetime.datetime(2008, 3, 14, 0, 0)\n\n    @pytest.mark.parametrize('input_text, expected_date', [\n    \n        ('June 2018', []),\n        ('09/06/18',  datetime(2018, 9, 6)),\n        ('09/06/2018', datetime(2018, 9, 6)),\n        ('recorded: 03/14/2008', datetime(2008, 3, 14)),\n        ('19th day of May, 2015', datetime(2015, 5, 19)),\n        ('19th day of May', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, strict=True):\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D16E3C6B0>\ntext = 'recorded: 03/14/2008', source = False, index = False, strict = True\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: 'function' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError"", ""input_text = '19th day of May, 2015'\nexpected_date = datetime.datetime(2015, 5, 19, 0, 0)\n\n    @pytest.mark.parametrize('input_text, expected_date', [\n    \n        ('June 2018', []),\n        ('09/06/18',  datetime(2018, 9, 6)),\n        ('09/06/2018', datetime(2018, 9, 6)),\n        ('recorded: 03/14/2008', datetime(2008, 3, 14)),\n        ('19th day of May, 2015', datetime(2015, 5, 19)),\n        ('19th day of May', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, strict=True):\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D16E3DA30>\ntext = '19th day of May, 2015', source = False, index = False, strict = True\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: 'function' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError"", ""input_text = '19th day of May', expected_date = []\n\n    @pytest.mark.parametrize('input_text, expected_date', [\n    \n        ('June 2018', []),\n        ('09/06/18',  datetime(2018, 9, 6)),\n        ('09/06/2018', datetime(2018, 9, 6)),\n        ('recorded: 03/14/2008', datetime(2008, 3, 14)),\n        ('19th day of May, 2015', datetime(2015, 5, 19)),\n        ('19th day of May', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n>           matches = list(datefinder.find_dates(input_text, strict=True))\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x0000026D16E3E0F0>\ntext = '19th day of May', source = False, index = False, strict = True\n\n    def find_dates(self, text, source=False, index=False, strict=False):\n>       for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nE       TypeError: 'function' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:24: TypeError""]"
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The `tokenize_string` function aims to extract matches of a specific regex pattern from a given text. It iterates through the text, identifies matches, and groups them based on certain criteria. The function returns a list of tuples containing the extracted match, its group, and any additional captures associated with the match. This process allows for further composition of potential date strings from the extracted matches.",1,"def tokenize_string(self, text):
    import re
    
    pattern = r'(\d{1,2})[/.-](\d{1,2})[/.-](\d{2,4})'
    matches = re.finditer(pattern, text)
    
    extracted = []
    for match in matches:
        extracted.append((match.group(0), match.group(1), match.group(2), match.group(3)))
    
    return extracted","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","17 Passed, 37 Failed",17,37,"['tests/test_extract_date_strings.py::test_extract_date_strings[starting Thursday 2020-11-05 13:50 GMT-Thursday 2020-11-05 13:50 GMT]', 'tests/test_extract_date_strings.py::test_extract_date_strings[starting Thu 2020-11-05 13:50 GMT-Thu 2020-11-05 13:50 GMT]', 'tests/test_extract_date_strings.py::test_extract_date_strings_with_strict_option[They said it was on 01-03-2015-on 01-03-2015]', 'tests/test_find_dates.py::test_find_date_strings[Tuesday Jul 22, 2014-expected_date0-month]', 'tests/test_find_dates.py::test_find_date_strings[December 13, 2014 at midnight-expected_date1-month]', 'tests/test_find_dates.py::test_find_date_strings[April 9, 2013 at 6:11 a.m.-expected_date2-month]', 'tests/test_find_dates.py::test_find_date_strings[Aug. 9, 2012 at 2:57 p.m.-expected_date3-month]', 'tests/test_find_dates.py::test_find_date_strings[December 10, 2014, 11:02:21 pm-expected_date4-month]', 'tests/test_find_dates.py::test_find_date_strings[8:25 a.m. Dec. 12, 2014-expected_date5-month]', 'tests/test_find_dates.py::test_find_date_strings[2:21 p.m., December 11, 2014-expected_date6-month]', 'tests/test_find_dates.py::test_find_date_strings[Fri, 12 Dec 2014 10:55:50-expected_date7-month]', 'tests/test_find_dates.py::test_find_date_strings[10:06am Dec 11, 2014-expected_date8-month]', 'tests/test_find_dates.py::test_find_date_strings[September 2nd, 1998-expected_date9-month]', 'tests/test_find_dates.py::test_find_date_strings[May 5, 2010 to July 10, 2011-expected_date10-month]', 'tests/test_find_dates.py::test_find_date_strings[06-17-2014-expected_date11-month]', 'tests/test_find_dates.py::test_find_date_strings[13/03/2014-expected_date12-month]', 'tests/test_find_dates.py::test_find_date_strings[2016-02-04T20:16:26+00:00-expected_date13-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z-expected_date14-month]', 'tests/test_find_dates.py::test_find_date_strings[i am looking for a date june 4th 1996 to july 3rd 2013-expected_date15-month]', 'tests/test_find_dates.py::test_find_date_strings[october 27 1994 to be put into effect on june 1 1995-expected_date16-month]', 'tests/test_find_dates.py::test_find_date_strings[31/08/2012 to 30/08/2013-expected_date17-month]', 'tests/test_find_dates.py::test_find_date_strings[31 Oct 2021 - 28 Nov 2021-expected_date18-day]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08.001Z-expected_date19-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08,00123Z-expected_date20-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08Z-expected_date21-month]', 'tests/test_find_dates.py::test_find_date_strings[Dutta is the recipient of Femina Miss India Universe title in 2004.-expected_date22-month]', 'tests/test_find_dates.py::test_find_date_strings[she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.-expected_date23-month]', 'tests/test_find_dates.py::test_find_date_strings[12th day of December, 2001-expected_date24-month]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date25-month]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date26-day]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date27-year]', 'tests/test_find_dates.py::test_find_date_strings[02/05/2020-expected_date28-month]', 'tests/test_find_dates.py::test_find_date_strings[02/05/2020-expected_date29-day]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[09/06/18-expected_date1]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[09/06/2018-expected_date2]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[recorded: 03/14/2008-expected_date3]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[19th day of May, 2015-expected_date4]']","['date_string = \'starting Thursday 2020-11-05 13:50 GMT\'\nexpected_match_date_string = \'Thursday 2020-11-05 13:50 GMT\'\n\n    @pytest.mark.parametrize(\'date_string, expected_match_date_string\', [\n        [\'March 20, 2015 3:30 pm GMT \', \'March 20, 2015 3:30 pm GMT\'],\n        [\'March 20, 2015 3:30 pm ACWDT in the parking lot\', \'March 20, 2015 3:30 pm ACWDT\'],\n        [\'blah blah March 20, 2015 3pm MADMT for some thing\', \'March 20, 2015 3pm MADMT\'],\n        [\'we need it back on Friday 2p.m. central standard time\', \'on Friday 2p.m. central standard time\'],\n        [\'the big fight at 2p.m. mountain standard time on ufc.com\', \'at 2p.m. mountain standard time on\'],\n    \n        # issue: Thu not recognised by regex #138\n        [\'starting Thursday 2020-11-05 13:50 GMT\', \'Thursday 2020-11-05 13:50 GMT\'],\n        [\'starting Thu 2020-11-05 13:50 GMT\', \'Thu 2020-11-05 13:50 GMT\'],\n    ])\n    def test_extract_date_strings(date_string, expected_match_date_string):\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string):\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002AC9D936E50>\ntokens = [(\'20-11-05\', \'20\', \'11\', \'05\')]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n            for capt in tok_capts:\n                if capt in frag.captures:\n                    frag.captures[capt] += tok_capts[capt]\n                else:\n>                   frag.captures[capt] = tok_capts[capt]\nE                   TypeError: string indices must be integers, not \'str\'\n\nrepos\\datefinder\\datefinder\\__init__.py:172: TypeError', 'date_string = \'starting Thu 2020-11-05 13:50 GMT\'\nexpected_match_date_string = \'Thu 2020-11-05 13:50 GMT\'\n\n    @pytest.mark.parametrize(\'date_string, expected_match_date_string\', [\n        [\'March 20, 2015 3:30 pm GMT \', \'March 20, 2015 3:30 pm GMT\'],\n        [\'March 20, 2015 3:30 pm ACWDT in the parking lot\', \'March 20, 2015 3:30 pm ACWDT\'],\n        [\'blah blah March 20, 2015 3pm MADMT for some thing\', \'March 20, 2015 3pm MADMT\'],\n        [\'we need it back on Friday 2p.m. central standard time\', \'on Friday 2p.m. central standard time\'],\n        [\'the big fight at 2p.m. mountain standard time on ufc.com\', \'at 2p.m. mountain standard time on\'],\n    \n        # issue: Thu not recognised by regex #138\n        [\'starting Thursday 2020-11-05 13:50 GMT\', \'Thursday 2020-11-05 13:50 GMT\'],\n        [\'starting Thu 2020-11-05 13:50 GMT\', \'Thu 2020-11-05 13:50 GMT\'],\n    ])\n    def test_extract_date_strings(date_string, expected_match_date_string):\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string):\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002AC9DC9EC60>\ntokens = [(\'20-11-05\', \'20\', \'11\', \'05\')]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n            for capt in tok_capts:\n                if capt in frag.captures:\n                    frag.captures[capt] += tok_capts[capt]\n                else:\n>                   frag.captures[capt] = tok_capts[capt]\nE                   TypeError: string indices must be integers, not \'str\'\n\nrepos\\datefinder\\datefinder\\__init__.py:172: TypeError', 'date_string = \'They said it was on 01-03-2015\'\nexpected_match_date_string = \'on 01-03-2015\'\n\n    @pytest.mark.parametrize(\'date_string, expected_match_date_string\', [\n        [\'the Friday after next Tuesday the 20th\', \'\'], # no matches\n        [\'This Tuesday March 2015 in the evening\', \'\'], # no matches\n        [\'They said it was on 01-03-2015\', \'on 01-03-2015\'], # 3 digits strict match\n        [\'May 20 2015 is nowhere near the other date\', \'May 20 2015\'], # one month two digit match\n    ])\n    def test_extract_date_strings_with_strict_option(date_string, expected_match_date_string):\n        """"""\n        make sure that `strict` mode works for the dates we care about\n        and doesn\'t work for others\n    \n        :param date_string:\n        :param expected_match_date_string:\n        :return:\n        """"""\n        dt = datefinder.DateFinder()\n>       for actual_date_string, indexes, captures in dt.extract_date_strings(date_string,strict=True):\n\nrepos\\datefinder\\tests\\test_extract_date_strings.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002AC9DCCEA50>\ntokens = [(\'01-03-2015\', \'01\', \'03\', \'2015\')]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n            for capt in tok_capts:\n                if capt in frag.captures:\n                    frag.captures[capt] += tok_capts[capt]\n                else:\n>                   frag.captures[capt] = tok_capts[capt]\nE                   TypeError: string indices must be integers, not \'str\'\n\nrepos\\datefinder\\datefinder\\__init__.py:172: TypeError', 'input_text = \'Tuesday Jul 22, 2014\'\nexpected_date = datetime.datetime(2014, 7, 22, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Tuesday Jul 22, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'December 13, 2014 at midnight\'\nexpected_date = datetime.datetime(2014, 12, 13, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""December 13, 2014 at midnight""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'April 9, 2013 at 6:11 a.m.\'\nexpected_date = datetime.datetime(2013, 4, 9, 6, 11), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""April 9, 2013 at 6:11 a.m.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'Aug. 9, 2012 at 2:57 p.m.\'\nexpected_date = datetime.datetime(2012, 8, 9, 14, 57), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Aug. 9, 2012 at 2:57 p.m.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'December 10, 2014, 11:02:21 pm\'\nexpected_date = datetime.datetime(2014, 12, 10, 23, 2, 21), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""December 10, 2014, 11:02:21 pm""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'8:25 a.m. Dec. 12, 2014\'\nexpected_date = datetime.datetime(2014, 12, 12, 8, 25), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""8:25 a.m. Dec. 12, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2:21 p.m., December 11, 2014\'\nexpected_date = datetime.datetime(2014, 12, 11, 14, 21), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2:21 p.m., December 11, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'Fri, 12 Dec 2014 10:55:50\'\nexpected_date = datetime.datetime(2014, 12, 12, 10, 55, 50), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Fri, 12 Dec 2014 10:55:50""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'10:06am Dec 11, 2014\'\nexpected_date = datetime.datetime(2014, 12, 11, 10, 6), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""10:06am Dec 11, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'September 2nd, 1998\'\nexpected_date = datetime.datetime(1998, 9, 2, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""September 2nd, 1998""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'May 5, 2010 to July 10, 2011\'\nexpected_date = [datetime.datetime(2010, 5, 5, 0, 0), datetime.datetime(2011, 7, 10, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat... 7, 10, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(2010, 5, 5, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(2010, 5, 5, 0, 0),\nE             -     datetime.datetime(2011, 7, 10, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'06-17-2014\', expected_date = datetime.datetime(2014, 6, 17, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002AC9DACB770>\ntokens = [(\'06-17-2014\', \'06\', \'17\', \'2014\')]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n            for capt in tok_capts:\n                if capt in frag.captures:\n                    frag.captures[capt] += tok_capts[capt]\n                else:\n>                   frag.captures[capt] = tok_capts[capt]\nE                   TypeError: string indices must be integers, not \'str\'\n\nrepos\\datefinder\\datefinder\\__init__.py:172: TypeError', 'input_text = \'13/03/2014\', expected_date = datetime.datetime(2014, 3, 13, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002AC9DACBC50>\ntokens = [(\'13/03/2014\', \'13\', \'03\', \'2014\')]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n            for capt in tok_capts:\n                if capt in frag.captures:\n                    frag.captures[capt] += tok_capts[capt]\n                else:\n>                   frag.captures[capt] = tok_capts[capt]\nE                   TypeError: string indices must be integers, not \'str\'\n\nrepos\\datefinder\\datefinder\\__init__.py:172: TypeError', 'input_text = \'2016-02-04T20:16:26+00:00\'\nexpected_date = datetime.datetime(2016, 2, 4, 20, 16, 26, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002AC9DADF9B0>\ntokens = [(\'16-02-04\', \'16\', \'02\', \'04\')]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n            for capt in tok_capts:\n                if capt in frag.captures:\n                    frag.captures[capt] += tok_capts[capt]\n                else:\n>                   frag.captures[capt] = tok_capts[capt]\nE                   TypeError: string indices must be integers, not \'str\'\n\nrepos\\datefinder\\datefinder\\__init__.py:172: TypeError', 'input_text = \'2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z\'\nexpected_date = [datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>), datetime.datetime(2017, 2, 3, 9, 4, 9, tzinfo=<UTC>)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n>           matches = list(datefinder.find_dates(input_text, first=first))\n\nrepos\\datefinder\\tests\\test_find_dates.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:105: in extract_date_strings_inner\n    range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002AC9DACB770>\ntokens = [(\'17-02-03\', \'17\', \'02\', \'03\')]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n            for capt in tok_capts:\n                if capt in frag.captures:\n                    frag.captures[capt] += tok_capts[capt]\n                else:\n>                   frag.captures[capt] = tok_capts[capt]\nE                   TypeError: string indices must be integers, not \'str\'\n\nrepos\\datefinder\\datefinder\\__init__.py:172: TypeError', 'input_text = \'i am looking for a date june 4th 1996 to july 3rd 2013\'\nexpected_date = [datetime.datetime(1996, 6, 4, 0, 0), datetime.datetime(2013, 7, 3, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat..., 7, 3, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(1996, 6, 4, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(1996, 6, 4, 0, 0),\nE             -     datetime.datetime(2013, 7, 3, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'october 27 1994 to be put into effect on june 1 1995\'\nexpected_date = [datetime.datetime(1994, 10, 27, 0, 0), datetime.datetime(1995, 6, 1, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat..., 6, 1, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(1994, 10, 27, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(1994, 10, 27, 0, 0),\nE             -     datetime.datetime(1995, 6, 1, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'31/08/2012 to 30/08/2013\'\nexpected_date = [datetime.datetime(2012, 8, 31, 0, 0), datetime.datetime(2013, 8, 30, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n>           matches = list(datefinder.find_dates(input_text, first=first))\n\nrepos\\datefinder\\tests\\test_find_dates.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:105: in extract_date_strings_inner\n    range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002AC9DAC9F10>\ntokens = [(\'31/08/2012\', \'31\', \'08\', \'2012\')]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n            for capt in tok_capts:\n                if capt in frag.captures:\n                    frag.captures[capt] += tok_capts[capt]\n                else:\n>                   frag.captures[capt] = tok_capts[capt]\nE                   TypeError: string indices must be integers, not \'str\'\n\nrepos\\datefinder\\datefinder\\__init__.py:172: TypeError', 'input_text = \'31 Oct 2021 - 28 Nov 2021\'\nexpected_date = [datetime.datetime(2021, 10, 31, 0, 0), datetime.datetime(2021, 11, 28, 0, 0)]\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat...11, 28, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(2021, 10, 31, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(2021, 10, 31, 0, 0),\nE             -     datetime.datetime(2021, 11, 28, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'2017-02-03T09:04:08.001Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002AC9DAAE330>\ntokens = [(\'17-02-03\', \'17\', \'02\', \'03\')]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n            for capt in tok_capts:\n                if capt in frag.captures:\n                    frag.captures[capt] += tok_capts[capt]\n                else:\n>                   frag.captures[capt] = tok_capts[capt]\nE                   TypeError: string indices must be integers, not \'str\'\n\nrepos\\datefinder\\datefinder\\__init__.py:172: TypeError', 'input_text = \'2017-02-03T09:04:08,00123Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002AC9DAADD30>\ntokens = [(\'17-02-03\', \'17\', \'02\', \'03\')]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n            for capt in tok_capts:\n                if capt in frag.captures:\n                    frag.captures[capt] += tok_capts[capt]\n                else:\n>                   frag.captures[capt] = tok_capts[capt]\nE                   TypeError: string indices must be integers, not \'str\'\n\nrepos\\datefinder\\datefinder\\__init__.py:172: TypeError', 'input_text = \'2017-02-03T09:04:08Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002AC9DAAFD10>\ntokens = [(\'17-02-03\', \'17\', \'02\', \'03\')]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n            for capt in tok_capts:\n                if capt in frag.captures:\n                    frag.captures[capt] += tok_capts[capt]\n                else:\n>                   frag.captures[capt] = tok_capts[capt]\nE                   TypeError: string indices must be integers, not \'str\'\n\nrepos\\datefinder\\datefinder\\__init__.py:172: TypeError', 'input_text = \'Dutta is the recipient of Femina Miss India Universe title in 2004.\'\nexpected_date = datetime.datetime(2004, 4, 14, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Dutta is the recipient of Femina Miss India Universe title in 2004.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\'\nexpected_date = datetime.datetime(2008, 4, 14, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'12th day of December, 2001\'\nexpected_date = datetime.datetime(2001, 12, 12, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""12th day of December, 2001""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2003, 1, 2, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002AC9DAAC590>\ntokens = [(\'01/02/03\', \'01\', \'02\', \'03\')]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n            for capt in tok_capts:\n                if capt in frag.captures:\n                    frag.captures[capt] += tok_capts[capt]\n                else:\n>                   frag.captures[capt] = tok_capts[capt]\nE                   TypeError: string indices must be integers, not \'str\'\n\nrepos\\datefinder\\datefinder\\__init__.py:172: TypeError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2003, 2, 1, 0, 0)\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002AC9DAAFB30>\ntokens = [(\'01/02/03\', \'01\', \'02\', \'03\')]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n            for capt in tok_capts:\n                if capt in frag.captures:\n                    frag.captures[capt] += tok_capts[capt]\n                else:\n>                   frag.captures[capt] = tok_capts[capt]\nE                   TypeError: string indices must be integers, not \'str\'\n\nrepos\\datefinder\\datefinder\\__init__.py:172: TypeError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2001, 2, 3, 0, 0)\nfirst = \'year\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002AC9DAC9910>\ntokens = [(\'01/02/03\', \'01\', \'02\', \'03\')]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n            for capt in tok_capts:\n                if capt in frag.captures:\n                    frag.captures[capt] += tok_capts[capt]\n                else:\n>                   frag.captures[capt] = tok_capts[capt]\nE                   TypeError: string indices must be integers, not \'str\'\n\nrepos\\datefinder\\datefinder\\__init__.py:172: TypeError', 'input_text = \'02/05/2020\', expected_date = datetime.datetime(2020, 2, 5, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002AC9DAE7FB0>\ntokens = [(\'02/05/2020\', \'02\', \'05\', \'2020\')]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n            for capt in tok_capts:\n                if capt in frag.captures:\n                    frag.captures[capt] += tok_capts[capt]\n                else:\n>                   frag.captures[capt] = tok_capts[capt]\nE                   TypeError: string indices must be integers, not \'str\'\n\nrepos\\datefinder\\datefinder\\__init__.py:172: TypeError', 'input_text = \'02/05/2020\', expected_date = datetime.datetime(2020, 5, 2, 0, 0)\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002AC9DAE4290>\ntokens = [(\'02/05/2020\', \'02\', \'05\', \'2020\')]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n            for capt in tok_capts:\n                if capt in frag.captures:\n                    frag.captures[capt] += tok_capts[capt]\n                else:\n>                   frag.captures[capt] = tok_capts[capt]\nE                   TypeError: string indices must be integers, not \'str\'\n\nrepos\\datefinder\\datefinder\\__init__.py:172: TypeError', 'input_text = \'09/06/18\', expected_date = datetime.datetime(2018, 9, 6, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, strict=True):\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002AC9DAE7950>\ntokens = [(\'09/06/18\', \'09\', \'06\', \'18\')]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n            for capt in tok_capts:\n                if capt in frag.captures:\n                    frag.captures[capt] += tok_capts[capt]\n                else:\n>                   frag.captures[capt] = tok_capts[capt]\nE                   TypeError: string indices must be integers, not \'str\'\n\nrepos\\datefinder\\datefinder\\__init__.py:172: TypeError', 'input_text = \'09/06/2018\', expected_date = datetime.datetime(2018, 9, 6, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, strict=True):\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002AC9DAE6450>\ntokens = [(\'09/06/2018\', \'09\', \'06\', \'2018\')]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n            for capt in tok_capts:\n                if capt in frag.captures:\n                    frag.captures[capt] += tok_capts[capt]\n                else:\n>                   frag.captures[capt] = tok_capts[capt]\nE                   TypeError: string indices must be integers, not \'str\'\n\nrepos\\datefinder\\datefinder\\__init__.py:172: TypeError', 'input_text = \'recorded: 03/14/2008\'\nexpected_date = datetime.datetime(2008, 3, 14, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, strict=True):\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002AC9DC1CFB0>\ntokens = [(\'03/14/2008\', \'03\', \'14\', \'2008\')]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n            for capt in tok_capts:\n                if capt in frag.captures:\n                    frag.captures[capt] += tok_capts[capt]\n                else:\n>                   frag.captures[capt] = tok_capts[capt]\nE                   TypeError: string indices must be integers, not \'str\'\n\nrepos\\datefinder\\datefinder\\__init__.py:172: TypeError', 'input_text = \'19th day of May, 2015\'\nexpected_date = datetime.datetime(2015, 5, 19, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, strict=True):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(input_text) # handles dates\nE           AssertionError: Did not find date for test line: ""19th day of May, 2015""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:32: AssertionError']"
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The `tokenize_string` function aims to extract matches of a specific regex pattern from a given text. It iterates through the text, identifies matches, and groups them based on certain criteria. The function returns a list of tuples containing the extracted match, its group, and any additional captures associated with the match. This process allows for further composition of potential date strings from the extracted matches.",2,"def tokenize_string(self, text):
    import re
    
    pattern = r'(\d{2}/\d{2}/\d{4})'  # Match date strings in the format dd/mm/yyyy
    matches = re.findall(pattern, text)
    
    extracted_data = []
    for match in matches:
        extracted_data.append((match, 'date', None))
    
    return extracted_data","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","20 Passed, 34 Failed",20,34,"['tests/test_find_dates.py::test_find_date_strings[Tuesday Jul 22, 2014-expected_date0-month]', 'tests/test_find_dates.py::test_find_date_strings[December 13, 2014 at midnight-expected_date1-month]', 'tests/test_find_dates.py::test_find_date_strings[April 9, 2013 at 6:11 a.m.-expected_date2-month]', 'tests/test_find_dates.py::test_find_date_strings[Aug. 9, 2012 at 2:57 p.m.-expected_date3-month]', 'tests/test_find_dates.py::test_find_date_strings[December 10, 2014, 11:02:21 pm-expected_date4-month]', 'tests/test_find_dates.py::test_find_date_strings[8:25 a.m. Dec. 12, 2014-expected_date5-month]', 'tests/test_find_dates.py::test_find_date_strings[2:21 p.m., December 11, 2014-expected_date6-month]', 'tests/test_find_dates.py::test_find_date_strings[Fri, 12 Dec 2014 10:55:50-expected_date7-month]', 'tests/test_find_dates.py::test_find_date_strings[10:06am Dec 11, 2014-expected_date8-month]', 'tests/test_find_dates.py::test_find_date_strings[September 2nd, 1998-expected_date9-month]', 'tests/test_find_dates.py::test_find_date_strings[May 5, 2010 to July 10, 2011-expected_date10-month]', 'tests/test_find_dates.py::test_find_date_strings[06-17-2014-expected_date11-month]', 'tests/test_find_dates.py::test_find_date_strings[13/03/2014-expected_date12-month]', 'tests/test_find_dates.py::test_find_date_strings[2016-02-04T20:16:26+00:00-expected_date13-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z-expected_date14-month]', 'tests/test_find_dates.py::test_find_date_strings[i am looking for a date june 4th 1996 to july 3rd 2013-expected_date15-month]', 'tests/test_find_dates.py::test_find_date_strings[october 27 1994 to be put into effect on june 1 1995-expected_date16-month]', 'tests/test_find_dates.py::test_find_date_strings[31/08/2012 to 30/08/2013-expected_date17-month]', 'tests/test_find_dates.py::test_find_date_strings[31 Oct 2021 - 28 Nov 2021-expected_date18-day]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08.001Z-expected_date19-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08,00123Z-expected_date20-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08Z-expected_date21-month]', 'tests/test_find_dates.py::test_find_date_strings[Dutta is the recipient of Femina Miss India Universe title in 2004.-expected_date22-month]', 'tests/test_find_dates.py::test_find_date_strings[she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.-expected_date23-month]', 'tests/test_find_dates.py::test_find_date_strings[12th day of December, 2001-expected_date24-month]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date25-month]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date26-day]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date27-year]', 'tests/test_find_dates.py::test_find_date_strings[02/05/2020-expected_date28-month]', 'tests/test_find_dates.py::test_find_date_strings[02/05/2020-expected_date29-day]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[09/06/18-expected_date1]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[09/06/2018-expected_date2]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[recorded: 03/14/2008-expected_date3]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[19th day of May, 2015-expected_date4]']","['input_text = \'Tuesday Jul 22, 2014\'\nexpected_date = datetime.datetime(2014, 7, 22, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Tuesday Jul 22, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'December 13, 2014 at midnight\'\nexpected_date = datetime.datetime(2014, 12, 13, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""December 13, 2014 at midnight""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'April 9, 2013 at 6:11 a.m.\'\nexpected_date = datetime.datetime(2013, 4, 9, 6, 11), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""April 9, 2013 at 6:11 a.m.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'Aug. 9, 2012 at 2:57 p.m.\'\nexpected_date = datetime.datetime(2012, 8, 9, 14, 57), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Aug. 9, 2012 at 2:57 p.m.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'December 10, 2014, 11:02:21 pm\'\nexpected_date = datetime.datetime(2014, 12, 10, 23, 2, 21), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""December 10, 2014, 11:02:21 pm""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'8:25 a.m. Dec. 12, 2014\'\nexpected_date = datetime.datetime(2014, 12, 12, 8, 25), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""8:25 a.m. Dec. 12, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2:21 p.m., December 11, 2014\'\nexpected_date = datetime.datetime(2014, 12, 11, 14, 21), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2:21 p.m., December 11, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'Fri, 12 Dec 2014 10:55:50\'\nexpected_date = datetime.datetime(2014, 12, 12, 10, 55, 50), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Fri, 12 Dec 2014 10:55:50""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'10:06am Dec 11, 2014\'\nexpected_date = datetime.datetime(2014, 12, 11, 10, 6), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""10:06am Dec 11, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'September 2nd, 1998\'\nexpected_date = datetime.datetime(1998, 9, 2, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""September 2nd, 1998""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'May 5, 2010 to July 10, 2011\'\nexpected_date = [datetime.datetime(2010, 5, 5, 0, 0), datetime.datetime(2011, 7, 10, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat... 7, 10, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(2010, 5, 5, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(2010, 5, 5, 0, 0),\nE             -     datetime.datetime(2011, 7, 10, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'06-17-2014\', expected_date = datetime.datetime(2014, 6, 17, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""06-17-2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'13/03/2014\', expected_date = datetime.datetime(2014, 3, 13, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002B3F1AE5D90>\ntokens = [(\'13/03/2014\', \'date\', None)]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n>           for capt in tok_capts:\nE           TypeError: \'NoneType\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:168: TypeError', 'input_text = \'2016-02-04T20:16:26+00:00\'\nexpected_date = datetime.datetime(2016, 2, 4, 20, 16, 26, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2016-02-04T20:16:26+00:00""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z\'\nexpected_date = [datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>), datetime.datetime(2017, 2, 3, 9, 4, 9, tzinfo=<UTC>)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat...tzinfo=<UTC>)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>),\nE             -     datetime.datetime(2017, 2, 3, 9, 4, 9, tzinfo=<UTC>),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'i am looking for a date june 4th 1996 to july 3rd 2013\'\nexpected_date = [datetime.datetime(1996, 6, 4, 0, 0), datetime.datetime(2013, 7, 3, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat..., 7, 3, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(1996, 6, 4, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(1996, 6, 4, 0, 0),\nE             -     datetime.datetime(2013, 7, 3, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'october 27 1994 to be put into effect on june 1 1995\'\nexpected_date = [datetime.datetime(1994, 10, 27, 0, 0), datetime.datetime(1995, 6, 1, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat..., 6, 1, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(1994, 10, 27, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(1994, 10, 27, 0, 0),\nE             -     datetime.datetime(1995, 6, 1, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'31/08/2012 to 30/08/2013\'\nexpected_date = [datetime.datetime(2012, 8, 31, 0, 0), datetime.datetime(2013, 8, 30, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n>           matches = list(datefinder.find_dates(input_text, first=first))\n\nrepos\\datefinder\\tests\\test_find_dates.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:105: in extract_date_strings_inner\n    range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002B3F1AE51F0>\ntokens = [(\'31/08/2012\', \'date\', None)]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n>           for capt in tok_capts:\nE           TypeError: \'NoneType\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:168: TypeError', 'input_text = \'31 Oct 2021 - 28 Nov 2021\'\nexpected_date = [datetime.datetime(2021, 10, 31, 0, 0), datetime.datetime(2021, 11, 28, 0, 0)]\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat...11, 28, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(2021, 10, 31, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(2021, 10, 31, 0, 0),\nE             -     datetime.datetime(2021, 11, 28, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'2017-02-03T09:04:08.001Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2017-02-03T09:04:08.001Z""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2017-02-03T09:04:08,00123Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2017-02-03T09:04:08,00123Z""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2017-02-03T09:04:08Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2017-02-03T09:04:08Z""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'Dutta is the recipient of Femina Miss India Universe title in 2004.\'\nexpected_date = datetime.datetime(2004, 4, 14, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Dutta is the recipient of Femina Miss India Universe title in 2004.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\'\nexpected_date = datetime.datetime(2008, 4, 14, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'12th day of December, 2001\'\nexpected_date = datetime.datetime(2001, 12, 12, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""12th day of December, 2001""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2003, 1, 2, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""01/02/03""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2003, 2, 1, 0, 0)\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""01/02/03""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2001, 2, 3, 0, 0)\nfirst = \'year\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""01/02/03""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'02/05/2020\', expected_date = datetime.datetime(2020, 2, 5, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002B3F1AFAE10>\ntokens = [(\'02/05/2020\', \'date\', None)]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n>           for capt in tok_capts:\nE           TypeError: \'NoneType\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:168: TypeError', 'input_text = \'02/05/2020\', expected_date = datetime.datetime(2020, 5, 2, 0, 0)\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, first=first):\n\nrepos\\datefinder\\tests\\test_find_dates.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002B3F1AC5F10>\ntokens = [(\'02/05/2020\', \'date\', None)]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n>           for capt in tok_capts:\nE           TypeError: \'NoneType\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:168: TypeError', 'input_text = \'09/06/18\', expected_date = datetime.datetime(2018, 9, 6, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, strict=True):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(input_text) # handles dates\nE           AssertionError: Did not find date for test line: ""09/06/18""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:32: AssertionError', 'input_text = \'09/06/2018\', expected_date = datetime.datetime(2018, 9, 6, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, strict=True):\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002B3F1C38DD0>\ntokens = [(\'09/06/2018\', \'date\', None)]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n>           for capt in tok_capts:\nE           TypeError: \'NoneType\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:168: TypeError', 'input_text = \'recorded: 03/14/2008\'\nexpected_date = datetime.datetime(2008, 3, 14, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n>           for return_date in datefinder.find_dates(input_text, strict=True):\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\datefinder\\datefinder\\__init__.py:24: in find_dates\n    for date_string, indices, captures in self.extract_date_strings(text, strict=strict):\nrepos\\datefinder\\datefinder\\__init__.py:110: in extract_date_strings_inner\n    items = self.merge_tokens(tokens)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <datefinder.DateFinder object at 0x000002B3F1C398B0>\ntokens = [(\'03/14/2008\', \'date\', None)]\n\n    def merge_tokens(self, tokens):\n        """"""\n        Makes potential date strings out of matches, got from tokenize_string method.\n        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]\n        :return: potential date strings\n        """"""\n        MIN_MATCHES = 3\n        fragments = []\n        frag = DateFragment()\n        start_char, total_chars = (0, 0)\n        for token in tokens:\n            total_chars += len(token[0])\n            tok_text, group, tok_capts = (token[0], token[1], token[2])\n            if not group:\n                if frag.indices[1] > 0:\n                    if frag.get_captures_count() >= MIN_MATCHES:\n                        fragments.append(frag)\n                frag = DateFragment()\n                start_char = total_chars\n                continue\n            if frag.indices[1] == 0:\n                frag.indices = (start_char, total_chars)\n            else:\n                frag.indices = (frag.indices[0], total_chars)\n            frag.match_str += tok_text\n>           for capt in tok_capts:\nE           TypeError: \'NoneType\' object is not iterable\n\nrepos\\datefinder\\datefinder\\__init__.py:168: TypeError', 'input_text = \'19th day of May, 2015\'\nexpected_date = datetime.datetime(2015, 5, 19, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, strict=True):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(input_text) # handles dates\nE           AssertionError: Did not find date for test line: ""19th day of May, 2015""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:32: AssertionError']"
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The `tokenize_string` function aims to extract matches of a specific regex pattern from a given text. It iterates through the text, identifies matches, and groups them based on certain criteria. The function returns a list of tuples containing the extracted match, its group, and any additional captures associated with the match. This process allows for further composition of potential date strings from the extracted matches.",3,"def tokenize_string(self, text):
    import re

    regex_pattern = r'your_custom_regex_pattern_here'
    matches = re.finditer(regex_pattern, text)
    
    extracted_data = []
    for match in matches:
        extracted_data.append((match.group(0), match.group(1), match.group(2)))
    
    return extracted_data","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","20 Passed, 34 Failed",20,34,"['tests/test_find_dates.py::test_find_date_strings[Tuesday Jul 22, 2014-expected_date0-month]', 'tests/test_find_dates.py::test_find_date_strings[December 13, 2014 at midnight-expected_date1-month]', 'tests/test_find_dates.py::test_find_date_strings[April 9, 2013 at 6:11 a.m.-expected_date2-month]', 'tests/test_find_dates.py::test_find_date_strings[Aug. 9, 2012 at 2:57 p.m.-expected_date3-month]', 'tests/test_find_dates.py::test_find_date_strings[December 10, 2014, 11:02:21 pm-expected_date4-month]', 'tests/test_find_dates.py::test_find_date_strings[8:25 a.m. Dec. 12, 2014-expected_date5-month]', 'tests/test_find_dates.py::test_find_date_strings[2:21 p.m., December 11, 2014-expected_date6-month]', 'tests/test_find_dates.py::test_find_date_strings[Fri, 12 Dec 2014 10:55:50-expected_date7-month]', 'tests/test_find_dates.py::test_find_date_strings[10:06am Dec 11, 2014-expected_date8-month]', 'tests/test_find_dates.py::test_find_date_strings[September 2nd, 1998-expected_date9-month]', 'tests/test_find_dates.py::test_find_date_strings[May 5, 2010 to July 10, 2011-expected_date10-month]', 'tests/test_find_dates.py::test_find_date_strings[06-17-2014-expected_date11-month]', 'tests/test_find_dates.py::test_find_date_strings[13/03/2014-expected_date12-month]', 'tests/test_find_dates.py::test_find_date_strings[2016-02-04T20:16:26+00:00-expected_date13-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z-expected_date14-month]', 'tests/test_find_dates.py::test_find_date_strings[i am looking for a date june 4th 1996 to july 3rd 2013-expected_date15-month]', 'tests/test_find_dates.py::test_find_date_strings[october 27 1994 to be put into effect on june 1 1995-expected_date16-month]', 'tests/test_find_dates.py::test_find_date_strings[31/08/2012 to 30/08/2013-expected_date17-month]', 'tests/test_find_dates.py::test_find_date_strings[31 Oct 2021 - 28 Nov 2021-expected_date18-day]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08.001Z-expected_date19-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08,00123Z-expected_date20-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08Z-expected_date21-month]', 'tests/test_find_dates.py::test_find_date_strings[Dutta is the recipient of Femina Miss India Universe title in 2004.-expected_date22-month]', 'tests/test_find_dates.py::test_find_date_strings[she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.-expected_date23-month]', 'tests/test_find_dates.py::test_find_date_strings[12th day of December, 2001-expected_date24-month]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date25-month]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date26-day]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date27-year]', 'tests/test_find_dates.py::test_find_date_strings[02/05/2020-expected_date28-month]', 'tests/test_find_dates.py::test_find_date_strings[02/05/2020-expected_date29-day]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[09/06/18-expected_date1]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[09/06/2018-expected_date2]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[recorded: 03/14/2008-expected_date3]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[19th day of May, 2015-expected_date4]']","['input_text = \'Tuesday Jul 22, 2014\'\nexpected_date = datetime.datetime(2014, 7, 22, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Tuesday Jul 22, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'December 13, 2014 at midnight\'\nexpected_date = datetime.datetime(2014, 12, 13, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""December 13, 2014 at midnight""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'April 9, 2013 at 6:11 a.m.\'\nexpected_date = datetime.datetime(2013, 4, 9, 6, 11), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""April 9, 2013 at 6:11 a.m.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'Aug. 9, 2012 at 2:57 p.m.\'\nexpected_date = datetime.datetime(2012, 8, 9, 14, 57), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Aug. 9, 2012 at 2:57 p.m.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'December 10, 2014, 11:02:21 pm\'\nexpected_date = datetime.datetime(2014, 12, 10, 23, 2, 21), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""December 10, 2014, 11:02:21 pm""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'8:25 a.m. Dec. 12, 2014\'\nexpected_date = datetime.datetime(2014, 12, 12, 8, 25), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""8:25 a.m. Dec. 12, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2:21 p.m., December 11, 2014\'\nexpected_date = datetime.datetime(2014, 12, 11, 14, 21), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2:21 p.m., December 11, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'Fri, 12 Dec 2014 10:55:50\'\nexpected_date = datetime.datetime(2014, 12, 12, 10, 55, 50), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Fri, 12 Dec 2014 10:55:50""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'10:06am Dec 11, 2014\'\nexpected_date = datetime.datetime(2014, 12, 11, 10, 6), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""10:06am Dec 11, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'September 2nd, 1998\'\nexpected_date = datetime.datetime(1998, 9, 2, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""September 2nd, 1998""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'May 5, 2010 to July 10, 2011\'\nexpected_date = [datetime.datetime(2010, 5, 5, 0, 0), datetime.datetime(2011, 7, 10, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat... 7, 10, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(2010, 5, 5, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(2010, 5, 5, 0, 0),\nE             -     datetime.datetime(2011, 7, 10, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'06-17-2014\', expected_date = datetime.datetime(2014, 6, 17, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""06-17-2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'13/03/2014\', expected_date = datetime.datetime(2014, 3, 13, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""13/03/2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2016-02-04T20:16:26+00:00\'\nexpected_date = datetime.datetime(2016, 2, 4, 20, 16, 26, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2016-02-04T20:16:26+00:00""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z\'\nexpected_date = [datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>), datetime.datetime(2017, 2, 3, 9, 4, 9, tzinfo=<UTC>)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat...tzinfo=<UTC>)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>),\nE             -     datetime.datetime(2017, 2, 3, 9, 4, 9, tzinfo=<UTC>),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'i am looking for a date june 4th 1996 to july 3rd 2013\'\nexpected_date = [datetime.datetime(1996, 6, 4, 0, 0), datetime.datetime(2013, 7, 3, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat..., 7, 3, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(1996, 6, 4, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(1996, 6, 4, 0, 0),\nE             -     datetime.datetime(2013, 7, 3, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'october 27 1994 to be put into effect on june 1 1995\'\nexpected_date = [datetime.datetime(1994, 10, 27, 0, 0), datetime.datetime(1995, 6, 1, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat..., 6, 1, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(1994, 10, 27, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(1994, 10, 27, 0, 0),\nE             -     datetime.datetime(1995, 6, 1, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'31/08/2012 to 30/08/2013\'\nexpected_date = [datetime.datetime(2012, 8, 31, 0, 0), datetime.datetime(2013, 8, 30, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat... 8, 30, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(2012, 8, 31, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(2012, 8, 31, 0, 0),\nE             -     datetime.datetime(2013, 8, 30, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'31 Oct 2021 - 28 Nov 2021\'\nexpected_date = [datetime.datetime(2021, 10, 31, 0, 0), datetime.datetime(2021, 11, 28, 0, 0)]\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat...11, 28, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(2021, 10, 31, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(2021, 10, 31, 0, 0),\nE             -     datetime.datetime(2021, 11, 28, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'2017-02-03T09:04:08.001Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2017-02-03T09:04:08.001Z""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2017-02-03T09:04:08,00123Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2017-02-03T09:04:08,00123Z""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2017-02-03T09:04:08Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2017-02-03T09:04:08Z""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'Dutta is the recipient of Femina Miss India Universe title in 2004.\'\nexpected_date = datetime.datetime(2004, 4, 14, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Dutta is the recipient of Femina Miss India Universe title in 2004.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\'\nexpected_date = datetime.datetime(2008, 4, 14, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'12th day of December, 2001\'\nexpected_date = datetime.datetime(2001, 12, 12, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""12th day of December, 2001""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2003, 1, 2, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""01/02/03""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2003, 2, 1, 0, 0)\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""01/02/03""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2001, 2, 3, 0, 0)\nfirst = \'year\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""01/02/03""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'02/05/2020\', expected_date = datetime.datetime(2020, 2, 5, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""02/05/2020""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'02/05/2020\', expected_date = datetime.datetime(2020, 5, 2, 0, 0)\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""02/05/2020""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'09/06/18\', expected_date = datetime.datetime(2018, 9, 6, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, strict=True):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(input_text) # handles dates\nE           AssertionError: Did not find date for test line: ""09/06/18""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:32: AssertionError', 'input_text = \'09/06/2018\', expected_date = datetime.datetime(2018, 9, 6, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, strict=True):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(input_text) # handles dates\nE           AssertionError: Did not find date for test line: ""09/06/2018""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:32: AssertionError', 'input_text = \'recorded: 03/14/2008\'\nexpected_date = datetime.datetime(2008, 3, 14, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, strict=True):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(input_text) # handles dates\nE           AssertionError: Did not find date for test line: ""recorded: 03/14/2008""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:32: AssertionError', 'input_text = \'19th day of May, 2015\'\nexpected_date = datetime.datetime(2015, 5, 19, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, strict=True):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(input_text) # handles dates\nE           AssertionError: Did not find date for test line: ""19th day of May, 2015""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:32: AssertionError']"
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
        Makes potential date strings out of matches, got from tokenize_string method.
        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]
        :return: potential date strings
        """"""
    MIN_MATCHES = 3
    fragments = []
    frag = DateFragment()
    start_char, total_chars = (0, 0)
    for token in tokens:
        total_chars += len(token[0])
        tok_text, group, tok_capts = (token[0], token[1], token[2])
        if not group:
            if frag.indices[1] > 0:
                if frag.get_captures_count() >= MIN_MATCHES:
                    fragments.append(frag)
            frag = DateFragment()
            start_char = total_chars
            continue
        if frag.indices[1] == 0:
            frag.indices = (start_char, total_chars)
        else:
            frag.indices = (frag.indices[0], total_chars)
        frag.match_str += tok_text
        for capt in tok_capts:
            if capt in frag.captures:
                frag.captures[capt] += tok_capts[capt]
            else:
                frag.captures[capt] = tok_capts[capt]
        start_char = total_chars
    if frag.get_captures_count() >= MIN_MATCHES:
        fragments.append(frag)
    for frag in fragments:
        for gr in ALL_GROUPS:
            if gr not in frag.captures:
                frag.captures[gr] = []
    return fragments","The goal of the `merge_tokens` function is to combine tokenized matches into potential date strings. It processes a list of tokens and merges them based on certain criteria, such as the number of matches and their respective capture groups. The function creates DateFragment objects to store the merged information and returns a list of these potential date strings. 

If this function is part of a class, it interacts with the class context by using class attributes or calling other methods within the class to handle date-related operations.",1,"def merge_tokens(self, tokens):
    merged_dates = []

    # Logic to merge tokens into potential date strings

    return merged_dates","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","20 Passed, 34 Failed",20,34,"['tests/test_find_dates.py::test_find_date_strings[Tuesday Jul 22, 2014-expected_date0-month]', 'tests/test_find_dates.py::test_find_date_strings[December 13, 2014 at midnight-expected_date1-month]', 'tests/test_find_dates.py::test_find_date_strings[April 9, 2013 at 6:11 a.m.-expected_date2-month]', 'tests/test_find_dates.py::test_find_date_strings[Aug. 9, 2012 at 2:57 p.m.-expected_date3-month]', 'tests/test_find_dates.py::test_find_date_strings[December 10, 2014, 11:02:21 pm-expected_date4-month]', 'tests/test_find_dates.py::test_find_date_strings[8:25 a.m. Dec. 12, 2014-expected_date5-month]', 'tests/test_find_dates.py::test_find_date_strings[2:21 p.m., December 11, 2014-expected_date6-month]', 'tests/test_find_dates.py::test_find_date_strings[Fri, 12 Dec 2014 10:55:50-expected_date7-month]', 'tests/test_find_dates.py::test_find_date_strings[10:06am Dec 11, 2014-expected_date8-month]', 'tests/test_find_dates.py::test_find_date_strings[September 2nd, 1998-expected_date9-month]', 'tests/test_find_dates.py::test_find_date_strings[May 5, 2010 to July 10, 2011-expected_date10-month]', 'tests/test_find_dates.py::test_find_date_strings[06-17-2014-expected_date11-month]', 'tests/test_find_dates.py::test_find_date_strings[13/03/2014-expected_date12-month]', 'tests/test_find_dates.py::test_find_date_strings[2016-02-04T20:16:26+00:00-expected_date13-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z-expected_date14-month]', 'tests/test_find_dates.py::test_find_date_strings[i am looking for a date june 4th 1996 to july 3rd 2013-expected_date15-month]', 'tests/test_find_dates.py::test_find_date_strings[october 27 1994 to be put into effect on june 1 1995-expected_date16-month]', 'tests/test_find_dates.py::test_find_date_strings[31/08/2012 to 30/08/2013-expected_date17-month]', 'tests/test_find_dates.py::test_find_date_strings[31 Oct 2021 - 28 Nov 2021-expected_date18-day]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08.001Z-expected_date19-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08,00123Z-expected_date20-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08Z-expected_date21-month]', 'tests/test_find_dates.py::test_find_date_strings[Dutta is the recipient of Femina Miss India Universe title in 2004.-expected_date22-month]', 'tests/test_find_dates.py::test_find_date_strings[she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.-expected_date23-month]', 'tests/test_find_dates.py::test_find_date_strings[12th day of December, 2001-expected_date24-month]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date25-month]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date26-day]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date27-year]', 'tests/test_find_dates.py::test_find_date_strings[02/05/2020-expected_date28-month]', 'tests/test_find_dates.py::test_find_date_strings[02/05/2020-expected_date29-day]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[09/06/18-expected_date1]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[09/06/2018-expected_date2]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[recorded: 03/14/2008-expected_date3]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[19th day of May, 2015-expected_date4]']","['input_text = \'Tuesday Jul 22, 2014\'\nexpected_date = datetime.datetime(2014, 7, 22, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Tuesday Jul 22, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'December 13, 2014 at midnight\'\nexpected_date = datetime.datetime(2014, 12, 13, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""December 13, 2014 at midnight""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'April 9, 2013 at 6:11 a.m.\'\nexpected_date = datetime.datetime(2013, 4, 9, 6, 11), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""April 9, 2013 at 6:11 a.m.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'Aug. 9, 2012 at 2:57 p.m.\'\nexpected_date = datetime.datetime(2012, 8, 9, 14, 57), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Aug. 9, 2012 at 2:57 p.m.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'December 10, 2014, 11:02:21 pm\'\nexpected_date = datetime.datetime(2014, 12, 10, 23, 2, 21), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""December 10, 2014, 11:02:21 pm""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'8:25 a.m. Dec. 12, 2014\'\nexpected_date = datetime.datetime(2014, 12, 12, 8, 25), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""8:25 a.m. Dec. 12, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2:21 p.m., December 11, 2014\'\nexpected_date = datetime.datetime(2014, 12, 11, 14, 21), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2:21 p.m., December 11, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'Fri, 12 Dec 2014 10:55:50\'\nexpected_date = datetime.datetime(2014, 12, 12, 10, 55, 50), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Fri, 12 Dec 2014 10:55:50""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'10:06am Dec 11, 2014\'\nexpected_date = datetime.datetime(2014, 12, 11, 10, 6), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""10:06am Dec 11, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'September 2nd, 1998\'\nexpected_date = datetime.datetime(1998, 9, 2, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""September 2nd, 1998""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'May 5, 2010 to July 10, 2011\'\nexpected_date = [datetime.datetime(2010, 5, 5, 0, 0), datetime.datetime(2011, 7, 10, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat... 7, 10, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(2010, 5, 5, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(2010, 5, 5, 0, 0),\nE             -     datetime.datetime(2011, 7, 10, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'06-17-2014\', expected_date = datetime.datetime(2014, 6, 17, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""06-17-2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'13/03/2014\', expected_date = datetime.datetime(2014, 3, 13, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""13/03/2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2016-02-04T20:16:26+00:00\'\nexpected_date = datetime.datetime(2016, 2, 4, 20, 16, 26, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2016-02-04T20:16:26+00:00""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z\'\nexpected_date = [datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>), datetime.datetime(2017, 2, 3, 9, 4, 9, tzinfo=<UTC>)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat...tzinfo=<UTC>)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>),\nE             -     datetime.datetime(2017, 2, 3, 9, 4, 9, tzinfo=<UTC>),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'i am looking for a date june 4th 1996 to july 3rd 2013\'\nexpected_date = [datetime.datetime(1996, 6, 4, 0, 0), datetime.datetime(2013, 7, 3, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat..., 7, 3, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(1996, 6, 4, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(1996, 6, 4, 0, 0),\nE             -     datetime.datetime(2013, 7, 3, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'october 27 1994 to be put into effect on june 1 1995\'\nexpected_date = [datetime.datetime(1994, 10, 27, 0, 0), datetime.datetime(1995, 6, 1, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat..., 6, 1, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(1994, 10, 27, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(1994, 10, 27, 0, 0),\nE             -     datetime.datetime(1995, 6, 1, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'31/08/2012 to 30/08/2013\'\nexpected_date = [datetime.datetime(2012, 8, 31, 0, 0), datetime.datetime(2013, 8, 30, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat... 8, 30, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(2012, 8, 31, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(2012, 8, 31, 0, 0),\nE             -     datetime.datetime(2013, 8, 30, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'31 Oct 2021 - 28 Nov 2021\'\nexpected_date = [datetime.datetime(2021, 10, 31, 0, 0), datetime.datetime(2021, 11, 28, 0, 0)]\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat...11, 28, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(2021, 10, 31, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(2021, 10, 31, 0, 0),\nE             -     datetime.datetime(2021, 11, 28, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'2017-02-03T09:04:08.001Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2017-02-03T09:04:08.001Z""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2017-02-03T09:04:08,00123Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2017-02-03T09:04:08,00123Z""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2017-02-03T09:04:08Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2017-02-03T09:04:08Z""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'Dutta is the recipient of Femina Miss India Universe title in 2004.\'\nexpected_date = datetime.datetime(2004, 4, 14, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Dutta is the recipient of Femina Miss India Universe title in 2004.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\'\nexpected_date = datetime.datetime(2008, 4, 14, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'12th day of December, 2001\'\nexpected_date = datetime.datetime(2001, 12, 12, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""12th day of December, 2001""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2003, 1, 2, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""01/02/03""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2003, 2, 1, 0, 0)\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""01/02/03""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2001, 2, 3, 0, 0)\nfirst = \'year\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""01/02/03""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'02/05/2020\', expected_date = datetime.datetime(2020, 2, 5, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""02/05/2020""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'02/05/2020\', expected_date = datetime.datetime(2020, 5, 2, 0, 0)\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""02/05/2020""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'09/06/18\', expected_date = datetime.datetime(2018, 9, 6, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, strict=True):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(input_text) # handles dates\nE           AssertionError: Did not find date for test line: ""09/06/18""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:32: AssertionError', 'input_text = \'09/06/2018\', expected_date = datetime.datetime(2018, 9, 6, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, strict=True):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(input_text) # handles dates\nE           AssertionError: Did not find date for test line: ""09/06/2018""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:32: AssertionError', 'input_text = \'recorded: 03/14/2008\'\nexpected_date = datetime.datetime(2008, 3, 14, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, strict=True):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(input_text) # handles dates\nE           AssertionError: Did not find date for test line: ""recorded: 03/14/2008""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:32: AssertionError', 'input_text = \'19th day of May, 2015\'\nexpected_date = datetime.datetime(2015, 5, 19, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, strict=True):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(input_text) # handles dates\nE           AssertionError: Did not find date for test line: ""19th day of May, 2015""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:32: AssertionError']"
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
        Makes potential date strings out of matches, got from tokenize_string method.
        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]
        :return: potential date strings
        """"""
    MIN_MATCHES = 3
    fragments = []
    frag = DateFragment()
    start_char, total_chars = (0, 0)
    for token in tokens:
        total_chars += len(token[0])
        tok_text, group, tok_capts = (token[0], token[1], token[2])
        if not group:
            if frag.indices[1] > 0:
                if frag.get_captures_count() >= MIN_MATCHES:
                    fragments.append(frag)
            frag = DateFragment()
            start_char = total_chars
            continue
        if frag.indices[1] == 0:
            frag.indices = (start_char, total_chars)
        else:
            frag.indices = (frag.indices[0], total_chars)
        frag.match_str += tok_text
        for capt in tok_capts:
            if capt in frag.captures:
                frag.captures[capt] += tok_capts[capt]
            else:
                frag.captures[capt] = tok_capts[capt]
        start_char = total_chars
    if frag.get_captures_count() >= MIN_MATCHES:
        fragments.append(frag)
    for frag in fragments:
        for gr in ALL_GROUPS:
            if gr not in frag.captures:
                frag.captures[gr] = []
    return fragments","The goal of the `merge_tokens` function is to combine tokenized matches into potential date strings. It processes a list of tokens and merges them based on certain criteria, such as the number of matches and their respective capture groups. The function creates DateFragment objects to store the merged information and returns a list of these potential date strings. 

If this function is part of a class, it interacts with the class context by using class attributes or calling other methods within the class to handle date-related operations.",2,Invalid Syntax / No valid code,N/A,Failed,[],[],0,0
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
        Makes potential date strings out of matches, got from tokenize_string method.
        :param tokens: [(match_text, match_group, {match.capturesdict()}), ...]
        :return: potential date strings
        """"""
    MIN_MATCHES = 3
    fragments = []
    frag = DateFragment()
    start_char, total_chars = (0, 0)
    for token in tokens:
        total_chars += len(token[0])
        tok_text, group, tok_capts = (token[0], token[1], token[2])
        if not group:
            if frag.indices[1] > 0:
                if frag.get_captures_count() >= MIN_MATCHES:
                    fragments.append(frag)
            frag = DateFragment()
            start_char = total_chars
            continue
        if frag.indices[1] == 0:
            frag.indices = (start_char, total_chars)
        else:
            frag.indices = (frag.indices[0], total_chars)
        frag.match_str += tok_text
        for capt in tok_capts:
            if capt in frag.captures:
                frag.captures[capt] += tok_capts[capt]
            else:
                frag.captures[capt] = tok_capts[capt]
        start_char = total_chars
    if frag.get_captures_count() >= MIN_MATCHES:
        fragments.append(frag)
    for frag in fragments:
        for gr in ALL_GROUPS:
            if gr not in frag.captures:
                frag.captures[gr] = []
    return fragments","The goal of the `merge_tokens` function is to combine tokenized matches into potential date strings. It processes a list of tokens and merges them based on certain criteria, such as the number of matches and their respective capture groups. The function creates DateFragment objects to store the merged information and returns a list of these potential date strings. 

If this function is part of a class, it interacts with the class context by using class attributes or calling other methods within the class to handle date-related operations.",3,"def merge_tokens(self, tokens):
        merged_dates = []
        # Logic to merge tokens into potential date strings
        return merged_dates","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","20 Passed, 34 Failed",20,34,"['tests/test_find_dates.py::test_find_date_strings[Tuesday Jul 22, 2014-expected_date0-month]', 'tests/test_find_dates.py::test_find_date_strings[December 13, 2014 at midnight-expected_date1-month]', 'tests/test_find_dates.py::test_find_date_strings[April 9, 2013 at 6:11 a.m.-expected_date2-month]', 'tests/test_find_dates.py::test_find_date_strings[Aug. 9, 2012 at 2:57 p.m.-expected_date3-month]', 'tests/test_find_dates.py::test_find_date_strings[December 10, 2014, 11:02:21 pm-expected_date4-month]', 'tests/test_find_dates.py::test_find_date_strings[8:25 a.m. Dec. 12, 2014-expected_date5-month]', 'tests/test_find_dates.py::test_find_date_strings[2:21 p.m., December 11, 2014-expected_date6-month]', 'tests/test_find_dates.py::test_find_date_strings[Fri, 12 Dec 2014 10:55:50-expected_date7-month]', 'tests/test_find_dates.py::test_find_date_strings[10:06am Dec 11, 2014-expected_date8-month]', 'tests/test_find_dates.py::test_find_date_strings[September 2nd, 1998-expected_date9-month]', 'tests/test_find_dates.py::test_find_date_strings[May 5, 2010 to July 10, 2011-expected_date10-month]', 'tests/test_find_dates.py::test_find_date_strings[06-17-2014-expected_date11-month]', 'tests/test_find_dates.py::test_find_date_strings[13/03/2014-expected_date12-month]', 'tests/test_find_dates.py::test_find_date_strings[2016-02-04T20:16:26+00:00-expected_date13-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z-expected_date14-month]', 'tests/test_find_dates.py::test_find_date_strings[i am looking for a date june 4th 1996 to july 3rd 2013-expected_date15-month]', 'tests/test_find_dates.py::test_find_date_strings[october 27 1994 to be put into effect on june 1 1995-expected_date16-month]', 'tests/test_find_dates.py::test_find_date_strings[31/08/2012 to 30/08/2013-expected_date17-month]', 'tests/test_find_dates.py::test_find_date_strings[31 Oct 2021 - 28 Nov 2021-expected_date18-day]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08.001Z-expected_date19-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08,00123Z-expected_date20-month]', 'tests/test_find_dates.py::test_find_date_strings[2017-02-03T09:04:08Z-expected_date21-month]', 'tests/test_find_dates.py::test_find_date_strings[Dutta is the recipient of Femina Miss India Universe title in 2004.-expected_date22-month]', 'tests/test_find_dates.py::test_find_date_strings[she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.-expected_date23-month]', 'tests/test_find_dates.py::test_find_date_strings[12th day of December, 2001-expected_date24-month]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date25-month]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date26-day]', 'tests/test_find_dates.py::test_find_date_strings[01/02/03-expected_date27-year]', 'tests/test_find_dates.py::test_find_date_strings[02/05/2020-expected_date28-month]', 'tests/test_find_dates.py::test_find_date_strings[02/05/2020-expected_date29-day]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[09/06/18-expected_date1]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[09/06/2018-expected_date2]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[recorded: 03/14/2008-expected_date3]', 'tests/test_find_dates_strict.py::test_find_date_strings_strict[19th day of May, 2015-expected_date4]']","['input_text = \'Tuesday Jul 22, 2014\'\nexpected_date = datetime.datetime(2014, 7, 22, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Tuesday Jul 22, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'December 13, 2014 at midnight\'\nexpected_date = datetime.datetime(2014, 12, 13, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""December 13, 2014 at midnight""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'April 9, 2013 at 6:11 a.m.\'\nexpected_date = datetime.datetime(2013, 4, 9, 6, 11), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""April 9, 2013 at 6:11 a.m.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'Aug. 9, 2012 at 2:57 p.m.\'\nexpected_date = datetime.datetime(2012, 8, 9, 14, 57), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Aug. 9, 2012 at 2:57 p.m.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'December 10, 2014, 11:02:21 pm\'\nexpected_date = datetime.datetime(2014, 12, 10, 23, 2, 21), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""December 10, 2014, 11:02:21 pm""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'8:25 a.m. Dec. 12, 2014\'\nexpected_date = datetime.datetime(2014, 12, 12, 8, 25), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""8:25 a.m. Dec. 12, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2:21 p.m., December 11, 2014\'\nexpected_date = datetime.datetime(2014, 12, 11, 14, 21), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2:21 p.m., December 11, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'Fri, 12 Dec 2014 10:55:50\'\nexpected_date = datetime.datetime(2014, 12, 12, 10, 55, 50), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Fri, 12 Dec 2014 10:55:50""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'10:06am Dec 11, 2014\'\nexpected_date = datetime.datetime(2014, 12, 11, 10, 6), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""10:06am Dec 11, 2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'September 2nd, 1998\'\nexpected_date = datetime.datetime(1998, 9, 2, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""September 2nd, 1998""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'May 5, 2010 to July 10, 2011\'\nexpected_date = [datetime.datetime(2010, 5, 5, 0, 0), datetime.datetime(2011, 7, 10, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat... 7, 10, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(2010, 5, 5, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(2010, 5, 5, 0, 0),\nE             -     datetime.datetime(2011, 7, 10, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'06-17-2014\', expected_date = datetime.datetime(2014, 6, 17, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""06-17-2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'13/03/2014\', expected_date = datetime.datetime(2014, 3, 13, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""13/03/2014""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2016-02-04T20:16:26+00:00\'\nexpected_date = datetime.datetime(2016, 2, 4, 20, 16, 26, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2016-02-04T20:16:26+00:00""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z\'\nexpected_date = [datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>), datetime.datetime(2017, 2, 3, 9, 4, 9, tzinfo=<UTC>)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat...tzinfo=<UTC>)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>),\nE             -     datetime.datetime(2017, 2, 3, 9, 4, 9, tzinfo=<UTC>),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'i am looking for a date june 4th 1996 to july 3rd 2013\'\nexpected_date = [datetime.datetime(1996, 6, 4, 0, 0), datetime.datetime(2013, 7, 3, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat..., 7, 3, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(1996, 6, 4, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(1996, 6, 4, 0, 0),\nE             -     datetime.datetime(2013, 7, 3, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'october 27 1994 to be put into effect on june 1 1995\'\nexpected_date = [datetime.datetime(1994, 10, 27, 0, 0), datetime.datetime(1995, 6, 1, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat..., 6, 1, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(1994, 10, 27, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(1994, 10, 27, 0, 0),\nE             -     datetime.datetime(1995, 6, 1, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'31/08/2012 to 30/08/2013\'\nexpected_date = [datetime.datetime(2012, 8, 31, 0, 0), datetime.datetime(2013, 8, 30, 0, 0)]\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat... 8, 30, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(2012, 8, 31, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(2012, 8, 31, 0, 0),\nE             -     datetime.datetime(2013, 8, 30, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'31 Oct 2021 - 28 Nov 2021\'\nexpected_date = [datetime.datetime(2021, 10, 31, 0, 0), datetime.datetime(2021, 11, 28, 0, 0)]\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n>           assert matches == expected_date\nE           assert [] == [datetime.dat...11, 28, 0, 0)]\nE             \nE             Right contains 2 more items, first extra item: datetime.datetime(2021, 10, 31, 0, 0)\nE             \nE             Full diff:\nE             + []\nE             - [\nE             -     datetime.datetime(2021, 10, 31, 0, 0),\nE             -     datetime.datetime(2021, 11, 28, 0, 0),\nE             - ]\n\nrepos\\datefinder\\tests\\test_find_dates.py:119: AssertionError', 'input_text = \'2017-02-03T09:04:08.001Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2017-02-03T09:04:08.001Z""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2017-02-03T09:04:08,00123Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2017-02-03T09:04:08,00123Z""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'2017-02-03T09:04:08Z\'\nexpected_date = datetime.datetime(2017, 2, 3, 9, 4, 8, tzinfo=<UTC>)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""2017-02-03T09:04:08Z""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'Dutta is the recipient of Femina Miss India Universe title in 2004.\'\nexpected_date = datetime.datetime(2004, 4, 14, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""Dutta is the recipient of Femina Miss India Universe title in 2004.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\'\nexpected_date = datetime.datetime(2008, 4, 14, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'12th day of December, 2001\'\nexpected_date = datetime.datetime(2001, 12, 12, 0, 0), first = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""12th day of December, 2001""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2003, 1, 2, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""01/02/03""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2003, 2, 1, 0, 0)\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""01/02/03""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'01/02/03\', expected_date = datetime.datetime(2001, 2, 3, 0, 0)\nfirst = \'year\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""01/02/03""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'02/05/2020\', expected_date = datetime.datetime(2020, 2, 5, 0, 0)\nfirst = \'month\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""02/05/2020""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'02/05/2020\', expected_date = datetime.datetime(2020, 5, 2, 0, 0)\nfirst = \'day\'\n\n    @pytest.mark.parametrize(\n        (""input_text"", ""expected_date"", ""first""),\n        [\n            ## English Dates\n            # (\'[Sept] 04, 2014.\', datetime(2014, 9, 4), ""month""),\n            (""Tuesday Jul 22, 2014"", datetime(2014, 7, 22), ""month""),\n            # (\'10:04am EDT\', datetime(2012, 11, 13, 14, 4), ""month""),\n            # (\'Friday\', datetime(2012, 11, 9), ""month""),\n            # (\'November 19, 2014 at noon\', datetime(2014, 11, 19, 12, 0), ""month""),\n            (""December 13, 2014 at midnight"", datetime(2014, 12, 13, 0, 0), ""month""),\n            # (\'Nov 25 2014 10:17 pm EST\', datetime(2014, 11, 26, 3, 17), ""month""),\n            # (\'Wed Aug 05 12:00:00 EDT 2015\', datetime(2015, 8, 5, 16, 0), ""month""),\n            (""April 9, 2013 at 6:11 a.m."", datetime(2013, 4, 9, 6, 11), ""month""),\n            (""Aug. 9, 2012 at 2:57 p.m."", datetime(2012, 8, 9, 14, 57), ""month""),\n            (""December 10, 2014, 11:02:21 pm"", datetime(2014, 12, 10, 23, 2, 21), ""month""),\n            (""8:25 a.m. Dec. 12, 2014"", datetime(2014, 12, 12, 8, 25), ""month""),\n            (""2:21 p.m., December 11, 2014"", datetime(2014, 12, 11, 14, 21), ""month""),\n            (""Fri, 12 Dec 2014 10:55:50"", datetime(2014, 12, 12, 10, 55, 50), ""month""),\n            # (\'20 Mar 2013 10h11\', datetime(2013, 3, 20, 10, 11), ""month""),\n            (""10:06am Dec 11, 2014"", datetime(2014, 12, 11, 10, 6), ""month""),\n            (""September 2nd, 1998"", datetime(1998, 9, 2), ""month""),\n            (\n                ""May 5, 2010 to July 10, 2011"",\n                [datetime(2010, 5, 5), datetime(2011, 7, 10)],\n                ""month"",\n            ),\n            # (\'19 February 2013 year 09:10\', datetime(2013, 2, 19, 9, 10), ""month""),\n            # Numeric dates\n            (""06-17-2014"", datetime(2014, 6, 17), ""month""),\n            (""13/03/2014"", datetime(2014, 3, 13), ""month""),\n            (\n                ""2016-02-04T20:16:26+00:00"",\n                datetime(2016, 2, 4, 20, 16, 26, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # (\'11. 12. 2014, 08:45:39\', datetime(2014, 11, 12, 8, 45, 39)),\n            (\n                ""2017-02-03T09:04:08Z to 2017-02-03T09:04:09Z"",\n                [\n                    datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                    datetime(2017, 2, 3, 9, 4, 9, tzinfo=pytz.utc),\n                ],\n                ""month"",\n            ),\n            # dates from issue https://github.com/akoumjian/datefinder/issues/14\n            (\n                ""i am looking for a date june 4th 1996 to july 3rd 2013"",\n                [datetime(1996, 6, 4), datetime(2013, 7, 3)],\n                ""month"",\n            ),\n            (\n                ""october 27 1994 to be put into effect on june 1 1995"",\n                [datetime(1994, 10, 27), datetime(1995, 6, 1)],\n                ""month"",\n            ),\n            # Simple date range\n            (\n                ""31/08/2012 to 30/08/2013"",\n                [datetime(2012, 8, 31), datetime(2013, 8, 30)],\n                ""month"",\n            ),\n            (\n                ""31 Oct 2021 - 28 Nov 2021"",\n                [datetime(2021, 10, 31), datetime(2021, 11, 28)],\n                ""day""\n            ),\n            # Z dates with and without millis, from https://github.com/akoumjian/datefinder/issues/37\n            (\n                ""2017-02-03T09:04:08.001Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1000, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08,00123Z"",\n                datetime(2017, 2, 3, 9, 4, 8, 1230, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            (\n                ""2017-02-03T09:04:08Z"",\n                datetime(2017, 2, 3, 9, 4, 8, tzinfo=pytz.utc),\n                ""month"",\n            ),\n            # Year only strings, from https://github.com/akoumjian/datefinder/issues/96\n            (\n                ""Dutta is the recipient of Femina Miss India Universe title in 2004."",\n                datetime(2004, today.month, today.day),\n                ""month"",\n            ),\n            (\n                \'she said that she hit depression after being traumatized on the sets of ""Horn OK"" in 2008.\',\n                datetime(2008, today.month, today.day),\n                ""month"",\n            ),\n            # https://github.com/akoumjian/datefinder/issues/63\n            (""12th day of December, 2001"", datetime(2001, 12, 12), ""month""),\n            (""01/02/03"", datetime(2003, 1, 2, 0, 0, 0, 0), ""month""),\n            (""01/02/03"", datetime(2003, 2, 1, 0, 0, 0, 0), ""day""),\n            (""01/02/03"", datetime(2001, 2, 3, 0, 0, 0, 0), ""year""),\n            (""02/05/2020"", datetime(2020, 2, 5, 0, 0, 0, 0), ""month""),\n            (""02/05/2020"", datetime(2020, 5, 2, 0, 0, 0, 0), ""day""),\n        ],\n    )\n    def test_find_date_strings(input_text, expected_date, first):\n        if isinstance(expected_date, list):\n            matches = list(datefinder.find_dates(input_text, first=first))\n            assert matches == expected_date\n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, first=first):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(\n                input_text\n            )  # handles dates that were never matched\nE           AssertionError: Did not find date for test line: ""02/05/2020""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates.py:124: AssertionError', 'input_text = \'09/06/18\', expected_date = datetime.datetime(2018, 9, 6, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, strict=True):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(input_text) # handles dates\nE           AssertionError: Did not find date for test line: ""09/06/18""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:32: AssertionError', 'input_text = \'09/06/2018\', expected_date = datetime.datetime(2018, 9, 6, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, strict=True):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(input_text) # handles dates\nE           AssertionError: Did not find date for test line: ""09/06/2018""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:32: AssertionError', 'input_text = \'recorded: 03/14/2008\'\nexpected_date = datetime.datetime(2008, 3, 14, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, strict=True):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(input_text) # handles dates\nE           AssertionError: Did not find date for test line: ""recorded: 03/14/2008""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:32: AssertionError', 'input_text = \'19th day of May, 2015\'\nexpected_date = datetime.datetime(2015, 5, 19, 0, 0)\n\n    @pytest.mark.parametrize(\'input_text, expected_date\', [\n    \n        (\'June 2018\', []),\n        (\'09/06/18\',  datetime(2018, 9, 6)),\n        (\'09/06/2018\', datetime(2018, 9, 6)),\n        (\'recorded: 03/14/2008\', datetime(2008, 3, 14)),\n        (\'19th day of May, 2015\', datetime(2015, 5, 19)),\n        (\'19th day of May\', [])\n    \n    ])\n    def test_find_date_strings_strict(input_text, expected_date):\n        if isinstance(expected_date,list):\n            matches = list(datefinder.find_dates(input_text, strict=True))\n            assert matches == expected_date\n    \n        else:\n            return_date = None\n            for return_date in datefinder.find_dates(input_text, strict=True):\n                assert return_date == expected_date\n>           assert return_date is not None, \'Did not find date for test line: ""{}""\'.format(input_text) # handles dates\nE           AssertionError: Did not find date for test line: ""19th day of May, 2015""\nE           assert None is not None\n\nrepos\\datefinder\\tests\\test_find_dates_strict.py:32: AssertionError']"
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the function is to find and replace specific patterns in a given date string based on a set of predefined replacements. It also handles timezones by updating the replacements for timezone strings found in the captures. The function then returns the modified date string and a timezone string if present. If it is a class method, it likely interacts with the class context by using class attributes or other methods to access necessary information for the replacements and timezones.",1,"def _find_and_replace(self, date_string, captures):
    updated_date_string = date_string
    timezone = None
    
    for key, value in captures.items():
        updated_date_string = updated_date_string.replace(key, value)
        
        if key == ""timezone"":
            timezone = value
            
    return updated_date_string, timezone","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the function is to find and replace specific patterns in a given date string based on a set of predefined replacements. It also handles timezones by updating the replacements for timezone strings found in the captures. The function then returns the modified date string and a timezone string if present. If it is a class method, it likely interacts with the class context by using class attributes or other methods to access necessary information for the replacements and timezones.",2,"def _find_and_replace(self, date_string, captures):
    new_date_string = date_string.replace(""pattern1"", ""replacement1"").replace(""pattern2"", ""replacement2"")
    
    if ""timezone"" in captures:
        timezone = captures[""timezone""]
        if timezone == ""timezone1"":
            new_date_string = new_date_string.replace(""pattern3"", ""replacement3"")
        elif timezone == ""timezone2"":
            new_date_string = new_date_string.replace(""pattern4"", ""replacement4"")
    
    return new_date_string, timezone if ""timezone"" in captures else None","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the function is to find and replace specific patterns in a given date string based on a set of predefined replacements. It also handles timezones by updating the replacements for timezone strings found in the captures. The function then returns the modified date string and a timezone string if present. If it is a class method, it likely interacts with the class context by using class attributes or other methods to access necessary information for the replacements and timezones.",3,"def _find_and_replace(self, date_string, captures):
    updated_date_string = date_string
    timezone = None
    
    for pattern, replacement in captures.items():
        updated_date_string = updated_date_string.replace(pattern, replacement)
        
        if 'timezone' in pattern:
            timezone = replacement
    
    return updated_date_string, timezone","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","The goal of the function is to take a naive datetime object and add a timezone information (tzinfo) to it using the dateutil library. This function is useful for converting a datetime object without timezone information to one with a specific timezone.

If this function is inside a class, it could be used as a method to modify the datetime objects stored in the class attributes with the specified timezone. The function interacts with the class context by accessing the datetime object using the self parameter, and potentially updating the datetime object with the timezone information.",1,"def _add_tzinfo(self, datetime_obj, tz_string):
    from dateutil import tz
    
    timezone = tz.gettz(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=timezone)
    
    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","The goal of the function is to take a naive datetime object and add a timezone information (tzinfo) to it using the dateutil library. This function is useful for converting a datetime object without timezone information to one with a specific timezone.

If this function is inside a class, it could be used as a method to modify the datetime objects stored in the class attributes with the specified timezone. The function interacts with the class context by accessing the datetime object using the self parameter, and potentially updating the datetime object with the timezone information.",2,"def _add_tzinfo(self, datetime_obj, tz_string):
    from dateutil import tz
    
    tzinfo = tz.gettz(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=tzinfo)
    
    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","The goal of the function is to take a naive datetime object and add a timezone information (tzinfo) to it using the dateutil library. This function is useful for converting a datetime object without timezone information to one with a specific timezone.

If this function is inside a class, it could be used as a method to modify the datetime objects stored in the class attributes with the specified timezone. The function interacts with the class context by accessing the datetime object using the self parameter, and potentially updating the datetime object with the timezone information.",3,"def _add_tzinfo(self, datetime_obj, tz_string):
    from dateutil import parser, tz

    tzinfo = tz.gettz(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=tzinfo)

    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The goal of the `extract_date_strings_inner` function is to extract date strings from a given text, taking into account the text's starting position. It splits the text into date ranges, tokenizes the text, and then merges the tokens to identify date-related information such as digits, months, and years. The function also has an option for strict mode, where it checks for complete date structures before yielding the extracted date strings. The extracted date strings are returned along with their indices and captured date components. This function is likely part of a larger text processing or date extraction system, and it can be recursively called to handle nested text structures.",1,"def extract_date_strings_inner(self, text, text_start, strict):
    def extract_date_strings_inner(text, text_start, strict):
        # Split text into date ranges
        date_ranges = text.split('/')
        
        # Tokenize text
        tokens = []
        for date_range in date_ranges:
            tokens.extend(date_range.split(' '))
        
        # Merge tokens
        merged_text = ' '.join(tokens)
        
        # Identify date-related information
        extracted_dates = []
        date_components = []
        
        # Logic for extracting date strings
        
        return extracted_dates, date_components

    return extract_date_strings_inner(text, text_start, strict)","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The goal of the `extract_date_strings_inner` function is to extract date strings from a given text, taking into account the text's starting position. It splits the text into date ranges, tokenizes the text, and then merges the tokens to identify date-related information such as digits, months, and years. The function also has an option for strict mode, where it checks for complete date structures before yielding the extracted date strings. The extracted date strings are returned along with their indices and captured date components. This function is likely part of a larger text processing or date extraction system, and it can be recursively called to handle nested text structures.",2,"def extract_date_strings_inner(self, text, text_start, strict):
    date_strings = []
    # Variation: Using regular expressions to extract date strings
    import re
    date_regex = r'\d{1,2}\/\d{1,2}\/\d{2,4}'
    dates = re.findall(date_regex, text)
    for date in dates:
        date_strings.append(date)
    
    return date_strings, text_start, {}","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The goal of the `extract_date_strings_inner` function is to extract date strings from a given text, taking into account the text's starting position. It splits the text into date ranges, tokenizes the text, and then merges the tokens to identify date-related information such as digits, months, and years. The function also has an option for strict mode, where it checks for complete date structures before yielding the extracted date strings. The extracted date strings are returned along with their indices and captured date components. This function is likely part of a larger text processing or date extraction system, and it can be recursively called to handle nested text structures.",3,"def extract_date_strings_inner(self, text, text_start, strict):
    date_strings = []
    # Custom implementation here
    
    return date_strings","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The `tokenize_string` function is designed to extract matches from a given source text based on a specific regular expression (DATE_REGEX) pattern. These matches will be used to create potential date strings later on. The function iterates through the source text, identifying matches, grouping them, and capturing relevant information. It then returns a list of tuples containing the match text, group, and captures for each identified match. This function is crucial for parsing and processing text data that contains date-related information.",1,"def tokenize_string(self, text):
    DATE_REGEX = r'(\d{1,2}\/\d{1,2}\/\d{2,4})'
    
    matches = re.finditer(DATE_REGEX, text)
    results = []
    
    for match in matches:
        match_text = match.group(0)
        group = match.lastindex
        captures = match.groups()
        
        results.append((match_text, group, captures))
    
    return results","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The `tokenize_string` function is designed to extract matches from a given source text based on a specific regular expression (DATE_REGEX) pattern. These matches will be used to create potential date strings later on. The function iterates through the source text, identifying matches, grouping them, and capturing relevant information. It then returns a list of tuples containing the match text, group, and captures for each identified match. This function is crucial for parsing and processing text data that contains date-related information.",2,"def tokenize_string(self, text):
    DATE_REGEX = r'\d{2}/\d{2}/\d{4}'
    matches = re.finditer(DATE_REGEX, text)
    result = []
    for match in matches:
        result.append((match.group(), match.start(), match.end()))
    return result","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The `tokenize_string` function is designed to extract matches from a given source text based on a specific regular expression (DATE_REGEX) pattern. These matches will be used to create potential date strings later on. The function iterates through the source text, identifying matches, grouping them, and capturing relevant information. It then returns a list of tuples containing the match text, group, and captures for each identified match. This function is crucial for parsing and processing text data that contains date-related information.",3,"def tokenize_string(self, text):
    DATE_REGEX = r'\d{2}/\d{2}/\d{4}'
    matches = re.finditer(DATE_REGEX, text)
    extracted_dates = []
    
    for match in matches:
        match_text = match.group()
        match_group = match.group(0)
        match_captures = match.groups()
        extracted_dates.append((match_text, match_group, match_captures))
    
    return extracted_dates","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    MIN_MATCHES = 2
    processed_fragments = []
    current_fragment = self.frag
    for token in tokens:
        if token['group'] not in ALL_GROUPS:
            if current_fragment.get_captures_count() >= MIN_MATCHES:
                processed_fragments.append(current_fragment)
            current_fragment = DateFragment()
        current_fragment.update_indices(token['start'], token['end'])
        current_fragment.add_match_string(token['value'])
        current_fragment.increment_capture_count(token['group'])
    if current_fragment.get_captures_count() >= MIN_MATCHES:
        processed_fragments.append(current_fragment)
    for fragment in processed_fragments:
        for group in ALL_GROUPS:
            if group not in fragment.capture_counts:
                fragment.capture_counts[group] = []
    return processed_fragments","The function `merge_tokens` takes a list of tokens as input and processes them to create fragments based on certain criteria. It combines tokens that belong to the same group and have consecutive indices into a single fragment. The goal of the function is to merge these tokens into fragments with at least two matches, updating the indices and match strings of the fragments accordingly. It then ensures that each fragment contains information for all possible groups before returning the processed fragments.",1,"def merge_tokens(self, tokens):
    fragments = []
    current_fragment = None
    
    for token in tokens:
        if current_fragment is None:
            current_fragment = {'index': token['index'], 'match': token['match'], 'groups': {token['group']}}
        elif token['index'] == current_fragment['index'] + 1 and token['group'] in current_fragment['groups']:
            current_fragment['match'] += token['match']
            current_fragment['index'] += 1
        else:
            if len(current_fragment['match']) >= 2:
                fragments.append(current_fragment)
            current_fragment = {'index': token['index'], 'match': token['match'], 'groups': {token['group']}}
        
        current_fragment['groups'].add(token['group'])
    
    if current_fragment is not None and len(current_fragment['match']) >= 2:
        fragments.append(current_fragment)
    
    for fragment in fragments:
        for group in range(1, max(fragment['groups']) + 1):
            if group not in fragment['groups']:
                fragment['match'] += ''
    
    return fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    MIN_MATCHES = 2
    processed_fragments = []
    current_fragment = self.frag
    for token in tokens:
        if token['group'] not in ALL_GROUPS:
            if current_fragment.get_captures_count() >= MIN_MATCHES:
                processed_fragments.append(current_fragment)
            current_fragment = DateFragment()
        current_fragment.update_indices(token['start'], token['end'])
        current_fragment.add_match_string(token['value'])
        current_fragment.increment_capture_count(token['group'])
    if current_fragment.get_captures_count() >= MIN_MATCHES:
        processed_fragments.append(current_fragment)
    for fragment in processed_fragments:
        for group in ALL_GROUPS:
            if group not in fragment.capture_counts:
                fragment.capture_counts[group] = []
    return processed_fragments","The function `merge_tokens` takes a list of tokens as input and processes them to create fragments based on certain criteria. It combines tokens that belong to the same group and have consecutive indices into a single fragment. The goal of the function is to merge these tokens into fragments with at least two matches, updating the indices and match strings of the fragments accordingly. It then ensures that each fragment contains information for all possible groups before returning the processed fragments.",2,"def merge_tokens(self, tokens):
    merged_fragments = []
    current_fragment = None
    
    for token in tokens:
        if current_fragment is None:
            current_fragment = {'group': token['group'], 'indices': [token['index']], 'matches': [token['match']]}
        elif token['group'] == current_fragment['group'] and token['index'] == current_fragment['indices'][-1] + 1:
            current_fragment['indices'].append(token['index'])
            current_fragment['matches'].append(token['match'])
        else:
            if len(current_fragment['indices']) >= 2:
                merged_fragments.append(current_fragment)
            current_fragment = {'group': token['group'], 'indices': [token['index']], 'matches': [token['match']]}
    
    if current_fragment is not None and len(current_fragment['indices']) >= 2:
        merged_fragments.append(current_fragment)
    
    for fragment in merged_fragments:
        for group in set(token['group'] for token in tokens):
            if group not in fragment['group']:
                fragment['group'].append(group)
    
    return merged_fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    MIN_MATCHES = 2
    processed_fragments = []
    current_fragment = self.frag
    for token in tokens:
        if token['group'] not in ALL_GROUPS:
            if current_fragment.get_captures_count() >= MIN_MATCHES:
                processed_fragments.append(current_fragment)
            current_fragment = DateFragment()
        current_fragment.update_indices(token['start'], token['end'])
        current_fragment.add_match_string(token['value'])
        current_fragment.increment_capture_count(token['group'])
    if current_fragment.get_captures_count() >= MIN_MATCHES:
        processed_fragments.append(current_fragment)
    for fragment in processed_fragments:
        for group in ALL_GROUPS:
            if group not in fragment.capture_counts:
                fragment.capture_counts[group] = []
    return processed_fragments","The function `merge_tokens` takes a list of tokens as input and processes them to create fragments based on certain criteria. It combines tokens that belong to the same group and have consecutive indices into a single fragment. The goal of the function is to merge these tokens into fragments with at least two matches, updating the indices and match strings of the fragments accordingly. It then ensures that each fragment contains information for all possible groups before returning the processed fragments.",3,"def merge_tokens(self, tokens):
    fragments = []
    current_fragment = None

    for token in tokens:
        if current_fragment is None:
            current_fragment = {""indices"": [token[""index""]], ""matches"": [token[""match""]], ""groups"": {token[""group""]}}
        else:
            if token[""group""] in current_fragment[""groups""] and token[""index""] == current_fragment[""indices""][-1] + 1:
                current_fragment[""indices""].append(token[""index""])
                current_fragment[""matches""].append(token[""match""])
            else:
                if len(current_fragment[""matches""]) >= 2:
                    fragments.append(current_fragment)
                current_fragment = {""indices"": [token[""index""]], ""matches"": [token[""match""]], ""groups"": {token[""group""]}}

            current_fragment[""groups""].add(token[""group""])

    if current_fragment is not None and len(current_fragment[""matches""]) >= 2:
        fragments.append(current_fragment)

    return fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the function `_find_and_replace` is to identify and replace occurrences of time zones in a given date string based on a predefined set of replacements. It iterates through the captures of time zones, updates the replacements dictionary, and then performs substitution in the date string using regular expressions. The function also extracts and returns the last sorted time zone string found in the captures. This function is likely part of a class and interacts with the class context through the `REPLACEMENTS` and `DELIMITERS_PATTERN` attributes.",1,"def _find_and_replace(self, date_string, captures):
    new_replacements = {}
    last_timezone = None
    
    for capture in captures:
        if capture in self.REPLACEMENTS:
            new_replacements[capture] = self.REPLACEMENTS[capture]
    
    sorted_captures = sorted(captures)
    if sorted_captures:
        last_timezone = sorted_captures[-1]
    
    for timezone, replacement in new_replacements.items():
        date_string = re.sub(timezone, replacement, date_string)
    
    return last_timezone, date_string","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the function `_find_and_replace` is to identify and replace occurrences of time zones in a given date string based on a predefined set of replacements. It iterates through the captures of time zones, updates the replacements dictionary, and then performs substitution in the date string using regular expressions. The function also extracts and returns the last sorted time zone string found in the captures. This function is likely part of a class and interacts with the class context through the `REPLACEMENTS` and `DELIMITERS_PATTERN` attributes.",2,Invalid Syntax / No valid code,N/A,Failed,[],[],0,0
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the function `_find_and_replace` is to identify and replace occurrences of time zones in a given date string based on a predefined set of replacements. It iterates through the captures of time zones, updates the replacements dictionary, and then performs substitution in the date string using regular expressions. The function also extracts and returns the last sorted time zone string found in the captures. This function is likely part of a class and interacts with the class context through the `REPLACEMENTS` and `DELIMITERS_PATTERN` attributes.",3,"def _find_and_replace(self, date_string, captures):
    replacements = {}
    last_timezone = None
    
    for timezone in captures:
        if timezone in self.REPLACEMENTS:
            replacements[timezone] = self.REPLACEMENTS[timezone]
    
    sorted_timezones = sorted(replacements.keys())
    if sorted_timezones:
        last_timezone = sorted_timezones[-1]
    
    for timezone, replacement in replacements.items():
        date_string = re.sub(re.escape(timezone), replacement, date_string)
    
    return last_timezone","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","The goal of this function is to take a naive datetime object and add a timezone information to it by matching the timezone string provided. This allows the datetime object to be aware of the timezone it belongs to, making it a timezone-aware datetime object.",1,"def _add_tzinfo(self, datetime_obj, tz_string):
    import pytz
    
    timezone = pytz.timezone(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=timezone)
    
    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","The goal of this function is to take a naive datetime object and add a timezone information to it by matching the timezone string provided. This allows the datetime object to be aware of the timezone it belongs to, making it a timezone-aware datetime object.",2,"def _add_tzinfo(self, datetime_obj, tz_string):
    import pytz
    
    try:
        timezone = pytz.timezone(tz_string)
        datetime_obj = timezone.localize(datetime_obj)
        return datetime_obj
    except pytz.UnknownTimeZoneError:
        return None","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","The goal of this function is to take a naive datetime object and add a timezone information to it by matching the timezone string provided. This allows the datetime object to be aware of the timezone it belongs to, making it a timezone-aware datetime object.",3,"def _add_tzinfo(self, datetime_obj, tz_string):
    import pytz
    
    timezone = pytz.timezone(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=timezone)
    
    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The goal of the `extract_date_strings_inner` function is to extract date strings from a given text input. It handles recursive calls to store true text coordinates in the output. The function parses the text, identifies date-related tokens, and categorizes them into digits, months, and years. It also allows for stricter criteria for identifying complete date strings. The function then cleans up the matched strings and returns them along with their respective indices and captures.

If this function is part of a class, it interacts with the class context by utilizing class methods such as `split_date_range`, `tokenize_string`, and `merge_tokens` to preprocess the text and extract date-related information. It may also reference class attributes to access additional settings or parameters for the extraction process.",1,"def extract_date_strings_inner(self, text, text_start, strict):
    def extract_date_strings_inner(text, text_start, strict):
        date_strings = []
        # Logic for extracting date strings
        return date_strings

    return extract_date_strings_inner(text, text_start, strict)","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The goal of the `extract_date_strings_inner` function is to extract date strings from a given text input. It handles recursive calls to store true text coordinates in the output. The function parses the text, identifies date-related tokens, and categorizes them into digits, months, and years. It also allows for stricter criteria for identifying complete date strings. The function then cleans up the matched strings and returns them along with their respective indices and captures.

If this function is part of a class, it interacts with the class context by utilizing class methods such as `split_date_range`, `tokenize_string`, and `merge_tokens` to preprocess the text and extract date-related information. It may also reference class attributes to access additional settings or parameters for the extraction process.",2,"def extract_date_strings_inner(self, text, text_start, strict):
    def extract_dates(text, text_start, strict):
        # Implementation of extracting date strings from text
        return extracted_dates
    
    return extract_dates(text, text_start, strict)","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The goal of the `extract_date_strings_inner` function is to extract date strings from a given text input. It handles recursive calls to store true text coordinates in the output. The function parses the text, identifies date-related tokens, and categorizes them into digits, months, and years. It also allows for stricter criteria for identifying complete date strings. The function then cleans up the matched strings and returns them along with their respective indices and captures.

If this function is part of a class, it interacts with the class context by utilizing class methods such as `split_date_range`, `tokenize_string`, and `merge_tokens` to preprocess the text and extract date-related information. It may also reference class attributes to access additional settings or parameters for the extraction process.",3,"def extract_date_strings_inner(self, text, text_start, strict):
    def extract_date_strings_inner_helper(text, start_index, strict):
        # implementation details here
        return extracted_dates, date_indices, date_captures

    extracted_dates, date_indices, date_captures = extract_date_strings_inner_helper(text, text_start, strict)
    return extracted_dates, date_indices, date_captures","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The goal of the `tokenize_string` function is to extract matches from a given source text based on a specific regular expression pattern, and then organize these matches into a list of tuples containing the match text, match group, and any captured groups. This function is used to tokenize the input text and prepare it for further processing, such as composing potential date strings. If this function is within a class context, it interacts with other methods or attributes of the class to handle the extraction and grouping of the matches.",1,"def tokenize_string(self, text):
    import re
    
    pattern = r'(\d{2})/(\d{2})/(\d{4})'
    matches = re.findall(pattern, text)
    
    result = []
    for match in matches:
        result.append((match[0], match[1], match[2]))
    
    return result","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The goal of the `tokenize_string` function is to extract matches from a given source text based on a specific regular expression pattern, and then organize these matches into a list of tuples containing the match text, match group, and any captured groups. This function is used to tokenize the input text and prepare it for further processing, such as composing potential date strings. If this function is within a class context, it interacts with other methods or attributes of the class to handle the extraction and grouping of the matches.",2,"def tokenize_string(self, text):
    import re

    pattern = r'your_regex_pattern_here'
    matches = re.finditer(pattern, text)
    
    result = []
    for match in matches:
        match_text = match.group(0)
        match_group = match.lastgroup
        captured_groups = match.groups()
        result.append((match_text, match_group, captured_groups))
    
    return result","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The goal of the `tokenize_string` function is to extract matches from a given source text based on a specific regular expression pattern, and then organize these matches into a list of tuples containing the match text, match group, and any captured groups. This function is used to tokenize the input text and prepare it for further processing, such as composing potential date strings. If this function is within a class context, it interacts with other methods or attributes of the class to handle the extraction and grouping of the matches.",3,"def tokenize_string(self, text):
    import re
    
    pattern = r'YourNewRegularExpressionPatternHere'
    matches = re.finditer(pattern, text)
    
    result = []
    for match in matches:
        match_text = match.group()
        match_group = match.lastindex
        captured_groups = match.groups()
        result.append((match_text, match_group, captured_groups))
    
    return result","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merge tokens into potential date strings based on certain conditions.

    Args:
    tokens (list): A list of tokens to be merged.

    Returns:
    list: A list of merged date fragments.
    """"""
    fragments = []
    frag = DateFragment()
    start_char = 0
    total_chars = 0
    for token in tokens:
        total_chars += len(token.text)
        if token.group:
            frag.update_indices(token.indices)
            frag.append_match_str(token.text)
            frag.merge_captures(token.captures)
        elif frag.has_indices() and frag.get_captures_count() >= self.MIN_MATCHES:
            fragments.append(frag)
            frag = DateFragment()
            start_char = total_chars
    if frag.get_captures_count() >= self.MIN_MATCHES:
        fragments.append(frag)
    for fragment in fragments:
        for group in self.ALL_GROUPS:
            if group not in fragment.captures:
                fragment.captures[group] = []
    return fragments","The goal of the `merge_tokens` function is to combine tokens into potential date strings by analyzing the tokens based on certain conditions. It first checks the tokens for specific criteria, such as groupings and captures, and merges them into date fragments accordingly. The function then returns a list of these merged date fragments. 

If this function is a method within a class, it likely interacts with attributes or methods within the class to access necessary information or perform specific operations on the tokens. It may utilize class attributes like `MIN_MATCHES` or `ALL_GROUPS` and potentially call other methods within the class for further processing.",1,"def merge_tokens(self, tokens):
    merged_dates = []
    current_fragment = """"

    for token in tokens:
        if token.isdigit():
            current_fragment += token
        else:
            if current_fragment:
                merged_dates.append(current_fragment)
            current_fragment = """"

    if current_fragment:
        merged_dates.append(current_fragment)

    return merged_dates","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merge tokens into potential date strings based on certain conditions.

    Args:
    tokens (list): A list of tokens to be merged.

    Returns:
    list: A list of merged date fragments.
    """"""
    fragments = []
    frag = DateFragment()
    start_char = 0
    total_chars = 0
    for token in tokens:
        total_chars += len(token.text)
        if token.group:
            frag.update_indices(token.indices)
            frag.append_match_str(token.text)
            frag.merge_captures(token.captures)
        elif frag.has_indices() and frag.get_captures_count() >= self.MIN_MATCHES:
            fragments.append(frag)
            frag = DateFragment()
            start_char = total_chars
    if frag.get_captures_count() >= self.MIN_MATCHES:
        fragments.append(frag)
    for fragment in fragments:
        for group in self.ALL_GROUPS:
            if group not in fragment.captures:
                fragment.captures[group] = []
    return fragments","The goal of the `merge_tokens` function is to combine tokens into potential date strings by analyzing the tokens based on certain conditions. It first checks the tokens for specific criteria, such as groupings and captures, and merges them into date fragments accordingly. The function then returns a list of these merged date fragments. 

If this function is a method within a class, it likely interacts with attributes or methods within the class to access necessary information or perform specific operations on the tokens. It may utilize class attributes like `MIN_MATCHES` or `ALL_GROUPS` and potentially call other methods within the class for further processing.",2,"def merge_tokens(self, tokens):
    merged_dates = []
    current_date = """"
    for token in tokens:
        if token.isdigit() and len(token) == 4:
            current_date += token
        elif token.isdigit() and len(token) == 2:
            if len(current_date) == 4:
                current_date += ""-"" + token
        else:
            if len(current_date) >= 4:
                merged_dates.append(current_date)
                current_date = """"
    if len(current_date) >= 4:
        merged_dates.append(current_date)
    
    return merged_dates","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merge tokens into potential date strings based on certain conditions.

    Args:
    tokens (list): A list of tokens to be merged.

    Returns:
    list: A list of merged date fragments.
    """"""
    fragments = []
    frag = DateFragment()
    start_char = 0
    total_chars = 0
    for token in tokens:
        total_chars += len(token.text)
        if token.group:
            frag.update_indices(token.indices)
            frag.append_match_str(token.text)
            frag.merge_captures(token.captures)
        elif frag.has_indices() and frag.get_captures_count() >= self.MIN_MATCHES:
            fragments.append(frag)
            frag = DateFragment()
            start_char = total_chars
    if frag.get_captures_count() >= self.MIN_MATCHES:
        fragments.append(frag)
    for fragment in fragments:
        for group in self.ALL_GROUPS:
            if group not in fragment.captures:
                fragment.captures[group] = []
    return fragments","The goal of the `merge_tokens` function is to combine tokens into potential date strings by analyzing the tokens based on certain conditions. It first checks the tokens for specific criteria, such as groupings and captures, and merges them into date fragments accordingly. The function then returns a list of these merged date fragments. 

If this function is a method within a class, it likely interacts with attributes or methods within the class to access necessary information or perform specific operations on the tokens. It may utilize class attributes like `MIN_MATCHES` or `ALL_GROUPS` and potentially call other methods within the class for further processing.",3,"def merge_tokens(self, tokens):
    date_fragments = []
    current_fragment = """"

    for token in tokens:
        if token.isdigit():
            current_fragment += token
        else:
            if current_fragment:
                date_fragments.append(current_fragment)
                current_fragment = """"
    
    if current_fragment:
        date_fragments.append(current_fragment)

    return date_fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the `_find_and_replace` function is to modify a given `date_string` by replacing certain patterns specified in the `REPLACEMENTS` dictionary. Additionally, it updates the time zones in the `date_string` based on the captures provided. The function ensures that when multiple time zones are matched, the last sorted capture is the one used. Finally, it returns the modified `date_string` and the time zone string that was removed from the captures.",1,"def _find_and_replace(self, date_string, captures):
    REPLACEMENTS = {
        'pattern1': 'replacement1',
        'pattern2': 'replacement2',
        'pattern3': 'replacement3'
    }
    
    updated_date_string = date_string
    removed_timezone = """"
    
    for pattern, replacement in REPLACEMENTS.items():
        updated_date_string = updated_date_string.replace(pattern, replacement)
    
    captures.sort(key=lambda x: x[1])
    if captures:
        removed_timezone = captures[-1][0]
        updated_date_string = updated_date_string.replace(removed_timezone, """")
    
    return updated_date_string, removed_timezone","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the `_find_and_replace` function is to modify a given `date_string` by replacing certain patterns specified in the `REPLACEMENTS` dictionary. Additionally, it updates the time zones in the `date_string` based on the captures provided. The function ensures that when multiple time zones are matched, the last sorted capture is the one used. Finally, it returns the modified `date_string` and the time zone string that was removed from the captures.",2,"def _find_and_replace(self, date_string, captures):
    REPLACEMENTS = {
        ""pattern1"": ""replacement1"",
        ""pattern2"": ""replacement2"",
        ""pattern3"": ""replacement3""
    }

    modified_date_string = date_string
    removed_time_zone = """"

    for pattern, replacement in REPLACEMENTS.items():
        modified_date_string = modified_date_string.replace(pattern, replacement)

    if captures:
        captures.sort()
        removed_time_zone = captures[-1]
        modified_date_string = modified_date_string.replace(removed_time_zone, """")

    return modified_date_string, removed_time_zone","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the `_find_and_replace` function is to modify a given `date_string` by replacing certain patterns specified in the `REPLACEMENTS` dictionary. Additionally, it updates the time zones in the `date_string` based on the captures provided. The function ensures that when multiple time zones are matched, the last sorted capture is the one used. Finally, it returns the modified `date_string` and the time zone string that was removed from the captures.",3,"def _find_and_replace(self, date_string, captures):
    REPLACEMENTS = {
        ""pattern1"": ""replacement1"",
        ""pattern2"": ""replacement2""
    }
    
    updated_date_string = date_string
    removed_timezone = """"
    
    for pattern, replacement in REPLACEMENTS.items():
        updated_date_string = updated_date_string.replace(pattern, replacement)
    
    sorted_captures = sorted(captures, key=lambda x: captures[x])
    last_capture = sorted_captures[-1]
    
    if last_capture in updated_date_string:
        updated_date_string = updated_date_string.replace(last_capture, """")
        removed_timezone = last_capture
    
    return updated_date_string, removed_timezone","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","The goal of this function is to take a naive datetime object and add timezone information to it using the dateutil library. This allows the datetime object to be aware of the timezone it belongs to. If the datetime object is already aware of a timezone, the function will replace it with the new timezone information specified.",1,"def _add_tzinfo(self, datetime_obj, tz_string):
    from dateutil import tz
    
    if datetime_obj.tzinfo:
        datetime_obj = datetime_obj.replace(tzinfo=None)
    
    new_tzinfo = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=new_tzinfo)","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","The goal of this function is to take a naive datetime object and add timezone information to it using the dateutil library. This allows the datetime object to be aware of the timezone it belongs to. If the datetime object is already aware of a timezone, the function will replace it with the new timezone information specified.",2,"def _add_tzinfo(self, datetime_obj, tz_string):
    from dateutil import tz
    
    if datetime_obj.tzinfo:
        datetime_obj = datetime_obj.replace(tzinfo=None)
    
    tzinfo = tz.gettz(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=tzinfo)
    
    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","The goal of this function is to take a naive datetime object and add timezone information to it using the dateutil library. This allows the datetime object to be aware of the timezone it belongs to. If the datetime object is already aware of a timezone, the function will replace it with the new timezone information specified.",3,"def _add_tzinfo(self, datetime_obj, tz_string):
    from dateutil import tz
    
    if datetime_obj.tzinfo:
        datetime_obj = datetime_obj.replace(tzinfo=None)
    
    timezone = tz.gettz(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=timezone)
    
    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The goal of the function `extract_date_strings_inner` is to extract date strings from a given text, considering a text_start parameter for recursive calls. It splits the text into date ranges, tokenizes the text, and then merges the tokens to identify date related information such as digits, months, and years. The function can operate in a strict mode where it only considers complete date formats. The extracted date strings are cleaned up and yielded with their corresponding indices and captures.

If this function is within a class, it likely interacts with other methods or attributes within the class to tokenize and extract date information from text data.",1,Invalid Syntax / No valid code,N/A,Failed,[],[],0,0
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The goal of the function `extract_date_strings_inner` is to extract date strings from a given text, considering a text_start parameter for recursive calls. It splits the text into date ranges, tokenizes the text, and then merges the tokens to identify date related information such as digits, months, and years. The function can operate in a strict mode where it only considers complete date formats. The extracted date strings are cleaned up and yielded with their corresponding indices and captures.

If this function is within a class, it likely interacts with other methods or attributes within the class to tokenize and extract date information from text data.",2,"def extract_date_strings_inner(self, text, text_start, strict):
    # Function body remains the same as the original function
    pass","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The goal of the function `extract_date_strings_inner` is to extract date strings from a given text, considering a text_start parameter for recursive calls. It splits the text into date ranges, tokenizes the text, and then merges the tokens to identify date related information such as digits, months, and years. The function can operate in a strict mode where it only considers complete date formats. The extracted date strings are cleaned up and yielded with their corresponding indices and captures.

If this function is within a class, it likely interacts with other methods or attributes within the class to tokenize and extract date information from text data.",3,"def extract_date_strings_inner(self, text, text_start, strict):
    def extract_dates(text, text_start, strict):
        # Logic to extract date strings from text
        return extracted_date_strings
    
    return extract_dates(text, text_start, strict)","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The `tokenize_string` function is designed to extract matches of a specific pattern (date strings) from a given source text. It iterates through the text, identifying matches based on a regular expression, and then creates a list of tuples containing the match text, its group, and any captures found within that match. The function aims to split the source text into segments, with the identified date strings as separate entities for further processing.",1,"def tokenize_string(self, text):
    import re
    
    pattern = r'\d{1,2}/\d{1,2}/\d{2,4}'  # Date pattern MM/DD/YYYY or M/D/YY or any other variations
    matches = re.finditer(pattern, text)
    
    extracted_dates = []
    
    for match in matches:
        match_text = match.group()
        match_group = match.lastgroup
        captures = match.groups()
        
        extracted_dates.append((match_text, match_group, captures))
    
    return extracted_dates","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The `tokenize_string` function is designed to extract matches of a specific pattern (date strings) from a given source text. It iterates through the text, identifying matches based on a regular expression, and then creates a list of tuples containing the match text, its group, and any captures found within that match. The function aims to split the source text into segments, with the identified date strings as separate entities for further processing.",2,"def tokenize_string(self, text):
    import re
    
    pattern = r'\b(\d{1,2}/\d{1,2}/\d{4})\b'
    matches = re.finditer(pattern, text)
    
    result = []
    for match in matches:
        match_text = match.group(0)
        match_group = 0
        captures = ()
        
        result.append((match_text, match_group, captures))
    
    return result","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The `tokenize_string` function is designed to extract matches of a specific pattern (date strings) from a given source text. It iterates through the text, identifying matches based on a regular expression, and then creates a list of tuples containing the match text, its group, and any captures found within that match. The function aims to split the source text into segments, with the identified date strings as separate entities for further processing.",3,"def tokenize_string(self, text):
    import re
    
    pattern = r'\d{2}/\d{2}/\d{4}'  # Date pattern mm/dd/yyyy
    matches = re.finditer(pattern, text)
    
    result = []
    for match in matches:
        match_text = match.group()
        match_group = match.lastgroup
        captures = match.groups()
        result.append((match_text, match_group, captures))
    
    return result","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merge tokens into potential date strings based on certain conditions.

    Args:
    tokens (list): A list of tokens to be merged.

    Returns:
    list: A list of merged date fragments.
    """"""
    fragments = []
    frag = self.DateFragment()
    start_char = 0
    total_chars = 0
    for token in tokens:
        total_chars += len(token.text)
        if token.group:
            frag.update_indices(token.indices)
            frag.match_str += token.text
            frag.captures = {**frag.captures, **token.captures}
        elif frag.indices and frag.get_captures_count() >= self.MIN_MATCHES:
            fragments.append(frag)
            frag = self.DateFragment()
            start_char = total_chars
    if frag.get_captures_count() >= self.MIN_MATCHES:
        fragments.append(frag)
    for fragment in fragments:
        for group in self.ALL_GROUPS:
            if group not in fragment.captures:
                fragment.captures[group] = []
    return fragments","The purpose of the `merge_tokens` function is to take a list of tokens and merge them into potential date strings based on certain conditions. It iterates through the tokens, updating a date fragment object with relevant information from each token. If the accumulated information in a fragment meets a minimum match requirement, it is added to a list of merged date fragments. Finally, the function ensures that each fragment has captures for all possible groups before returning the list of merged date fragments. The function may be part of a class that includes a `DateFragment` class and utilizes class attributes such as `MIN_MATCHES` and `ALL_GROUPS`.",1,"def merge_tokens(self, tokens):
    merged_date_fragments = []
    current_fragment = DateFragment()
    
    for token in tokens:
        current_fragment.update(token)
        
        if current_fragment.num_matches >= self.MIN_MATCHES:
            merged_date_fragments.append(current_fragment)
            current_fragment = DateFragment()
    
    for fragment in merged_date_fragments:
        fragment.fill_missing_groups(self.ALL_GROUPS)
    
    return merged_date_fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merge tokens into potential date strings based on certain conditions.

    Args:
    tokens (list): A list of tokens to be merged.

    Returns:
    list: A list of merged date fragments.
    """"""
    fragments = []
    frag = self.DateFragment()
    start_char = 0
    total_chars = 0
    for token in tokens:
        total_chars += len(token.text)
        if token.group:
            frag.update_indices(token.indices)
            frag.match_str += token.text
            frag.captures = {**frag.captures, **token.captures}
        elif frag.indices and frag.get_captures_count() >= self.MIN_MATCHES:
            fragments.append(frag)
            frag = self.DateFragment()
            start_char = total_chars
    if frag.get_captures_count() >= self.MIN_MATCHES:
        fragments.append(frag)
    for fragment in fragments:
        for group in self.ALL_GROUPS:
            if group not in fragment.captures:
                fragment.captures[group] = []
    return fragments","The purpose of the `merge_tokens` function is to take a list of tokens and merge them into potential date strings based on certain conditions. It iterates through the tokens, updating a date fragment object with relevant information from each token. If the accumulated information in a fragment meets a minimum match requirement, it is added to a list of merged date fragments. Finally, the function ensures that each fragment has captures for all possible groups before returning the list of merged date fragments. The function may be part of a class that includes a `DateFragment` class and utilizes class attributes such as `MIN_MATCHES` and `ALL_GROUPS`.",2,"def merge_tokens(self, tokens):
    merged_date_fragments = []
    date_fragment = DateFragment()
    
    for token in tokens:
        date_fragment.update(token)
        
        if date_fragment.matches >= self.MIN_MATCHES:
            merged_date_fragments.append(date_fragment)
            date_fragment = DateFragment()
    
    for fragment in merged_date_fragments:
        fragment.fill_missing_groups(self.ALL_GROUPS)
    
    return merged_date_fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merge tokens into potential date strings based on certain conditions.

    Args:
    tokens (list): A list of tokens to be merged.

    Returns:
    list: A list of merged date fragments.
    """"""
    fragments = []
    frag = self.DateFragment()
    start_char = 0
    total_chars = 0
    for token in tokens:
        total_chars += len(token.text)
        if token.group:
            frag.update_indices(token.indices)
            frag.match_str += token.text
            frag.captures = {**frag.captures, **token.captures}
        elif frag.indices and frag.get_captures_count() >= self.MIN_MATCHES:
            fragments.append(frag)
            frag = self.DateFragment()
            start_char = total_chars
    if frag.get_captures_count() >= self.MIN_MATCHES:
        fragments.append(frag)
    for fragment in fragments:
        for group in self.ALL_GROUPS:
            if group not in fragment.captures:
                fragment.captures[group] = []
    return fragments","The purpose of the `merge_tokens` function is to take a list of tokens and merge them into potential date strings based on certain conditions. It iterates through the tokens, updating a date fragment object with relevant information from each token. If the accumulated information in a fragment meets a minimum match requirement, it is added to a list of merged date fragments. Finally, the function ensures that each fragment has captures for all possible groups before returning the list of merged date fragments. The function may be part of a class that includes a `DateFragment` class and utilizes class attributes such as `MIN_MATCHES` and `ALL_GROUPS`.",3,"def merge_tokens(self, tokens):
    merged_fragments = []
    current_fragment = DateFragment()
    
    for token in tokens:
        current_fragment.update(token)
        
        if current_fragment.matches >= self.MIN_MATCHES:
            merged_fragments.append(current_fragment)
            current_fragment = DateFragment()
    
    for fragment in merged_fragments:
        fragment.fill_missing_groups(self.ALL_GROUPS)
    
    return merged_fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the `_find_and_replace` function is to search for specific patterns in a given date string and replace them with predefined values. It also removes any timezone strings found in the date string. Multiple timezones can be handled, with the last one taking precedence. The function interacts with the class context by accessing the `REPLACEMENTS` and `DELIMITERS_PATTERN` attributes, as well as the `captures` attribute which contains information about timezones.",1,"def _find_and_replace(self, date_string, captures):
    replacements = self.REPLACEMENTS
    delimiters_pattern = self.DELIMITERS_PATTERN
    
    for pattern, replacement in replacements.items():
        date_string = re.sub(pattern, replacement, date_string)
    
    date_string = re.sub(delimiters_pattern, '', date_string)
    
    timezone_info = captures
    timezones = sorted(timezone_info, key=lambda x: timezone_info[x]['index'], reverse=True)
    
    for tz in timezones:
        tz_info = timezone_info[tz]
        date_string = date_string[:tz_info['start']] + tz_info['replacement'] + date_string[tz_info['end']:]
    
    return date_string","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the `_find_and_replace` function is to search for specific patterns in a given date string and replace them with predefined values. It also removes any timezone strings found in the date string. Multiple timezones can be handled, with the last one taking precedence. The function interacts with the class context by accessing the `REPLACEMENTS` and `DELIMITERS_PATTERN` attributes, as well as the `captures` attribute which contains information about timezones.",2,"def _find_and_replace(self, date_string, captures):
    new_date_string = date_string
    for pattern, replacement in self.REPLACEMENTS.items():
        new_date_string = re.sub(pattern, replacement, new_date_string)
    
    new_date_string = re.sub(self.DELIMITERS_PATTERN, '', new_date_string)
    
    for capture in captures[::-1]:
        new_date_string = re.sub(capture, '', new_date_string)
    
    return new_date_string","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the `_find_and_replace` function is to search for specific patterns in a given date string and replace them with predefined values. It also removes any timezone strings found in the date string. Multiple timezones can be handled, with the last one taking precedence. The function interacts with the class context by accessing the `REPLACEMENTS` and `DELIMITERS_PATTERN` attributes, as well as the `captures` attribute which contains information about timezones.",3,"def _find_and_replace(self, date_string, captures):
    new_date_string = date_string.replace(""pattern1"", ""replacement1"").replace(""pattern2"", ""replacement2"")
    new_date_string = re.sub(r""timezone_pattern1|timezone_pattern2"", """", new_date_string)
    
    for capture in captures[::-1]:
        if capture:
            new_date_string = new_date_string.replace(""timezone_pattern"", capture)
            break
    
    return new_date_string","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)",The goal of this function is to take a naive datetime object and add a timezone information to it using the dateutil library. The function returns the datetime object with the specified timezone information added to it. This can be useful for converting a datetime object from being timezone-naive to timezone-aware.,1,"def _add_tzinfo(self, datetime_obj, tz_string):
    from dateutil import tz
    
    timezone = tz.gettz(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=timezone)
    
    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)",The goal of this function is to take a naive datetime object and add a timezone information to it using the dateutil library. The function returns the datetime object with the specified timezone information added to it. This can be useful for converting a datetime object from being timezone-naive to timezone-aware.,2,"def _add_tzinfo(self, datetime_obj, tz_string):
    from dateutil import tz
    
    tzinfo = tz.gettz(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=tzinfo)
    
    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)",The goal of this function is to take a naive datetime object and add a timezone information to it using the dateutil library. The function returns the datetime object with the specified timezone information added to it. This can be useful for converting a datetime object from being timezone-naive to timezone-aware.,3,Invalid Syntax / No valid code,N/A,Failed,[],[],0,0
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The function `extract_date_strings_inner` is designed to extract date strings from a given text, taking into account a starting point within the text. It iterates through the text, identifying date-related tokens such as digits, months, and years, and returns the extracted date strings along with their respective indices in the original text. The function also has an option for strict mode, which enforces specific conditions for a date string to be considered valid. This function may be used recursively in cases where the text is split into multiple parts, ensuring that date strings are accurately extracted from each part.",1,"def extract_date_strings_inner(self, text, text_start, strict):
    date_strings = []
    
    # Your implementation here
    
    return date_strings","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The function `extract_date_strings_inner` is designed to extract date strings from a given text, taking into account a starting point within the text. It iterates through the text, identifying date-related tokens such as digits, months, and years, and returns the extracted date strings along with their respective indices in the original text. The function also has an option for strict mode, which enforces specific conditions for a date string to be considered valid. This function may be used recursively in cases where the text is split into multiple parts, ensuring that date strings are accurately extracted from each part.",2,"def extract_date_strings_inner(self, text, text_start, strict=False):
    date_strings = []
    current_string = ''
    month_dict = {'january': 1, 'february': 2, 'march': 3, 'april': 4, 'may': 5, 'june': 6, 'july': 7, 'august': 8, 'september': 9, 'october': 10, 'november': 11, 'december': 12}
    
    for i in range(len(text)):
        if text[i].isdigit():
            current_string += text[i]
        elif text[i:i+3].lower() in month_dict:
            current_string += str(month_dict[text[i:i+3].lower()])
        else:
            if current_string:
                if len(current_string) == 8 and current_string.isdigit():
                    date_strings.append((current_string, text_start))
                current_string = ''
    
    if current_string:
        if len(current_string) == 8 and current_string.isdigit():
            date_strings.append((current_string, text_start))
    
    return date_strings","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The function `extract_date_strings_inner` is designed to extract date strings from a given text, taking into account a starting point within the text. It iterates through the text, identifying date-related tokens such as digits, months, and years, and returns the extracted date strings along with their respective indices in the original text. The function also has an option for strict mode, which enforces specific conditions for a date string to be considered valid. This function may be used recursively in cases where the text is split into multiple parts, ensuring that date strings are accurately extracted from each part.",3,"def extract_date_strings_inner(self, text, text_start, strict):
    date_strings = []
    indices = []

    # Your implementation here

    return date_strings, indices","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The `tokenize_string` function extracts matches from a source text that conform to a specific date regex pattern. These matches are then processed to create potential date strings. The function returns a list of tuples, where each tuple contains the matched text, its group classification, and any captured information associated with the match. 

If this function is a part of a class, it likely interacts with other methods or attributes within the class to further process and manipulate the extracted tokens.",1,"def tokenize_string(self, text):
    import re
    
    date_pattern = r'\d{1,2}\/\d{1,2}\/\d{2,4}'
    matches = re.finditer(date_pattern, text)
    
    extracted_tokens = []
    for match in matches:
        extracted_tokens.append((match.group(0), 'date', None))
    
    return extracted_tokens","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The `tokenize_string` function extracts matches from a source text that conform to a specific date regex pattern. These matches are then processed to create potential date strings. The function returns a list of tuples, where each tuple contains the matched text, its group classification, and any captured information associated with the match. 

If this function is a part of a class, it likely interacts with other methods or attributes within the class to further process and manipulate the extracted tokens.",2,"def tokenize_string(self, text):
    import re
    
    date_regex = r'\d{1,2}/\d{1,2}/\d{4}'  # Custom date regex pattern
    
    matches = re.finditer(date_regex, text)
    
    result = []
    
    for match in matches:
        matched_text = match.group(0)
        group_classification = ""Date""
        captured_info = match.groups()
        
        result.append((matched_text, group_classification, captured_info))
        
    return result","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The `tokenize_string` function extracts matches from a source text that conform to a specific date regex pattern. These matches are then processed to create potential date strings. The function returns a list of tuples, where each tuple contains the matched text, its group classification, and any captured information associated with the match. 

If this function is a part of a class, it likely interacts with other methods or attributes within the class to further process and manipulate the extracted tokens.",3,"def tokenize_string(self, text):
    import re
    
    date_regex = r'\d{1,2}/\d{1,2}/\d{2,4}'
    matches = re.finditer(date_regex, text)
    
    tokens = []
    for match in matches:
        matched_text = match.group()
        classification = ""Date""
        captured_info = match.group()
        tokens.append((matched_text, classification, captured_info))
    
    return tokens","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merges tokens into potential date strings based on certain conditions.

    Args:
        tokens (list): A list of tokens to be merged.

    Returns:
        list: A list of merged date fragments.
    """"""
    fragments = []
    frag = self.DateFragment()
    start_char = 0
    total_chars = 0
    for token in tokens:
        total_chars += len(token.text)
        if token.group:
            frag.update_indices(token.indices)
            frag.match_str += token.text
            frag.captures = {**frag.captures, **token.captures}
        elif frag.indices and frag.get_captures_count() >= self.MIN_MATCHES:
            fragments.append(frag)
            frag = self.DateFragment()
            start_char = total_chars
    if frag.get_captures_count() >= self.MIN_MATCHES:
        fragments.append(frag)
    for fragment in fragments:
        for group in self.ALL_GROUPS:
            if group not in fragment.captures:
                fragment.captures[group] = []
    return fragments","The `merge_tokens` function takes a list of tokens and merges them into potential date fragments based on certain conditions. It updates the indices, text, and captures of each token in the fragments. If a fragment has enough captured information, it is added to the final list of date fragments. The function ensures that all date fragments have captures for all possible groups defined in the class context.",1,"def merge_tokens(self, tokens):
    date_fragments = []
    
    for token in tokens:
        # merge tokens into potential date fragments
        # update indices, text, and captures of each token
        
        if token.has_enough_information():
            # add fragment to final list of date fragments
            date_fragments.append(token)
    
    # ensure all date fragments have captures for all possible groups
    for fragment in date_fragments:
        fragment.ensure_captures()
    
    return date_fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merges tokens into potential date strings based on certain conditions.

    Args:
        tokens (list): A list of tokens to be merged.

    Returns:
        list: A list of merged date fragments.
    """"""
    fragments = []
    frag = self.DateFragment()
    start_char = 0
    total_chars = 0
    for token in tokens:
        total_chars += len(token.text)
        if token.group:
            frag.update_indices(token.indices)
            frag.match_str += token.text
            frag.captures = {**frag.captures, **token.captures}
        elif frag.indices and frag.get_captures_count() >= self.MIN_MATCHES:
            fragments.append(frag)
            frag = self.DateFragment()
            start_char = total_chars
    if frag.get_captures_count() >= self.MIN_MATCHES:
        fragments.append(frag)
    for fragment in fragments:
        for group in self.ALL_GROUPS:
            if group not in fragment.captures:
                fragment.captures[group] = []
    return fragments","The `merge_tokens` function takes a list of tokens and merges them into potential date fragments based on certain conditions. It updates the indices, text, and captures of each token in the fragments. If a fragment has enough captured information, it is added to the final list of date fragments. The function ensures that all date fragments have captures for all possible groups defined in the class context.",2,"def merge_tokens(self, tokens):
    date_fragments = []
    
    for token in tokens:
        # merge tokens into potential date fragments
        # update indices, text, and captures of each token
        
        if token.has_enough_captured_info():
            date_fragments.append(token)
    
    # ensure all date fragments have captures for all possible groups
    for fragment in date_fragments:
        fragment.ensure_all_captures()
    
    return date_fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merges tokens into potential date strings based on certain conditions.

    Args:
        tokens (list): A list of tokens to be merged.

    Returns:
        list: A list of merged date fragments.
    """"""
    fragments = []
    frag = self.DateFragment()
    start_char = 0
    total_chars = 0
    for token in tokens:
        total_chars += len(token.text)
        if token.group:
            frag.update_indices(token.indices)
            frag.match_str += token.text
            frag.captures = {**frag.captures, **token.captures}
        elif frag.indices and frag.get_captures_count() >= self.MIN_MATCHES:
            fragments.append(frag)
            frag = self.DateFragment()
            start_char = total_chars
    if frag.get_captures_count() >= self.MIN_MATCHES:
        fragments.append(frag)
    for fragment in fragments:
        for group in self.ALL_GROUPS:
            if group not in fragment.captures:
                fragment.captures[group] = []
    return fragments","The `merge_tokens` function takes a list of tokens and merges them into potential date fragments based on certain conditions. It updates the indices, text, and captures of each token in the fragments. If a fragment has enough captured information, it is added to the final list of date fragments. The function ensures that all date fragments have captures for all possible groups defined in the class context.",3,Invalid Syntax / No valid code,N/A,Failed,[],[],0,0
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The function `_find_and_replace` is designed to take a date string and a dictionary of captures as input. It replaces certain patterns in the date string based on the captures, specifically focusing on timezones. It iterates through a list of timezones in the captures, updates a set of replacements with those timezones, and then performs substitutions in the date string using regular expressions. Finally, it returns the modified date string and removes the timezone string that was used for replacement from the captures. This function is likely part of a larger class that deals with processing and manipulating date strings.",1,"def _find_and_replace(self, date_str, captures):
    replacements = set()
    for tz in captures:
        replacements.add(tz)
    
    for tz in replacements:
        pattern = r'\b' + tz + r'\b'
        date_str = re.sub(pattern, captures[tz], date_str)
    
    modified_date_str = date_str
    
    if captures.get('timezone'):
        del captures['timezone']
    
    return modified_date_str","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The function `_find_and_replace` is designed to take a date string and a dictionary of captures as input. It replaces certain patterns in the date string based on the captures, specifically focusing on timezones. It iterates through a list of timezones in the captures, updates a set of replacements with those timezones, and then performs substitutions in the date string using regular expressions. Finally, it returns the modified date string and removes the timezone string that was used for replacement from the captures. This function is likely part of a larger class that deals with processing and manipulating date strings.",2,Invalid Syntax / No valid code,N/A,Failed,[],[],0,0
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The function `_find_and_replace` is designed to take a date string and a dictionary of captures as input. It replaces certain patterns in the date string based on the captures, specifically focusing on timezones. It iterates through a list of timezones in the captures, updates a set of replacements with those timezones, and then performs substitutions in the date string using regular expressions. Finally, it returns the modified date string and removes the timezone string that was used for replacement from the captures. This function is likely part of a larger class that deals with processing and manipulating date strings.",3,"def _find_and_replace(self, date_string, captures):
    updated_replacements = set()
    
    for timezone in captures:
        updated_replacements.add(captures[timezone])
    
    for replacement in updated_replacements:
        date_string = re.sub(r'\b' + re.escape(timezone) + r'\b', replacement, date_string)
    
    captures.pop(timezone, None)
    
    return date_string","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)",The goal of the _add_tzinfo function is to take a naive datetime object and add a timezone information (tzinfo) to it using the provided timezone string. This function returns the datetime object with the corresponding timezone information added to it. It is useful for converting a datetime object from being timezone-naive to timezone-aware.,1,"def _add_tzinfo(self, datetime_obj, tz_string):
    import pytz
    from datetime import datetime

    timezone = pytz.timezone(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=timezone)

    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)",The goal of the _add_tzinfo function is to take a naive datetime object and add a timezone information (tzinfo) to it using the provided timezone string. This function returns the datetime object with the corresponding timezone information added to it. It is useful for converting a datetime object from being timezone-naive to timezone-aware.,2,Invalid Syntax / No valid code,N/A,Failed,[],[],0,0
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)",The goal of the _add_tzinfo function is to take a naive datetime object and add a timezone information (tzinfo) to it using the provided timezone string. This function returns the datetime object with the corresponding timezone information added to it. It is useful for converting a datetime object from being timezone-naive to timezone-aware.,3,"def _add_tzinfo(self, datetime_obj, tz_string):
    import pytz
    from datetime import datetime

    tz = pytz.timezone(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=tz)

    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The function is designed to extract date strings from a given text input. It tokenizes the text, merges tokens, and then identifies date-related patterns such as digits, months, and years within the text. The function can be used recursively with a text_start parameter to store true text coordinates in the output. Additionally, there is an option for strict matching criteria to ensure that only complete date formats are extracted. The extracted date strings, along with their indices and captured date components, are returned as output. Overall, the function aims to extract and return date strings from the text input.",1,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    import re
    
    def merge_tokens(tokens):
        merged_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i].isdigit() and i + 2 < len(tokens) and tokens[i + 1] in ['/', '-', '.'] and tokens[i + 2].isdigit():
                merged_tokens.append(tokens[i] + tokens[i + 1] + tokens[i + 2])
                i += 2
            else:
                merged_tokens.append(tokens[i])
            i += 1
        return merged_tokens
    
    def extract_date_components(date_str):
        components = re.findall(r'\b\d+\b|\b\w+\b', date_str)
        return components
    
    def extract_date_strings(text, text_start, strict):
        date_strings = []
        tokens = merge_tokens(re.findall(r'\b\w+\b|\d+', text))
        curr_index = text_start
        for token in tokens:
            if token.isnumeric() and len(token) == 4:
                date_strings.append((token, curr_index, ['year']))
            if token in ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']:
                date_strings.append((token, curr_index, ['month']))
            if token.isdigit() and len(token) <= 2:
                if int(token) >= 1 and int(token) <= 31:
                    date_strings.append((token, curr_index, ['day']))
            curr_index += len(token) + 1
        return date_strings
    
    return extract_date_strings(text, text_start, strict)","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The function is designed to extract date strings from a given text input. It tokenizes the text, merges tokens, and then identifies date-related patterns such as digits, months, and years within the text. The function can be used recursively with a text_start parameter to store true text coordinates in the output. Additionally, there is an option for strict matching criteria to ensure that only complete date formats are extracted. The extracted date strings, along with their indices and captured date components, are returned as output. Overall, the function aims to extract and return date strings from the text input.",2,"def extract_date_strings_inner(self, text, text_start, strict):
    def extract_dates(text, text_start, strict, extracted_dates=[]):
        date_formats = ['%Y-%m-%d', '%m-%d-%Y', '%d-%m-%Y', '%Y/%m/%d', '%m/%d/%Y', '%d/%m/%Y']
        
        # Your implementation here
        
        return extracted_dates
    
    return extract_dates(text, text_start, strict)","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The function is designed to extract date strings from a given text input. It tokenizes the text, merges tokens, and then identifies date-related patterns such as digits, months, and years within the text. The function can be used recursively with a text_start parameter to store true text coordinates in the output. Additionally, there is an option for strict matching criteria to ensure that only complete date formats are extracted. The extracted date strings, along with their indices and captured date components, are returned as output. Overall, the function aims to extract and return date strings from the text input.",3,"def extract_date_strings_inner(self, text, text_start, strict):
    date_strings = []
    # Tokenize the text
    tokens = text.split()
    merged_tokens = ' '.join(tokens)
    
    # Identify date-related patterns
    date_pattern = r'(\d{1,2}[-/]\d{1,2}[-/]\d{2,4})|(\d{1,2}\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s\d{2,4})|(\d{1,2}\s(?:January|February|March|April|May|June|July|August|September|October|November|December)\s\d{2,4})'
    matches = re.finditer(date_pattern, merged_tokens)
    
    for match in matches:
        start_index = match.start() + text_start
        end_index = match.end() + text_start
        date_strings.append({
            'date_string': match.group(),
            'start_index': start_index,
            'end_index': end_index,
            'date_components': match.group().split()
        })
    
    return date_strings","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The goal of the `tokenize_string` function is to extract matches for potential date strings from a given source text. These matches are obtained using a regular expression pattern and are then processed to identify the group they belong to. The function returns a list of tuples, each containing the matched text, its group, and any captured data associated with the match. This process allows for the identification and extraction of date-related information from the source text. If this function is part of a class, it likely interacts with other class methods or attributes to further process or utilize the extracted date information.",1,"def tokenize_string(self, text):
    import re
    
    pattern = r'\d{1,2}/\d{1,2}/\d{2,4}'
    matches = re.findall(pattern, text)
    
    date_tuples = []
    for match in matches:
        date_tuples.append((match, 'date', None))
    
    return date_tuples","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The goal of the `tokenize_string` function is to extract matches for potential date strings from a given source text. These matches are obtained using a regular expression pattern and are then processed to identify the group they belong to. The function returns a list of tuples, each containing the matched text, its group, and any captured data associated with the match. This process allows for the identification and extraction of date-related information from the source text. If this function is part of a class, it likely interacts with other class methods or attributes to further process or utilize the extracted date information.",2,"def tokenize_string(self, text):
    import re
    
    pattern = r'(\d{1,2}/\d{1,2}/\d{2,4})'
    
    matches = re.findall(pattern, text)
    
    result = []
    for match in matches:
        result.append((match, 'date', None))
    
    return result","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The goal of the `tokenize_string` function is to extract matches for potential date strings from a given source text. These matches are obtained using a regular expression pattern and are then processed to identify the group they belong to. The function returns a list of tuples, each containing the matched text, its group, and any captured data associated with the match. This process allows for the identification and extraction of date-related information from the source text. If this function is part of a class, it likely interacts with other class methods or attributes to further process or utilize the extracted date information.",3,"def tokenize_string(self, text):
    import re
    
    date_pattern = r'\d{1,2}/\d{1,2}/\d{2,4}'
    
    matches = re.findall(date_pattern, text)
    
    date_info = []
    for match in matches:
        date_info.append((match, 'date', None))
    
    return date_info","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    MIN_MATCHES = 2
    ALL_GROUPS = ['day', 'month', 'year']
    frag = self.DateFragment()
    result = []
    current_fragment = None
    for token in tokens:
        group = token.get('group')
        if not group:
            if current_fragment:
                if len(current_fragment['captures']) >= MIN_MATCHES:
                    result.append(current_fragment)
                else:
                    del current_fragment
            current_fragment = {'indices': [], 'match': '', 'captures': {}}
            for g in ALL_GROUPS:
                current_fragment['captures'][g] = []
        if group:
            if not current_fragment:
                current_fragment = {'indices': [], 'match': '', 'captures': {}}
                for g in ALL_GROUPS:
                    current_fragment['captures'][g] = []
            current_fragment['indices'].append(token.get('index'))
            current_fragment['match'] += token.get('value')
            current_fragment['captures'][group].append(token.get('value'))
    if current_fragment and len(current_fragment['captures']) >= MIN_MATCHES:
        result.append(current_fragment)
    for frag in result:
        for group in ALL_GROUPS:
            if group not in frag['captures']:
                frag['captures'][group] = []
    return result","The goal of the `merge_tokens` function is to take a list of tokens, group them based on certain criteria, and merge them into fragments. Each fragment will contain information about the tokens that were grouped together, such as their indices, matched values, and captures for different groups. The function ensures that only fragments with a minimum number of matches are included in the final result. The function also handles cases where some groups may not have any captures by filling in empty lists for those groups in each fragment.",1,"def merge_tokens(self, tokens):
    grouped_tokens = []
    current_group = []

    for token in tokens:
        if criteria_met(token):  # Check if token meets certain criteria
            current_group.append(token)
        else:
            if len(current_group) >= min_matches:
                grouped_tokens.append(create_fragment(current_group))  # Create fragment with current group
            current_group = []

    if len(current_group) >= min_matches:
        grouped_tokens.append(create_fragment(current_group))

    return grouped_tokens

def criteria_met(token):
    # Define criteria for grouping tokens
    pass

def create_fragment(group):
    # Create fragment with information about grouped tokens
    pass

# Constants
min_matches = 2","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    MIN_MATCHES = 2
    ALL_GROUPS = ['day', 'month', 'year']
    frag = self.DateFragment()
    result = []
    current_fragment = None
    for token in tokens:
        group = token.get('group')
        if not group:
            if current_fragment:
                if len(current_fragment['captures']) >= MIN_MATCHES:
                    result.append(current_fragment)
                else:
                    del current_fragment
            current_fragment = {'indices': [], 'match': '', 'captures': {}}
            for g in ALL_GROUPS:
                current_fragment['captures'][g] = []
        if group:
            if not current_fragment:
                current_fragment = {'indices': [], 'match': '', 'captures': {}}
                for g in ALL_GROUPS:
                    current_fragment['captures'][g] = []
            current_fragment['indices'].append(token.get('index'))
            current_fragment['match'] += token.get('value')
            current_fragment['captures'][group].append(token.get('value'))
    if current_fragment and len(current_fragment['captures']) >= MIN_MATCHES:
        result.append(current_fragment)
    for frag in result:
        for group in ALL_GROUPS:
            if group not in frag['captures']:
                frag['captures'][group] = []
    return result","The goal of the `merge_tokens` function is to take a list of tokens, group them based on certain criteria, and merge them into fragments. Each fragment will contain information about the tokens that were grouped together, such as their indices, matched values, and captures for different groups. The function ensures that only fragments with a minimum number of matches are included in the final result. The function also handles cases where some groups may not have any captures by filling in empty lists for those groups in each fragment.",2,"def merge_tokens(self, tokens):
    fragments = []
    fragment = {}
    min_matches = 2
    
    for idx, token in enumerate(tokens):
        # Group tokens based on certain criteria
        key = token % 2  # Example grouping criteria
        
        if key not in fragment:
            fragment[key] = {
                'indices': [idx],
                'matched_values': [token],
                'captures': [[] for _ in range(3)]  # Assuming 3 capture groups
            }
        else:
            fragment[key]['indices'].append(idx)
            fragment[key]['matched_values'].append(token)
        
        # Check if fragment meets minimum number of matches
        if len(fragment[key]['indices']) >= min_matches:
            fragments.append(fragment[key])
            fragment.pop(key)
    
    return fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    MIN_MATCHES = 2
    ALL_GROUPS = ['day', 'month', 'year']
    frag = self.DateFragment()
    result = []
    current_fragment = None
    for token in tokens:
        group = token.get('group')
        if not group:
            if current_fragment:
                if len(current_fragment['captures']) >= MIN_MATCHES:
                    result.append(current_fragment)
                else:
                    del current_fragment
            current_fragment = {'indices': [], 'match': '', 'captures': {}}
            for g in ALL_GROUPS:
                current_fragment['captures'][g] = []
        if group:
            if not current_fragment:
                current_fragment = {'indices': [], 'match': '', 'captures': {}}
                for g in ALL_GROUPS:
                    current_fragment['captures'][g] = []
            current_fragment['indices'].append(token.get('index'))
            current_fragment['match'] += token.get('value')
            current_fragment['captures'][group].append(token.get('value'))
    if current_fragment and len(current_fragment['captures']) >= MIN_MATCHES:
        result.append(current_fragment)
    for frag in result:
        for group in ALL_GROUPS:
            if group not in frag['captures']:
                frag['captures'][group] = []
    return result","The goal of the `merge_tokens` function is to take a list of tokens, group them based on certain criteria, and merge them into fragments. Each fragment will contain information about the tokens that were grouped together, such as their indices, matched values, and captures for different groups. The function ensures that only fragments with a minimum number of matches are included in the final result. The function also handles cases where some groups may not have any captures by filling in empty lists for those groups in each fragment.",3,"def merge_tokens(self, tokens):
    grouped_tokens = []
    current_group = []

    for index, token in enumerate(tokens):
        if len(current_group) > 0 and token == current_group[-1][1]:
            current_group.append((index, token))
        else:
            if len(current_group) >= self.min_matches:
                grouped_tokens.append({
                    ""indices"": [t[0] for t in current_group],
                    ""matched_values"": [t[1] for t in current_group],
                    ""captures"": [[] for _ in self.groups],
                })
            current_group = [(index, token)]

    if len(current_group) >= self.min_matches:
        grouped_tokens.append({
            ""indices"": [t[0] for t in current_group],
            ""matched_values"": [t[1] for t in current_group],
            ""captures"": [[] for _ in self.groups],
        })

    return grouped_tokens","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the `_find_and_replace` function is to take a date string and a set of captures, which may include timezones, and replace specific patterns within the date string based on predefined replacements. It also removes the timezone information from the captures before returning the modified date string. This function is designed to handle multiple timezone matches by prioritizing the last sorted capture. If it is part of a class, it likely interacts with other class methods or attributes to process and manipulate the date string and captures effectively.",1,"def _find_and_replace(self, date_string, captures):
    replacements = {
        'pattern1': 'replacement1',
        'pattern2': 'replacement2',
        'pattern3': 'replacement3'
    }

    clean_captures = []
    for capture in captures:
        clean_captures.append(re.sub(r'\+\d{2}:?\d{2}$', '', capture))  # Remove timezone information

    sorted_captures = sorted(clean_captures, key=lambda x: x.split()[-1])  # Sort captures by timezone

    modified_date_string = date_string
    for pattern, replacement in replacements.items():
        modified_date_string = re.sub(pattern, replacement, modified_date_string)

    return modified_date_string","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the `_find_and_replace` function is to take a date string and a set of captures, which may include timezones, and replace specific patterns within the date string based on predefined replacements. It also removes the timezone information from the captures before returning the modified date string. This function is designed to handle multiple timezone matches by prioritizing the last sorted capture. If it is part of a class, it likely interacts with other class methods or attributes to process and manipulate the date string and captures effectively.",2,Invalid Syntax / No valid code,N/A,Failed,[],[],0,0
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the `_find_and_replace` function is to take a date string and a set of captures, which may include timezones, and replace specific patterns within the date string based on predefined replacements. It also removes the timezone information from the captures before returning the modified date string. This function is designed to handle multiple timezone matches by prioritizing the last sorted capture. If it is part of a class, it likely interacts with other class methods or attributes to process and manipulate the date string and captures effectively.",3,"def _find_and_replace(self, date_string, captures):
    replacements = {
        ""pattern1"": ""replacement1"",
        ""pattern2"": ""replacement2"",
        ""pattern3"": ""replacement3""
    }

    captures_without_timezone = []
    for capture in captures:
        if 'timezone' in capture:
            del capture['timezone']
        captures_without_timezone.append(capture)

    modified_date_string = date_string
    for pattern, replacement in replacements.items():
        modified_date_string = modified_date_string.replace(pattern, replacement)

    return modified_date_string, captures_without_timezone","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","The goal of this function is to take a naive datetime object and add a timezone information object to it. This will convert the naive datetime into a datetime object with timezone information, making it timezone-aware. If the input datetime object is None, the function will return None. The timezone information is obtained based on the provided timezone string using dateutil's tz.gettz function.",1,Invalid Syntax / No valid code,N/A,Failed,[],[],0,0
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","The goal of this function is to take a naive datetime object and add a timezone information object to it. This will convert the naive datetime into a datetime object with timezone information, making it timezone-aware. If the input datetime object is None, the function will return None. The timezone information is obtained based on the provided timezone string using dateutil's tz.gettz function.",2,"def _add_tzinfo(self, datetime_obj, tz_string):
    if datetime_obj is None:
        return None
    
    from dateutil import tz
    
    timezone_info = tz.gettz(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=timezone_info)
    
    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","The goal of this function is to take a naive datetime object and add a timezone information object to it. This will convert the naive datetime into a datetime object with timezone information, making it timezone-aware. If the input datetime object is None, the function will return None. The timezone information is obtained based on the provided timezone string using dateutil's tz.gettz function.",3,"def _add_tzinfo(self, datetime_obj, tz_string):
    if datetime_obj is None:
        return None
    else:
        from dateutil import tz
        timezone = tz.gettz(tz_string)
        return datetime_obj.replace(tzinfo=timezone)","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","This function is designed to extract date strings from a given text. It takes into account the starting position of the text and whether to strictly filter the extracted dates based on their format. 
If used as a standalone function, it recursively splits the input text and tokenizes it to identify date patterns, returning the matched date strings along with their indices and captured date components. 
If it is a class method, it likely belongs to a class that has methods for splitting date ranges and tokenizing strings, and it may interact with class attributes related to text processing.",1,"def extract_date_strings_inner(self, text, text_start, strict):
    def extract_dates(text, start_index, strict_filter):
        # Your implementation here
        pass
    
    return extract_dates(text, text_start, strict)","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","This function is designed to extract date strings from a given text. It takes into account the starting position of the text and whether to strictly filter the extracted dates based on their format. 
If used as a standalone function, it recursively splits the input text and tokenizes it to identify date patterns, returning the matched date strings along with their indices and captured date components. 
If it is a class method, it likely belongs to a class that has methods for splitting date ranges and tokenizing strings, and it may interact with class attributes related to text processing.",2,"def extract_date_strings_inner(self, text, text_start, strict):
    def extract_dates(text, start_pos, strict):
        # Function logic remains the same
        pass
    
    return extract_dates(text, text_start, strict)","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","This function is designed to extract date strings from a given text. It takes into account the starting position of the text and whether to strictly filter the extracted dates based on their format. 
If used as a standalone function, it recursively splits the input text and tokenizes it to identify date patterns, returning the matched date strings along with their indices and captured date components. 
If it is a class method, it likely belongs to a class that has methods for splitting date ranges and tokenizing strings, and it may interact with class attributes related to text processing.",3,"def extract_date_strings_inner(self, text, text_start, strict):
    def extract_dates(input_text):
        # Function logic remains the same
        # Add your variations here if needed
        return extracted_dates
    
    return extract_dates(text)","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The `tokenize_string` function aims to extract matches of a specific date format from a given text. It then organizes these matches into a list of tuples containing the matched text, the group to which it belongs, and any additional captures. This function plays a crucial role in preparing potential date strings for further processing, such as composing them into recognizable date formats.",1,"def tokenize_string(self, text):
    import re
    
    date_pattern = r'\b(\d{1,2})[-/.](\d{1,2})[-/.](\d{2,4})\b'
    matches = re.findall(date_pattern, text)
    
    result = []
    for match in matches:
        result.append((match[0] + '-' + match[1] + '-' + match[2], 'date', None))
        
    return result","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The `tokenize_string` function aims to extract matches of a specific date format from a given text. It then organizes these matches into a list of tuples containing the matched text, the group to which it belongs, and any additional captures. This function plays a crucial role in preparing potential date strings for further processing, such as composing them into recognizable date formats.",2,"def tokenize_string(self, text):
    import re
    
    date_regex = r'(\d{2}/\d{2}/\d{4})'
    matches = re.findall(date_regex, text)
    
    extracted_dates = []
    for match in matches:
        extracted_dates.append((match, 'date', None))
    
    return extracted_dates","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The `tokenize_string` function aims to extract matches of a specific date format from a given text. It then organizes these matches into a list of tuples containing the matched text, the group to which it belongs, and any additional captures. This function plays a crucial role in preparing potential date strings for further processing, such as composing them into recognizable date formats.",3,"def tokenize_string(self, text):
    import re
    
    date_pattern = r'(\d{1,2}/\d{1,2}/\d{2,4})'
    matches = re.findall(date_pattern, text)
    
    tokenized_list = []
    for match in matches:
        tokenized_list.append((match, 'date', None))
    
    return tokenized_list","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merges tokens into DateFragment objects based on their group affiliations and capture counts.
    
    Args:
    tokens (list): A list of tokens, each containing a matched text, a group identifier, and capture groups.
    
    Returns:
    list: A list of DateFragment objects representing merged date fragments.
    """"""
    fragments = []
    frag = None
    start_char = 0
    total_chars = 0
    for token in tokens:
        total_chars += len(token['text'])
        if 'group' not in token or token['group'] is None:
            if frag is not None and len(frag.captures) >= self.MIN_MATCHES:
                fragments.append(frag)
                frag = None
        else:
            if frag is None:
                frag = self.DateFragment(start_char, total_chars - len(token['text']), token['text'], {})
            frag.end_char = total_chars
            frag.match_str += token['text']
            for key, value in token.get('captures', {}).items():
                if key not in frag.captures:
                    frag.captures[key] = []
                frag.captures[key].extend(value)
    if frag is not None and len(frag.captures) >= self.MIN_MATCHES:
        fragments.append(frag)
    for frag in fragments:
        for group in self.ALL_GROUPS:
            if group not in frag.captures:
                frag.captures[group] = []
    return fragments","The function `merge_tokens` takes a list of tokens, each representing a matched text, a group identifier, and capture groups. It merges these tokens into DateFragment objects based on their group affiliations and capture counts. The goal is to create merged date fragments from the tokens provided, ensuring that each DateFragment object meets a minimum number of capture matches. The function then returns a list of these merged DateFragment objects. 

If this function is within a class context, it interacts with the class attributes such as `MIN_MATCHES` and `ALL_GROUPS` to determine the criteria for merging the tokens and initializing the DateFragment objects.",1,"def merge_tokens(self, tokens):
    merged_fragments = []
    for token in tokens:
        group_id = token[1]
        capture_groups = token[2]
        
        if len(capture_groups) >= self.MIN_MATCHES and group_id in self.ALL_GROUPS:
            new_fragment = DateFragment(group_id, capture_groups)
            merged_fragments.append(new_fragment)
    
    return merged_fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merges tokens into DateFragment objects based on their group affiliations and capture counts.
    
    Args:
    tokens (list): A list of tokens, each containing a matched text, a group identifier, and capture groups.
    
    Returns:
    list: A list of DateFragment objects representing merged date fragments.
    """"""
    fragments = []
    frag = None
    start_char = 0
    total_chars = 0
    for token in tokens:
        total_chars += len(token['text'])
        if 'group' not in token or token['group'] is None:
            if frag is not None and len(frag.captures) >= self.MIN_MATCHES:
                fragments.append(frag)
                frag = None
        else:
            if frag is None:
                frag = self.DateFragment(start_char, total_chars - len(token['text']), token['text'], {})
            frag.end_char = total_chars
            frag.match_str += token['text']
            for key, value in token.get('captures', {}).items():
                if key not in frag.captures:
                    frag.captures[key] = []
                frag.captures[key].extend(value)
    if frag is not None and len(frag.captures) >= self.MIN_MATCHES:
        fragments.append(frag)
    for frag in fragments:
        for group in self.ALL_GROUPS:
            if group not in frag.captures:
                frag.captures[group] = []
    return fragments","The function `merge_tokens` takes a list of tokens, each representing a matched text, a group identifier, and capture groups. It merges these tokens into DateFragment objects based on their group affiliations and capture counts. The goal is to create merged date fragments from the tokens provided, ensuring that each DateFragment object meets a minimum number of capture matches. The function then returns a list of these merged DateFragment objects. 

If this function is within a class context, it interacts with the class attributes such as `MIN_MATCHES` and `ALL_GROUPS` to determine the criteria for merging the tokens and initializing the DateFragment objects.",2,"def merge_tokens(self, tokens):
    merged_fragments = []
    for token in tokens:
        # Logic to merge tokens into DateFragment objects
        # based on group affiliations and capture counts
        pass
    return merged_fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merges tokens into DateFragment objects based on their group affiliations and capture counts.
    
    Args:
    tokens (list): A list of tokens, each containing a matched text, a group identifier, and capture groups.
    
    Returns:
    list: A list of DateFragment objects representing merged date fragments.
    """"""
    fragments = []
    frag = None
    start_char = 0
    total_chars = 0
    for token in tokens:
        total_chars += len(token['text'])
        if 'group' not in token or token['group'] is None:
            if frag is not None and len(frag.captures) >= self.MIN_MATCHES:
                fragments.append(frag)
                frag = None
        else:
            if frag is None:
                frag = self.DateFragment(start_char, total_chars - len(token['text']), token['text'], {})
            frag.end_char = total_chars
            frag.match_str += token['text']
            for key, value in token.get('captures', {}).items():
                if key not in frag.captures:
                    frag.captures[key] = []
                frag.captures[key].extend(value)
    if frag is not None and len(frag.captures) >= self.MIN_MATCHES:
        fragments.append(frag)
    for frag in fragments:
        for group in self.ALL_GROUPS:
            if group not in frag.captures:
                frag.captures[group] = []
    return fragments","The function `merge_tokens` takes a list of tokens, each representing a matched text, a group identifier, and capture groups. It merges these tokens into DateFragment objects based on their group affiliations and capture counts. The goal is to create merged date fragments from the tokens provided, ensuring that each DateFragment object meets a minimum number of capture matches. The function then returns a list of these merged DateFragment objects. 

If this function is within a class context, it interacts with the class attributes such as `MIN_MATCHES` and `ALL_GROUPS` to determine the criteria for merging the tokens and initializing the DateFragment objects.",3,"def merge_tokens(self, tokens):
    merged_fragments = []
    for token in tokens:
        group_id = token[1]
        capture_count = len(token[2])
        if group_id in self.ALL_GROUPS and capture_count >= self.MIN_MATCHES:
            new_fragment = DateFragment(token[0], group_id, token[2])
            merged_fragments.append(new_fragment)
    
    return merged_fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the `_find_and_replace` function is to search for specific patterns in a given date string, replace them with predefined values, and return the modified date string along with a timezone string. It also prioritizes certain replacements based on a set of captures, particularly timezones. This function is designed to handle multiple timezone matches and ensure that the last sorted timezone capture takes precedence during the replacement process.",1,"def _find_and_replace(self, date_string, captures):
    new_date_string = date_string
    timezone = """"

    for capture in sorted(captures, key=lambda x: x[0], reverse=True):
        pattern = capture[0]
        replacement = capture[1]
        if pattern in date_string:
            new_date_string = new_date_string.replace(pattern, replacement)
            timezone = replacement

    return new_date_string, timezone","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the `_find_and_replace` function is to search for specific patterns in a given date string, replace them with predefined values, and return the modified date string along with a timezone string. It also prioritizes certain replacements based on a set of captures, particularly timezones. This function is designed to handle multiple timezone matches and ensure that the last sorted timezone capture takes precedence during the replacement process.",2,"def _find_and_replace(self, date_string, captures):
    new_date_string = date_string
    
    timezone_captures = [capture for capture in captures if 'timezone' in capture]
    sorted_timezones = sorted(timezone_captures, key=lambda x: x['priority'])

    for timezone_capture in sorted_timezones:
        pattern = timezone_capture['pattern']
        replacement = timezone_capture['replacement']
        new_date_string = new_date_string.replace(pattern, replacement)

    return new_date_string, ""UTC""","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the `_find_and_replace` function is to search for specific patterns in a given date string, replace them with predefined values, and return the modified date string along with a timezone string. It also prioritizes certain replacements based on a set of captures, particularly timezones. This function is designed to handle multiple timezone matches and ensure that the last sorted timezone capture takes precedence during the replacement process.",3,"def _find_and_replace(self, date_string, captures):
    new_date_string = date_string
    timezone = """"

    sorted_captures = sorted(captures, key=lambda x: x[1], reverse=True)

    for pattern, replacement, capture_value in sorted_captures:
        new_date_string = new_date_string.replace(pattern, replacement)
        if capture_value.startswith(""timezone""):
            timezone = capture_value

    return new_date_string, timezone","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)",This function is designed to take a naive datetime object and add timezone information to it using the `dateutil` library. The goal is to convert a datetime object without timezone information into one with timezone information specified by the input `tz_string`. This allows for proper handling and representation of time with respect to the specified timezone.,1,"def _add_tzinfo(self, datetime_obj, tz_string):
    from dateutil import tz
    
    tzinfo = tz.gettz(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=tzinfo)
    
    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)",This function is designed to take a naive datetime object and add timezone information to it using the `dateutil` library. The goal is to convert a datetime object without timezone information into one with timezone information specified by the input `tz_string`. This allows for proper handling and representation of time with respect to the specified timezone.,2,"def _add_tzinfo(self, datetime_obj, tz_string):
    from dateutil import tz
    
    tzinfo = tz.gettz(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=tzinfo)
    
    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)",This function is designed to take a naive datetime object and add timezone information to it using the `dateutil` library. The goal is to convert a datetime object without timezone information into one with timezone information specified by the input `tz_string`. This allows for proper handling and representation of time with respect to the specified timezone.,3,"def _add_tzinfo(self, datetime_obj, tz_string):
    from dateutil import tz
    
    new_datetime_obj = datetime_obj.replace(tzinfo=tz.gettz(tz_string))
    
    return new_datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","This function, extract_date_strings_inner, aims to extract date strings from a given text. It takes into consideration the possibility of a text range and recursively extracts date strings within the specified range. If the 'strict' parameter is set to True, it ensures that the extracted date strings are complete (contain all necessary date components like day, month, and year). The function tokenizes the text, merges tokens, and then searches for date-related patterns to extract the date strings along with their indices and captured components like digits, months, and years. The extracted date strings are then cleaned up and returned as output.",1,Invalid Syntax / No valid code,N/A,Failed,[],[],0,0
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","This function, extract_date_strings_inner, aims to extract date strings from a given text. It takes into consideration the possibility of a text range and recursively extracts date strings within the specified range. If the 'strict' parameter is set to True, it ensures that the extracted date strings are complete (contain all necessary date components like day, month, and year). The function tokenizes the text, merges tokens, and then searches for date-related patterns to extract the date strings along with their indices and captured components like digits, months, and years. The extracted date strings are then cleaned up and returned as output.",2,Invalid Syntax / No valid code,N/A,Failed,[],[],0,0
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","This function, extract_date_strings_inner, aims to extract date strings from a given text. It takes into consideration the possibility of a text range and recursively extracts date strings within the specified range. If the 'strict' parameter is set to True, it ensures that the extracted date strings are complete (contain all necessary date components like day, month, and year). The function tokenizes the text, merges tokens, and then searches for date-related patterns to extract the date strings along with their indices and captured components like digits, months, and years. The extracted date strings are then cleaned up and returned as output.",3,"def extract_date_strings_inner(self, text, text_start, strict):
    def extract_dates(text, strict):
        # Function to extract date strings from given text
        extracted_dates = []
        # Extract date strings logic here
        return extracted_dates

    def merge_tokens(tokens):
        # Function to merge tokens logic here
        merged_tokens = []
        return merged_tokens

    def search_for_patterns(text):
        # Function to search for date-related patterns logic here
        date_patterns = []
        return date_patterns

    def clean_up_dates(extracted_dates):
        # Function to clean up extracted date strings logic here
        cleaned_dates = []
        return cleaned_dates

    # Main logic of the function
    extracted_dates = extract_dates(text, strict)
    merged_tokens = merge_tokens(text)
    date_patterns = search_for_patterns(merged_tokens)
    cleaned_dates = clean_up_dates(date_patterns)

    return cleaned_dates","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The goal of the `tokenize_string` function is to extract matches from a given source text based on a predefined regex pattern for dates. These matches will be used to compose potential date strings later on. The function iterates through the text, identifies date matches, determines their group category, and returns a list of tuples containing the match text, group category, and captures dictionary. This function is likely part of a larger class that handles text processing and date extraction tasks.",1,"def tokenize_string(self, text):
    import re

    regex_pattern = r'(\d{1,2})/(\d{1,2})/(\d{4})'  # Custom regex pattern for dates

    matches = re.finditer(regex_pattern, text)
    results = []

    for match in matches:
        match_text = match.group(0)
        group_category = 'date'
        captures = match.groupdict()

        results.append((match_text, group_category, captures))

    return results","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The goal of the `tokenize_string` function is to extract matches from a given source text based on a predefined regex pattern for dates. These matches will be used to compose potential date strings later on. The function iterates through the text, identifies date matches, determines their group category, and returns a list of tuples containing the match text, group category, and captures dictionary. This function is likely part of a larger class that handles text processing and date extraction tasks.",2,"def tokenize_string(self, text):
    import re
    
    def extract_dates(text):
        regex_pattern = r'(\d{1,2}[./-]\d{1,2}[./-]\d{2,4})'
        matches = re.finditer(regex_pattern, text)
        date_list = []
        for match in matches:
            date_string = match.group(0)
            date_list.append((date_string, 'date', match.groupdict()))
        return date_list
    
    return extract_dates(text)","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The goal of the `tokenize_string` function is to extract matches from a given source text based on a predefined regex pattern for dates. These matches will be used to compose potential date strings later on. The function iterates through the text, identifies date matches, determines their group category, and returns a list of tuples containing the match text, group category, and captures dictionary. This function is likely part of a larger class that handles text processing and date extraction tasks.",3,"def tokenize_string(self, text):
    import re

    regex_pattern = r'(\d{1,2}[-/]\d{1,2}[-/]\d{2,4})'  # Updated regex pattern for dates

    matches = re.finditer(regex_pattern, text)
    
    result = []
    for match in matches:
        match_text = match.group(0)
        group_category = 'date'
        captures = match.groupdict()

        result.append((match_text, group_category, captures))

    return result","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merges a list of tokens into a list of DateFragment objects.

    Args:
    tokens (list): A list of tokens, where each token contains a matched text, a group identifier, and capture groups.

    Returns:
    list: A list of DateFragment objects, where each object represents a merged date fragment.
    """"""
    fragments = []
    start_char = 0
    total_chars = 0
    frag = DateFragment()
    for token in tokens:
        total_chars += len(token['text'])
        if token['group'] is None:
            if frag.get_captures_count() >= MIN_MATCHES:
                fragments.append(frag)
                frag = DateFragment()
        else:
            frag.update_indices(start_char, total_chars)
            frag.match_string += token['text']
            for group_id, captures in token['captures'].items():
                if group_id not in frag.captures:
                    frag.captures[group_id] = []
                frag.captures[group_id].extend(captures)
        start_char = total_chars
    if frag.get_captures_count() >= MIN_MATCHES:
        fragments.append(frag)
    for frag in fragments:
        for group_id in ALL_GROUPS:
            if group_id not in frag.captures:
                frag.captures[group_id] = []
    return fragments","The goal of the `merge_tokens` function is to take a list of tokens, each containing text, a group identifier, and capture groups, and merge them into DateFragment objects. Each DateFragment object represents a merged date fragment obtained from the tokens. The function processes the tokens by concatenating text, updating indices, and combining capture groups. It then outputs a list of DateFragment objects that meet a minimum number of matches. If the function is part of a class, it likely interacts with class attributes or methods to handle and process the tokens within the context of the class.",1,"def merge_tokens(self, tokens):
    merged_fragments = []
    current_fragment = None
    
    for token in tokens:
        if current_fragment is None:
            current_fragment = DateFragment(token.text, token.group_id, token.capture_groups)
        else:
            if current_fragment.group_id == token.group_id:
                current_fragment.text += token.text
                current_fragment.capture_groups.update(token.capture_groups)
            else:
                if len(current_fragment.capture_groups) >= MIN_MATCHES:
                    merged_fragments.append(current_fragment)
                current_fragment = DateFragment(token.text, token.group_id, token.capture_groups)
    
    if current_fragment is not None and len(current_fragment.capture_groups) >= MIN_MATCHES:
        merged_fragments.append(current_fragment)
    
    return merged_fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merges a list of tokens into a list of DateFragment objects.

    Args:
    tokens (list): A list of tokens, where each token contains a matched text, a group identifier, and capture groups.

    Returns:
    list: A list of DateFragment objects, where each object represents a merged date fragment.
    """"""
    fragments = []
    start_char = 0
    total_chars = 0
    frag = DateFragment()
    for token in tokens:
        total_chars += len(token['text'])
        if token['group'] is None:
            if frag.get_captures_count() >= MIN_MATCHES:
                fragments.append(frag)
                frag = DateFragment()
        else:
            frag.update_indices(start_char, total_chars)
            frag.match_string += token['text']
            for group_id, captures in token['captures'].items():
                if group_id not in frag.captures:
                    frag.captures[group_id] = []
                frag.captures[group_id].extend(captures)
        start_char = total_chars
    if frag.get_captures_count() >= MIN_MATCHES:
        fragments.append(frag)
    for frag in fragments:
        for group_id in ALL_GROUPS:
            if group_id not in frag.captures:
                frag.captures[group_id] = []
    return fragments","The goal of the `merge_tokens` function is to take a list of tokens, each containing text, a group identifier, and capture groups, and merge them into DateFragment objects. Each DateFragment object represents a merged date fragment obtained from the tokens. The function processes the tokens by concatenating text, updating indices, and combining capture groups. It then outputs a list of DateFragment objects that meet a minimum number of matches. If the function is part of a class, it likely interacts with class attributes or methods to handle and process the tokens within the context of the class.",2,"def merge_tokens(self, tokens):
    merged_fragments = []
    current_fragment = None
    
    for token in tokens:
        if current_fragment is None:
            current_fragment = DateFragment(token.text, token.group_id, token.capture_groups)
        else:
            if current_fragment.group_id == token.group_id:
                current_fragment.text += token.text
                current_fragment.capture_groups.update(token.capture_groups)
            else:
                if len(current_fragment.capture_groups) >= MIN_MATCHES:
                    merged_fragments.append(current_fragment)
                current_fragment = DateFragment(token.text, token.group_id, token.capture_groups)
    
    if current_fragment is not None and len(current_fragment.capture_groups) >= MIN_MATCHES:
        merged_fragments.append(current_fragment)
    
    return merged_fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merges a list of tokens into a list of DateFragment objects.

    Args:
    tokens (list): A list of tokens, where each token contains a matched text, a group identifier, and capture groups.

    Returns:
    list: A list of DateFragment objects, where each object represents a merged date fragment.
    """"""
    fragments = []
    start_char = 0
    total_chars = 0
    frag = DateFragment()
    for token in tokens:
        total_chars += len(token['text'])
        if token['group'] is None:
            if frag.get_captures_count() >= MIN_MATCHES:
                fragments.append(frag)
                frag = DateFragment()
        else:
            frag.update_indices(start_char, total_chars)
            frag.match_string += token['text']
            for group_id, captures in token['captures'].items():
                if group_id not in frag.captures:
                    frag.captures[group_id] = []
                frag.captures[group_id].extend(captures)
        start_char = total_chars
    if frag.get_captures_count() >= MIN_MATCHES:
        fragments.append(frag)
    for frag in fragments:
        for group_id in ALL_GROUPS:
            if group_id not in frag.captures:
                frag.captures[group_id] = []
    return fragments","The goal of the `merge_tokens` function is to take a list of tokens, each containing text, a group identifier, and capture groups, and merge them into DateFragment objects. Each DateFragment object represents a merged date fragment obtained from the tokens. The function processes the tokens by concatenating text, updating indices, and combining capture groups. It then outputs a list of DateFragment objects that meet a minimum number of matches. If the function is part of a class, it likely interacts with class attributes or methods to handle and process the tokens within the context of the class.",3,"def merge_tokens(self, tokens):
    merged_date_fragments = []
    
    for token in tokens:
        # Process token here
        
        # Create DateFragment object and append to merged_date_fragments if meets conditions
        if token.text.startswith(""Date""):
            date_fragment = DateFragment(token.text, token.group_identifier, token.capture_groups)
            merged_date_fragments.append(date_fragment)
    
    return merged_date_fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the `_find_and_replace` function is to search for specific patterns in a given `date_string`, replace them with predefined values, and return the modified `date_string` along with a timezone string. It also updates the timezone string based on captures found in the `date_string`. If multiple timezone captures exist, the function selects the last sorted capture. This function is likely part of a larger class that deals with manipulating date strings and timezones.",1,"def _find_and_replace(self, date_string, captures):
    modified_date_string = date_string.replace(""pattern1"", ""replacement1"").replace(""pattern2"", ""replacement2"")
    timezone_string = ""UTC""
    
    for capture in captures:
        if capture in date_string:
            timezone_string = capture
    
    return modified_date_string, timezone_string","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the `_find_and_replace` function is to search for specific patterns in a given `date_string`, replace them with predefined values, and return the modified `date_string` along with a timezone string. It also updates the timezone string based on captures found in the `date_string`. If multiple timezone captures exist, the function selects the last sorted capture. This function is likely part of a larger class that deals with manipulating date strings and timezones.",2,"def _find_and_replace(self, date_string, captures):
    modified_date_string = date_string
    timezone = """"

    for capture in captures:
        if capture in modified_date_string:
            modified_date_string = modified_date_string.replace(capture, captures[capture])
            timezone = captures[capture]

    timezone_captures = re.findall(r""\b[A-Z]{3}\b"", modified_date_string)
    if timezone_captures:
        timezone = sorted(timezone_captures)[-1]

    return modified_date_string, timezone","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the `_find_and_replace` function is to search for specific patterns in a given `date_string`, replace them with predefined values, and return the modified `date_string` along with a timezone string. It also updates the timezone string based on captures found in the `date_string`. If multiple timezone captures exist, the function selects the last sorted capture. This function is likely part of a larger class that deals with manipulating date strings and timezones.",3,"def _find_and_replace(self, date_string, captures):
    new_date_string = date_string.replace(""pattern1"", ""replacement1"").replace(""pattern2"", ""replacement2"")
    timezone = ""UTC""
    for capture in captures:
        if capture in date_string:
            timezone = capture
    return new_date_string, timezone","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","This function aims to take a naive datetime object and add a timezone information to it using the dateutil library. The goal is to convert a naive datetime into a datetime object with timezone information specified by the input tz_string. If the input datetime object is None, the function returns None.",1,"def _add_tzinfo(self, datetime_obj, tz_string):
    if datetime_obj is None:
        return None
    
    from dateutil import tz
    from dateutil.parser import parse
    
    tzinfo = tz.gettz(tz_string)
    if tzinfo is None:
        return None
    
    return datetime_obj.replace(tzinfo=tzinfo)","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","This function aims to take a naive datetime object and add a timezone information to it using the dateutil library. The goal is to convert a naive datetime into a datetime object with timezone information specified by the input tz_string. If the input datetime object is None, the function returns None.",2,"def _add_tzinfo(self, datetime_obj, tz_string):
    if datetime_obj is None:
        return None
    else:
        from dateutil import tz
        return datetime_obj.replace(tzinfo=tz.gettz(tz_string))","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","This function aims to take a naive datetime object and add a timezone information to it using the dateutil library. The goal is to convert a naive datetime into a datetime object with timezone information specified by the input tz_string. If the input datetime object is None, the function returns None.",3,"def _add_tzinfo(self, datetime_obj, tz_string):
    if datetime_obj is None:
        return None
    else:
        from dateutil import tz
        return datetime_obj.replace(tzinfo=tz.gettz(tz_string))","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The goal of this function is to extract date strings from a given text input. It takes into account the text starting position, and has an option to enforce strict parsing rules. The function tokenizes the text, merges tokens, and then identifies date-related information such as digits, months, and years within the text. It then filters out incomplete date matches based on the strict parameter, and returns the cleaned date strings along with their indices in the text. The function may be part of a class, interacting with class attributes or other methods to process and extract date information from the text input.",1,"def extract_date_strings_inner(self, text, text_start, strict):
    tokens = tokenize(text)
    merged_tokens = merge_tokens(tokens)
    
    dates = []
    for i, token in enumerate(merged_tokens):
        if is_date(token):
            date_str = extract_date(token)
            if strict and not is_complete_date(date_str):
                continue
            dates.append((date_str, text_start + i))
    
    return dates",N/A,Execution error: '>' not supported between instances of 'str' and 'int',0,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The goal of this function is to extract date strings from a given text input. It takes into account the text starting position, and has an option to enforce strict parsing rules. The function tokenizes the text, merges tokens, and then identifies date-related information such as digits, months, and years within the text. It then filters out incomplete date matches based on the strict parameter, and returns the cleaned date strings along with their indices in the text. The function may be part of a class, interacting with class attributes or other methods to process and extract date information from the text input.",2,"def extract_date_strings_inner(self, text, text_start, strict):
    tokens = self.tokenize_text(text)
    merged_tokens = self.merge_tokens(tokens)
    date_strings = self.find_date_info(merged_tokens)
    cleaned_date_strings = self.filter_incomplete_dates(date_strings, strict)
    cleaned_date_indices = self.get_date_indices(merged_tokens, cleaned_date_strings)
    return cleaned_date_strings, cleaned_date_indices",N/A,Execution error: '>' not supported between instances of 'str' and 'int',0,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The goal of this function is to extract date strings from a given text input. It takes into account the text starting position, and has an option to enforce strict parsing rules. The function tokenizes the text, merges tokens, and then identifies date-related information such as digits, months, and years within the text. It then filters out incomplete date matches based on the strict parameter, and returns the cleaned date strings along with their indices in the text. The function may be part of a class, interacting with class attributes or other methods to process and extract date information from the text input.",3,"def extract_date_strings_inner(self, text, text_start, strict=False):
    tokens = []
    merged_tokens = []

    # Tokenize the text
    # Merge tokens
    # Identify date-related information
    # Filter out incomplete date matches based on strict parameter

    cleaned_date_strings = []
    indices = []

    return cleaned_date_strings, indices",N/A,Execution error: '>' not supported between instances of 'str' and 'int',0,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The function `tokenize_string` takes in a source text and extracts matches based on a predefined regular expression for dates. It then organizes these matches into tuples containing the matched text, group classification, and capture information. The function aims to break down the source text into manageable pieces that can later be used to compose potential date strings.",1,"def tokenize_string(self, text):
    import re
    
    pattern = r'\d{1,2}[/\-]\d{1,2}[/\-]\d{2,4}'
    matches = re.finditer(pattern, text)
    
    tokens = []
    for match in matches:
        matched_text = match.group()
        group_classification = 'date'
        capture_info = match.start(), match.end()
        tokens.append((matched_text, group_classification, capture_info))
    
    return tokens","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","0 Passed, 9 Failed",0,9,"['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","['Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name']"
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The function `tokenize_string` takes in a source text and extracts matches based on a predefined regular expression for dates. It then organizes these matches into tuples containing the matched text, group classification, and capture information. The function aims to break down the source text into manageable pieces that can later be used to compose potential date strings.",2,"def tokenize_string(self, text):
    import re
    
    pattern = r'\b(\d{1,2}[-/]\d{1,2}[-/]\d{2,4})\b'
    matches = re.finditer(pattern, text)
    
    tokens = []
    for match in matches:
        tokens.append((match.group(0), 'date', match.span()))
    
    return tokens","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","0 Passed, 9 Failed",0,9,"['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","['Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name']"
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The function `tokenize_string` takes in a source text and extracts matches based on a predefined regular expression for dates. It then organizes these matches into tuples containing the matched text, group classification, and capture information. The function aims to break down the source text into manageable pieces that can later be used to compose potential date strings.",3,"def tokenize_string(self, text):
    import re
    
    pattern = r'\d{1,2}/\d{1,2}/\d{2,4}'  # Define a regex pattern for date matching
    
    matches = re.finditer(pattern, text)  # Find all matches in the text
    
    result = []  # Initialize a list to store the extracted information
    
    for match in matches:
        matched_text = match.group()  # Get the matched text
        classification = ""Date""  # Classify the match as a date
        capture_info = match.span()  # Get the start and end index of the match
        
        result.append((matched_text, classification, capture_info))  # Add the extracted information to the result list
        
    return result","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","0 Passed, 9 Failed",0,9,"['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","['Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name']"
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merge tokens into cohesive DateFragment objects based on their group affiliations and capture counts.
    
    Args:
        tokens (list): A list of tokens, where each token contains a matched text, a group identifier, and capture groups.
    
    Returns:
        list: A list of processed DateFragment objects.
    """"""
    fragments = []
    frag = None
    start_char = 0
    total_chars = 0
    for token in tokens:
        total_chars += len(token['text'])
        if token['group'] is None:
            if frag is not None and frag.get_captures_count() >= self.MIN_MATCHES:
                fragments.append(frag)
                frag = None
        else:
            if frag is None:
                frag = DateFragment()
                frag.start_index = start_char
                start_char = total_chars
            frag.end_index = total_chars
            frag.match_string += token['text']
            for group_id, captures in token['captures'].items():
                if group_id not in frag.captures:
                    frag.captures[group_id] = []
                frag.captures[group_id].extend(captures)
    if frag is not None and frag.get_captures_count() >= self.MIN_MATCHES:
        fragments.append(frag)
    for frag in fragments:
        for group_id in self.ALL_GROUPS:
            if group_id not in frag.captures:
                frag.captures[group_id] = []
    return fragments","The function `merge_tokens` takes a list of tokens containing matched text, group identifiers, and capture groups, and merges them into cohesive DateFragment objects based on their group affiliations and capture counts. It processes the tokens to create DateFragment objects that capture relevant information based on the group identifiers and captures present in the tokens. The function ensures that only DateFragment objects with a minimum number of capture matches are included in the final list of processed fragments. This function helps organize and consolidate information from the tokens into meaningful DateFragment representations.",1,"def merge_tokens(self, tokens):
    processed_fragments = []

    for token in tokens:
        # Process token to create DateFragment objects
        fragment = process_token(token)
        
        # Ensure minimum number of capture matches
        if fragment.num_captures >= MIN_CAPTURES:
            processed_fragments.append(fragment)
    
    return processed_fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","0 Passed, 9 Failed",0,9,"['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","['Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name']"
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merge tokens into cohesive DateFragment objects based on their group affiliations and capture counts.
    
    Args:
        tokens (list): A list of tokens, where each token contains a matched text, a group identifier, and capture groups.
    
    Returns:
        list: A list of processed DateFragment objects.
    """"""
    fragments = []
    frag = None
    start_char = 0
    total_chars = 0
    for token in tokens:
        total_chars += len(token['text'])
        if token['group'] is None:
            if frag is not None and frag.get_captures_count() >= self.MIN_MATCHES:
                fragments.append(frag)
                frag = None
        else:
            if frag is None:
                frag = DateFragment()
                frag.start_index = start_char
                start_char = total_chars
            frag.end_index = total_chars
            frag.match_string += token['text']
            for group_id, captures in token['captures'].items():
                if group_id not in frag.captures:
                    frag.captures[group_id] = []
                frag.captures[group_id].extend(captures)
    if frag is not None and frag.get_captures_count() >= self.MIN_MATCHES:
        fragments.append(frag)
    for frag in fragments:
        for group_id in self.ALL_GROUPS:
            if group_id not in frag.captures:
                frag.captures[group_id] = []
    return fragments","The function `merge_tokens` takes a list of tokens containing matched text, group identifiers, and capture groups, and merges them into cohesive DateFragment objects based on their group affiliations and capture counts. It processes the tokens to create DateFragment objects that capture relevant information based on the group identifiers and captures present in the tokens. The function ensures that only DateFragment objects with a minimum number of capture matches are included in the final list of processed fragments. This function helps organize and consolidate information from the tokens into meaningful DateFragment representations.",2,"def merge_tokens(self, tokens):
    processed_fragments = []
    
    for token in tokens:
        # Process token to create DateFragment object
        date_fragment = process_token(token)
        
        # Check if DateFragment has minimum required captures
        if date_fragment.num_captures >= MIN_CAPTURES:
            processed_fragments.append(date_fragment)
    
    return processed_fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","0 Passed, 9 Failed",0,9,"['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","['Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name']"
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merge tokens into cohesive DateFragment objects based on their group affiliations and capture counts.
    
    Args:
        tokens (list): A list of tokens, where each token contains a matched text, a group identifier, and capture groups.
    
    Returns:
        list: A list of processed DateFragment objects.
    """"""
    fragments = []
    frag = None
    start_char = 0
    total_chars = 0
    for token in tokens:
        total_chars += len(token['text'])
        if token['group'] is None:
            if frag is not None and frag.get_captures_count() >= self.MIN_MATCHES:
                fragments.append(frag)
                frag = None
        else:
            if frag is None:
                frag = DateFragment()
                frag.start_index = start_char
                start_char = total_chars
            frag.end_index = total_chars
            frag.match_string += token['text']
            for group_id, captures in token['captures'].items():
                if group_id not in frag.captures:
                    frag.captures[group_id] = []
                frag.captures[group_id].extend(captures)
    if frag is not None and frag.get_captures_count() >= self.MIN_MATCHES:
        fragments.append(frag)
    for frag in fragments:
        for group_id in self.ALL_GROUPS:
            if group_id not in frag.captures:
                frag.captures[group_id] = []
    return fragments","The function `merge_tokens` takes a list of tokens containing matched text, group identifiers, and capture groups, and merges them into cohesive DateFragment objects based on their group affiliations and capture counts. It processes the tokens to create DateFragment objects that capture relevant information based on the group identifiers and captures present in the tokens. The function ensures that only DateFragment objects with a minimum number of capture matches are included in the final list of processed fragments. This function helps organize and consolidate information from the tokens into meaningful DateFragment representations.",3,"def merge_tokens(self, tokens):
    processed_fragments = []
    for token in tokens:
        # Process token to create DateFragment objects
        date_fragment = DateFragment(token)

        # Check if DateFragment meets minimum capture count
        if date_fragment.get_capture_count() >= MIN_CAPTURE_COUNT:
            processed_fragments.append(date_fragment)

    return processed_fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","0 Passed, 9 Failed",0,9,"['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","['Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name', 'Traceback (most recent call last):\n  File ""<frozen runpy>"", line 198, in _run_module_as_main\n  File ""<frozen runpy>"", line 88, in _run_code\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\__main__.py"", line 18, in <module>\n    main(module=None)\n    ~~~~^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 103, in __init__\n    self.parseArgs(argv)\n    ~~~~~~~~~~~~~~^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 142, in parseArgs\n    self.createTests()\n    ~~~~~~~~~~~~~~~~^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\main.py"", line 153, in createTests\n    self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n                                                   self.module)\n                                                   ^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 207, in loadTestsFromNames\n    suites = [self.loadTestsFromName(name, module) for name in names]\n              ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File ""C:\\Users\\serine.sefardjelah\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\loader.py"", line 137, in loadTestsFromName\n    module = __import__(module_name)\nValueError: Empty module name']"
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The purpose of the _find_and_replace function is to search for specific patterns in a given date string and replace them with corresponding values. It also identifies and removes any timezone strings present in the date string. The function ensures that the replacements are only made if they are not part of a larger word by using delimiters. This function may be part of a class, as it references class attributes or methods for its functionality.",1,"def _find_and_replace(self, date_string, replacements):
    import re
    
    for pattern, replace_with in replacements.items():
        date_string = re.sub(r'\b' + re.escape(pattern) + r'\b', replace_with, date_string)
    
    date_string = re.sub(r'[-+]\d{2}:?\d{2}', '', date_string)
    
    return date_string","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The purpose of the _find_and_replace function is to search for specific patterns in a given date string and replace them with corresponding values. It also identifies and removes any timezone strings present in the date string. The function ensures that the replacements are only made if they are not part of a larger word by using delimiters. This function may be part of a class, as it references class attributes or methods for its functionality.",2,"def _find_and_replace(self, date_string, mappings):
    for pattern, replacement in mappings.items():
        date_string = re.sub(r'\b' + re.escape(pattern) + r'\b', replacement, date_string)
    
    date_string = re.sub(r'\b\d{2}:\d{2}:\d{2}\b', '', date_string)
    
    return date_string","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The purpose of the _find_and_replace function is to search for specific patterns in a given date string and replace them with corresponding values. It also identifies and removes any timezone strings present in the date string. The function ensures that the replacements are only made if they are not part of a larger word by using delimiters. This function may be part of a class, as it references class attributes or methods for its functionality.",3,"def _find_and_replace(self, date_string, patterns): 
    for pattern, replacement in patterns.items():
        date_string = re.sub(r'\b{}\b'.format(pattern), replacement, date_string)
    
    date_string = re.sub(r'\b[+-]\d{2}:\d{2}\b', '', date_string)
    
    return date_string","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","The goal of the function is to take a naive datetime object and add timezone information to it using the dateutil library. The function returns a datetime object with the specified timezone information added. If the input datetime object is None, the function returns None as well. This function helps in accurately representing date and time with timezone information.",1,"def _add_tzinfo(self, datetime_obj, tz_string):
    if datetime_obj is None:
        return None
    else:
        from dateutil import tz
        tzinfo = tz.gettz(tz_string)
        return datetime_obj.replace(tzinfo=tzinfo)","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","The goal of the function is to take a naive datetime object and add timezone information to it using the dateutil library. The function returns a datetime object with the specified timezone information added. If the input datetime object is None, the function returns None as well. This function helps in accurately representing date and time with timezone information.",2,"def _add_tzinfo(self, datetime_obj, tz_string):
    if datetime_obj is None:
        return None
    
    from dateutil import tz
    timezone = tz.gettz(tz_string)
    
    datetime_obj = datetime_obj.replace(tzinfo=timezone)
    
    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","The goal of the function is to take a naive datetime object and add timezone information to it using the dateutil library. The function returns a datetime object with the specified timezone information added. If the input datetime object is None, the function returns None as well. This function helps in accurately representing date and time with timezone information.",3,"def _add_tzinfo(self, datetime_obj, tz_string):
    if datetime_obj is None:
        return None
    else:
        from dateutil import tz
        tzinfo = tz.gettz(tz_string)
        return datetime_obj.replace(tzinfo=tzinfo)","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","This function is designed to extract date strings from a given text. It tokenizes the text, merges tokens, and then identifies date-related information such as digits, months, and years. It can also handle nested date ranges within the text. There is an option to enforce strict criteria for what constitutes a complete date string. The function returns the extracted date strings along with their respective indices and captures.

If this function is part of a class, it may interact with other class methods or attributes to tokenize the text, merge tokens, and enforce strict criteria for complete date strings.",1,"def extract_date_strings_inner(self, text, text_start, strict):
    extracted_dates = []
    
    # Tokenize the text
    tokens = text.split()
    
    # Merge tokens
    merged_text = ' '.join(tokens)
    
    # Identify date-related information
    # For simplicity, let's assume we are just looking for dates in the format DD/MM/YYYY
    for idx, token in enumerate(tokens):
        if len(token) == 10 and token[2] == '/' and token[5] == '/':
            extracted_dates.append((token, text_start + merged_text.find(token)))
    
    return extracted_dates","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","This function is designed to extract date strings from a given text. It tokenizes the text, merges tokens, and then identifies date-related information such as digits, months, and years. It can also handle nested date ranges within the text. There is an option to enforce strict criteria for what constitutes a complete date string. The function returns the extracted date strings along with their respective indices and captures.

If this function is part of a class, it may interact with other class methods or attributes to tokenize the text, merge tokens, and enforce strict criteria for complete date strings.",2,"def extract_date_strings_inner(self, text, text_start, strict):
    date_strings = []
    # code for extracting date strings from the given text
    return date_strings, indices, captures","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","This function is designed to extract date strings from a given text. It tokenizes the text, merges tokens, and then identifies date-related information such as digits, months, and years. It can also handle nested date ranges within the text. There is an option to enforce strict criteria for what constitutes a complete date string. The function returns the extracted date strings along with their respective indices and captures.

If this function is part of a class, it may interact with other class methods or attributes to tokenize the text, merge tokens, and enforce strict criteria for complete date strings.",3,"def extract_date_strings_inner(self, text, text_start, strict):
    date_strings = []
    indices = []
    captures = []
    
    # Tokenize the text
    tokens = text.split()
    
    # Merge tokens
    merged_text = ' '.join(tokens)
    
    # Identify date-related information
    # Additional code for date extraction goes here
    
    # Handle nested date ranges
    
    # Enforce strict criteria for complete date strings if needed
    
    return date_strings, indices, captures","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The goal of the `tokenize_string` function is to extract matches from a given source text based on a specific regex pattern (DATE_REGEX). These matches, along with their corresponding group and captures, are then returned as a list of tuples. The function iterates through the source text, identifies the matches, determines their group based on captures, and constructs the final list of items to be used for further processing. This function is meant to be used in a context where tokenizing and extracting specific information from text is required.",1,"def tokenize_string(self, text):
        DATE_REGEX = r'\d{2}/\d{2}/\d{4}'
        matches = re.finditer(DATE_REGEX, text)
        result = []
        
        for match in matches:
            matched_text = match.group()
            group = None
            
            if match.lastindex is not None:
                group = match.lastindex
            
            result.append((matched_text, group, match.groups()))
        
        return result","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The goal of the `tokenize_string` function is to extract matches from a given source text based on a specific regex pattern (DATE_REGEX). These matches, along with their corresponding group and captures, are then returned as a list of tuples. The function iterates through the source text, identifies the matches, determines their group based on captures, and constructs the final list of items to be used for further processing. This function is meant to be used in a context where tokenizing and extracting specific information from text is required.",2,"def tokenize_string(self, text):
    DATE_REGEX = r'\d{2}/\d{2}/\d{4}'
    matches = re.finditer(DATE_REGEX, text)
    extracted_data = []
    
    for match in matches:
        group = match.group()
        captures = match.groups()
        extracted_data.append((group, captures))
    
    return extracted_data","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The goal of the `tokenize_string` function is to extract matches from a given source text based on a specific regex pattern (DATE_REGEX). These matches, along with their corresponding group and captures, are then returned as a list of tuples. The function iterates through the source text, identifies the matches, determines their group based on captures, and constructs the final list of items to be used for further processing. This function is meant to be used in a context where tokenizing and extracting specific information from text is required.",3,"def tokenize_string(self, text):
    DATE_REGEX = r'\d{2}/\d{2}/\d{4}'
    matches = re.finditer(DATE_REGEX, text)
    result = []
    for match in matches:
        group = match.group()
        captures = match.groups()
        result.append((group, captures))
    return result","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merge tokens into potential date string fragments.

    Args:
        tokens (list): A list of tokens representing parts of a date string.

    Returns:
        list: A list of potential date string fragments.
    """"""
    MIN_MATCHES = 2
    self.frag = DateFragment()
    result = []
    current_fragment = None
    for token in tokens:
        if token.group in ALL_GROUPS:
            if current_fragment is None:
                current_fragment = DateFragment()
            current_fragment.update(token)
        else:
            if current_fragment is not None and current_fragment.get_captures_count() >= MIN_MATCHES:
                result.append(current_fragment)
            current_fragment = DateFragment()
    if current_fragment is not None and current_fragment.get_captures_count() >= MIN_MATCHES:
        result.append(current_fragment)
    for frag in result:
        for group in ALL_GROUPS:
            if group not in frag.capture_counts:
                frag.capture_counts[group] = []
    return result","The purpose of the `merge_tokens` function is to take a list of tokens representing parts of a date string and merge them into potential date string fragments. It checks for specific groups within the tokens and updates a current fragment accordingly. The function then returns a list of potential date string fragments that have met a minimum number of matches. In the context of a class, the function interacts with the class by utilizing a `DateFragment` object and accessing certain attributes or methods within the class.",1,"def merge_tokens(self, tokens):
    fragments = []
    current_fragment = ''
    
    for token in tokens:
        if token.isdigit():
            current_fragment += token
        elif token.lower() in ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december']:
            current_fragment += token[:3]
        else:
            if current_fragment:
                fragments.append(current_fragment)
                current_fragment = ''
    
    if current_fragment:
        fragments.append(current_fragment)
    
    return fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merge tokens into potential date string fragments.

    Args:
        tokens (list): A list of tokens representing parts of a date string.

    Returns:
        list: A list of potential date string fragments.
    """"""
    MIN_MATCHES = 2
    self.frag = DateFragment()
    result = []
    current_fragment = None
    for token in tokens:
        if token.group in ALL_GROUPS:
            if current_fragment is None:
                current_fragment = DateFragment()
            current_fragment.update(token)
        else:
            if current_fragment is not None and current_fragment.get_captures_count() >= MIN_MATCHES:
                result.append(current_fragment)
            current_fragment = DateFragment()
    if current_fragment is not None and current_fragment.get_captures_count() >= MIN_MATCHES:
        result.append(current_fragment)
    for frag in result:
        for group in ALL_GROUPS:
            if group not in frag.capture_counts:
                frag.capture_counts[group] = []
    return result","The purpose of the `merge_tokens` function is to take a list of tokens representing parts of a date string and merge them into potential date string fragments. It checks for specific groups within the tokens and updates a current fragment accordingly. The function then returns a list of potential date string fragments that have met a minimum number of matches. In the context of a class, the function interacts with the class by utilizing a `DateFragment` object and accessing certain attributes or methods within the class.",2,"def merge_tokens(self, tokens):
    fragments = []
    current_fragment = """"

    for token in tokens:
        if token in [""dd"", ""mm"", ""yyyy""]:
            current_fragment += token
        else:
            if current_fragment:
                fragments.append(current_fragment)
                current_fragment = """"

    if current_fragment:
        fragments.append(current_fragment)

    return fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merge tokens into potential date string fragments.

    Args:
        tokens (list): A list of tokens representing parts of a date string.

    Returns:
        list: A list of potential date string fragments.
    """"""
    MIN_MATCHES = 2
    self.frag = DateFragment()
    result = []
    current_fragment = None
    for token in tokens:
        if token.group in ALL_GROUPS:
            if current_fragment is None:
                current_fragment = DateFragment()
            current_fragment.update(token)
        else:
            if current_fragment is not None and current_fragment.get_captures_count() >= MIN_MATCHES:
                result.append(current_fragment)
            current_fragment = DateFragment()
    if current_fragment is not None and current_fragment.get_captures_count() >= MIN_MATCHES:
        result.append(current_fragment)
    for frag in result:
        for group in ALL_GROUPS:
            if group not in frag.capture_counts:
                frag.capture_counts[group] = []
    return result","The purpose of the `merge_tokens` function is to take a list of tokens representing parts of a date string and merge them into potential date string fragments. It checks for specific groups within the tokens and updates a current fragment accordingly. The function then returns a list of potential date string fragments that have met a minimum number of matches. In the context of a class, the function interacts with the class by utilizing a `DateFragment` object and accessing certain attributes or methods within the class.",3,"def merge_tokens(self, tokens):
    date_fragments = []
    current_fragment = """"

    for token in tokens:
        if token.isdigit():
            current_fragment += token
        elif token.isalpha():
            if len(current_fragment) > 0:
                date_fragments.append(current_fragment)
                current_fragment = """"
        else:
            current_fragment += token

    if len(current_fragment) > 0:
        date_fragments.append(current_fragment)

    return date_fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","This function is designed to find and replace specific patterns within a given date string. It looks for timezones within the string and replaces them with a space. The function then iterates through a set of predefined replacements and substitutes them in the date string where they match. Finally, it returns the updated date string and extracts the last sorted timezone string from the captures dictionary. This function is most likely part of a larger class that deals with date manipulation and pattern matching.",1,"def _find_and_replace(self, date_string, replacements):
    updated_date_string = date_string.replace(""EST"", "" "")
    updated_date_string = updated_date_string.replace(""PST"", "" "")
    
    for key, value in replacements.items():
        updated_date_string = updated_date_string.replace(key, value)
    
    sorted_captures = sorted(captures.values())
    last_timezone = sorted_captures[-1]
    
    return updated_date_string, last_timezone","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","This function is designed to find and replace specific patterns within a given date string. It looks for timezones within the string and replaces them with a space. The function then iterates through a set of predefined replacements and substitutes them in the date string where they match. Finally, it returns the updated date string and extracts the last sorted timezone string from the captures dictionary. This function is most likely part of a larger class that deals with date manipulation and pattern matching.",2,"def _find_and_replace(self, date_string, captures):
    updated_date_string = date_string.replace("" PST"", "" "")
    updated_date_string = updated_date_string.replace("" EST"", "" "")
    updated_date_string = updated_date_string.replace("" GMT"", "" "")

    replacements = {
        ""January"": ""Jan"",
        ""February"": ""Feb"",
        ""March"": ""Mar"",
        ""April"": ""Apr"",
        ""May"": ""May"",
        ""June"": ""Jun"",
        ""July"": ""Jul"",
        ""August"": ""Aug"",
        ""September"": ""Sep"",
        ""October"": ""Oct"",
        ""November"": ""Nov"",
        ""December"": ""Dec""
    }

    for key, value in replacements.items():
        updated_date_string = updated_date_string.replace(key, value)

    return updated_date_string, captures[-1]","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","This function is designed to find and replace specific patterns within a given date string. It looks for timezones within the string and replaces them with a space. The function then iterates through a set of predefined replacements and substitutes them in the date string where they match. Finally, it returns the updated date string and extracts the last sorted timezone string from the captures dictionary. This function is most likely part of a larger class that deals with date manipulation and pattern matching.",3,"def _find_and_replace(self, date_string, captures):
    updated_date_string = date_string.replace(""UTC"", "" "")
    
    replacements = {
        ""Jan"": ""January"",
        ""Feb"": ""February"",
        ""Mar"": ""March"",
        ""Apr"": ""April"",
        ""May"": ""May"",
        ""Jun"": ""June"",
        ""Jul"": ""July"",
        ""Aug"": ""August"",
        ""Sep"": ""September"",
        ""Oct"": ""October"",
        ""Nov"": ""November"",
        ""Dec"": ""December""
    }
    
    for key, value in replacements.items():
        updated_date_string = updated_date_string.replace(key, value)
    
    last_timezone = sorted(captures.keys())[-1]
    
    return updated_date_string, last_timezone","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","This function takes a naive datetime object and a timezone string, and adds the corresponding timezone information to the datetime object. The goal is to convert the naive datetime into a datetime object with timezone information, using the dateutil library. This can be helpful for ensuring that datetime objects are properly localized and can be used for accurate time calculations or comparisons.",1,"def _add_tzinfo(self, datetime_obj, tz_string):
    from dateutil import tz
    
    timezone = tz.gettz(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=timezone)
    
    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","This function takes a naive datetime object and a timezone string, and adds the corresponding timezone information to the datetime object. The goal is to convert the naive datetime into a datetime object with timezone information, using the dateutil library. This can be helpful for ensuring that datetime objects are properly localized and can be used for accurate time calculations or comparisons.",2,"def _add_tzinfo(self, datetime_obj, tz_string):
    from dateutil import tz
    
    timezone = tz.gettz(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=timezone)
    
    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","This function takes a naive datetime object and a timezone string, and adds the corresponding timezone information to the datetime object. The goal is to convert the naive datetime into a datetime object with timezone information, using the dateutil library. This can be helpful for ensuring that datetime objects are properly localized and can be used for accurate time calculations or comparisons.",3,"def _add_tzinfo(self, datetime_obj, tz_string):
    from dateutil import tz
    from dateutil.parser import parse

    tz_info = tz.gettz(tz_string)
    datetime_obj_with_tz = datetime_obj.replace(tzinfo=tz_info)

    return datetime_obj_with_tz","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","This function, `extract_date_strings_inner`, is designed to extract date strings from a given text input. It includes the ability to handle nested text ranges, such as when dates are embedded within other text. The function tokenizes the input text, merges tokens, and then identifies and extracts date-related information like digits, months, and years. It also has an option to enforce strict date parsing rules. The goal of this function is to accurately identify and return date strings along with their corresponding indices and captured date components. This function may be part of a larger class that deals with text processing and date extraction.",1,"def extract_date_strings_inner(self, text, text_start, strict=False):
    # Implementation of the function remains the same as described in the functional description
    pass","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","This function, `extract_date_strings_inner`, is designed to extract date strings from a given text input. It includes the ability to handle nested text ranges, such as when dates are embedded within other text. The function tokenizes the input text, merges tokens, and then identifies and extracts date-related information like digits, months, and years. It also has an option to enforce strict date parsing rules. The goal of this function is to accurately identify and return date strings along with their corresponding indices and captured date components. This function may be part of a larger class that deals with text processing and date extraction.",2,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    date_strings = []
    # your code here
    
    return date_strings","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","This function, `extract_date_strings_inner`, is designed to extract date strings from a given text input. It includes the ability to handle nested text ranges, such as when dates are embedded within other text. The function tokenizes the input text, merges tokens, and then identifies and extracts date-related information like digits, months, and years. It also has an option to enforce strict date parsing rules. The goal of this function is to accurately identify and return date strings along with their corresponding indices and captured date components. This function may be part of a larger class that deals with text processing and date extraction.",3,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    tokenized_text = self.tokenize(text)
    merged_tokens = self.merge_tokens(tokenized_text)
    date_strings = self.identify_dates(merged_tokens, strict)
    return date_strings, text_start, self.capture_date_components(date_strings)","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The `tokenize_string` function is designed to extract matches from a given text based on a specified regex pattern (DATE_REGEX). The function iterates through the text, identifying matches and capturing relevant information such as the matched text, group category, and captures details. These matches are then stored in a list of tuples for further processing. This function is crucial for preparing data for later use in composing potential date strings.",1,"def tokenize_string(self, text):
    import re
    
    DATE_REGEX = r'\d{2}/\d{2}/\d{4}'  # Example regex pattern for dates (dd/mm/yyyy format)
    
    matches = re.finditer(DATE_REGEX, text)
    
    result = []
    for match in matches:
        match_text = match.group()
        match_start = match.start()
        match_end = match.end()
        match_group = match.lastgroup
        
        result.append((match_text, match_start, match_end, match_group))
    
    return result","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The `tokenize_string` function is designed to extract matches from a given text based on a specified regex pattern (DATE_REGEX). The function iterates through the text, identifying matches and capturing relevant information such as the matched text, group category, and captures details. These matches are then stored in a list of tuples for further processing. This function is crucial for preparing data for later use in composing potential date strings.",2,"def tokenize_string(self, text):
    import re
    
    DATE_REGEX = r'\d{2}-\d{2}-\d{4}'
    matches = re.finditer(DATE_REGEX, text)
    
    extracted_data = []
    for match in matches:
        matched_text = match.group(0)
        group_category = ""Date""
        capture_details = match.span()
        
        extracted_data.append((matched_text, group_category, capture_details))
    
    return extracted_data","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The `tokenize_string` function is designed to extract matches from a given text based on a specified regex pattern (DATE_REGEX). The function iterates through the text, identifying matches and capturing relevant information such as the matched text, group category, and captures details. These matches are then stored in a list of tuples for further processing. This function is crucial for preparing data for later use in composing potential date strings.",3,"def tokenize_string(self, text):
    import re
    
    DATE_REGEX = r'\d{2}/\d{2}/\d{4}'
    
    matches = re.finditer(DATE_REGEX, text)
    extracted_data = []
    
    for match in matches:
        matched_text = match.group()
        group_category = 'date'
        capture_details = match.span()
        
        extracted_data.append((matched_text, group_category, capture_details))
    
    return extracted_data","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merges a list of tokens into potential date strings based on certain conditions.

    Args:
    - tokens (list): A list of tokens containing matched text, groups, and capture dictionaries.

    Returns:
    - list: A list of DateFragment objects representing potential date strings.
    """"""
    MIN_MATCHES = 2
    fragments = []
    frag = DateFragment()
    start_char = 0
    total_chars = 0
    for token in tokens:
        if token.group_id is None:
            if len(frag.captures) >= MIN_MATCHES:
                fragments.append(frag)
            frag = DateFragment()
            start_char = total_chars
        else:
            frag.indices = (start_char, start_char + len(token.text))
            frag.match_str += token.text
            frag.captures.update({token.group_id: token.captures})
        total_chars += len(token.text)
    if len(frag.captures) >= MIN_MATCHES:
        fragments.append(frag)
    for frag in fragments:
        for group_id in ALL_GROUPS:
            if group_id not in frag.captures:
                frag.captures[group_id] = []
    return fragments","The purpose of the `merge_tokens` function is to take a list of tokens and merge them into potential date strings based on certain conditions. It iterates through the tokens, combining them into DateFragment objects that represent potential date strings by considering the text, groups, and capture dictionaries in the tokens. The function aims to identify and extract date information from the input tokens.",1,"def merge_tokens(self, tokens):
    date_fragments = []

    for token in tokens:
        text = token.get('text')
        groups = token.get('groups')
        captures = token.get('capture')

        date_fragment = DateFragment(text, groups, captures)
        date_fragments.append(date_fragment)

    return date_fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merges a list of tokens into potential date strings based on certain conditions.

    Args:
    - tokens (list): A list of tokens containing matched text, groups, and capture dictionaries.

    Returns:
    - list: A list of DateFragment objects representing potential date strings.
    """"""
    MIN_MATCHES = 2
    fragments = []
    frag = DateFragment()
    start_char = 0
    total_chars = 0
    for token in tokens:
        if token.group_id is None:
            if len(frag.captures) >= MIN_MATCHES:
                fragments.append(frag)
            frag = DateFragment()
            start_char = total_chars
        else:
            frag.indices = (start_char, start_char + len(token.text))
            frag.match_str += token.text
            frag.captures.update({token.group_id: token.captures})
        total_chars += len(token.text)
    if len(frag.captures) >= MIN_MATCHES:
        fragments.append(frag)
    for frag in fragments:
        for group_id in ALL_GROUPS:
            if group_id not in frag.captures:
                frag.captures[group_id] = []
    return fragments","The purpose of the `merge_tokens` function is to take a list of tokens and merge them into potential date strings based on certain conditions. It iterates through the tokens, combining them into DateFragment objects that represent potential date strings by considering the text, groups, and capture dictionaries in the tokens. The function aims to identify and extract date information from the input tokens.",2,"def merge_tokens(self, tokens):
    merged_dates = []
    
    for token in tokens:
        date_str = """"
        for group in token['groups']:
            date_str += group
        for capture in token['capture']:
            date_str += capture
        
        merged_dates.append(date_str)
    
    return merged_dates","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merges a list of tokens into potential date strings based on certain conditions.

    Args:
    - tokens (list): A list of tokens containing matched text, groups, and capture dictionaries.

    Returns:
    - list: A list of DateFragment objects representing potential date strings.
    """"""
    MIN_MATCHES = 2
    fragments = []
    frag = DateFragment()
    start_char = 0
    total_chars = 0
    for token in tokens:
        if token.group_id is None:
            if len(frag.captures) >= MIN_MATCHES:
                fragments.append(frag)
            frag = DateFragment()
            start_char = total_chars
        else:
            frag.indices = (start_char, start_char + len(token.text))
            frag.match_str += token.text
            frag.captures.update({token.group_id: token.captures})
        total_chars += len(token.text)
    if len(frag.captures) >= MIN_MATCHES:
        fragments.append(frag)
    for frag in fragments:
        for group_id in ALL_GROUPS:
            if group_id not in frag.captures:
                frag.captures[group_id] = []
    return fragments","The purpose of the `merge_tokens` function is to take a list of tokens and merge them into potential date strings based on certain conditions. It iterates through the tokens, combining them into DateFragment objects that represent potential date strings by considering the text, groups, and capture dictionaries in the tokens. The function aims to identify and extract date information from the input tokens.",3,"def merge_tokens(self, tokens):
    merged_dates = []

    for token in tokens:
        if token.text.isdigit() and len(token.text) == 8:
            merged_dates.append(token.text[:4] + '-' + token.text[4:6] + '-' + token.text[6:])
        elif token.text.isdigit() and len(token.text) == 6:
            merged_dates.append('20' + token.text[:2] + '-' + token.text[2:4] + '-' + token.text[4:])
    
    return merged_dates","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))",This function is designed to find specific patterns in a date string and replace them with predefined values. It also manipulates time zone information based on captures from the date string. The function ensures that only the last sorted time zone capture is used for replacement. The main goal is to clean and standardize the date string by replacing specific patterns and adjusting time zone information as needed.,1,"def _find_and_replace(self, date_string, captures):
    new_date_string = date_string.replace(""pattern1"", ""value1"").replace(""pattern2"", ""value2"")
    
    sorted_captures = sorted(captures, key=lambda x: x[0])
    last_capture = sorted_captures[-1] if captures else None
    
    if last_capture:
        timezone_index = last_capture[0]
        timezone_value = last_capture[1]
        new_date_string = new_date_string[:timezone_index] + ""new_timezone"" + new_date_string[timezone_index + len(timezone_value):]
    
    return new_date_string","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))",This function is designed to find specific patterns in a date string and replace them with predefined values. It also manipulates time zone information based on captures from the date string. The function ensures that only the last sorted time zone capture is used for replacement. The main goal is to clean and standardize the date string by replacing specific patterns and adjusting time zone information as needed.,2,"def _find_and_replace(self, date_string, captures):
    new_date_string = date_string.replace(""pattern1"", ""replacement1"").replace(""pattern2"", ""replacement2"")
    
    sorted_captures = sorted(captures, key=lambda x: x[0])
    last_capture = sorted_captures[-1][1] if sorted_captures else None
    
    if last_capture:
        new_date_string = new_date_string.replace(""timezone_capture"", last_capture)
    
    return new_date_string","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))",This function is designed to find specific patterns in a date string and replace them with predefined values. It also manipulates time zone information based on captures from the date string. The function ensures that only the last sorted time zone capture is used for replacement. The main goal is to clean and standardize the date string by replacing specific patterns and adjusting time zone information as needed.,3,"def _find_and_replace(self, date_string, captures):
    new_date_string = date_string.replace('pattern1', 'replacement1')
    new_date_string = new_date_string.replace('pattern2', 'replacement2')
    
    sorted_captures = sorted(captures, key=lambda x: x['time_zone_index'])
    last_capture = sorted_captures[-1] if captures else None
    
    if last_capture:
        new_date_string = new_date_string.replace(last_capture['time_zone'], 'new_time_zone')
    
    return new_date_string, last_capture","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","This function takes a naive datetime object and a timezone string, then adds timezone information to the datetime object using dateutil's timezone library. The goal is to convert the naive datetime into a datetime object with timezone information attached to it. This can be useful for handling and manipulating datetime objects with specific timezones.",1,"def _add_tzinfo(self, datetime_obj, tz_string):
    from dateutil import tz
    
    timezone = tz.gettz(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=timezone)
    
    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","This function takes a naive datetime object and a timezone string, then adds timezone information to the datetime object using dateutil's timezone library. The goal is to convert the naive datetime into a datetime object with timezone information attached to it. This can be useful for handling and manipulating datetime objects with specific timezones.",2,"def _add_tzinfo(self, datetime_obj, tz_string):
    from dateutil import tz

    timezone = tz.gettz(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=timezone)

    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","This function takes a naive datetime object and a timezone string, then adds timezone information to the datetime object using dateutil's timezone library. The goal is to convert the naive datetime into a datetime object with timezone information attached to it. This can be useful for handling and manipulating datetime objects with specific timezones.",3,"def _add_tzinfo(self, datetime_obj, tz_string):
    from dateutil import tz
    timezone = tz.gettz(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=timezone)
    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The purpose of the `extract_date_strings_inner` function is to extract date strings from a given text. It can handle nested text structures by recursively calling itself with different parameters. The function tokenizes the text, merges tokens, and then checks for matches that could represent date strings. It also has an option to enforce strict criteria for what constitutes a complete date string. The function returns the extracted date strings along with their indices in the original text and any captured date components (such as digits, months, and years). This function is likely part of a larger class that handles text processing and date extraction, as it references methods like `split_date_range`, `tokenize_string`, and `merge_tokens` that are likely defined within the same class.",1,Invalid Syntax / No valid code,N/A,Failed,[],[],0,0
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The purpose of the `extract_date_strings_inner` function is to extract date strings from a given text. It can handle nested text structures by recursively calling itself with different parameters. The function tokenizes the text, merges tokens, and then checks for matches that could represent date strings. It also has an option to enforce strict criteria for what constitutes a complete date string. The function returns the extracted date strings along with their indices in the original text and any captured date components (such as digits, months, and years). This function is likely part of a larger class that handles text processing and date extraction, as it references methods like `split_date_range`, `tokenize_string`, and `merge_tokens` that are likely defined within the same class.",2,"def extract_date_strings_inner(self, text, text_start, strict=True):
    def tokenize_string(text):
        tokens = []
        # Tokenization logic
        return tokens
    
    def merge_tokens(tokens):
        merged_tokens = []
        # Merging logic
        return merged_tokens
    
    def split_date_range(date_string):
        date_range = []
        # Date range splitting logic
        return date_range
    
    def extract_date_strings_inner(text, text_start, strict):
        extracted_dates = []
        # Date extraction logic
        return extracted_dates
    
    return extract_date_strings_inner(text, text_start, strict)","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The purpose of the `extract_date_strings_inner` function is to extract date strings from a given text. It can handle nested text structures by recursively calling itself with different parameters. The function tokenizes the text, merges tokens, and then checks for matches that could represent date strings. It also has an option to enforce strict criteria for what constitutes a complete date string. The function returns the extracted date strings along with their indices in the original text and any captured date components (such as digits, months, and years). This function is likely part of a larger class that handles text processing and date extraction, as it references methods like `split_date_range`, `tokenize_string`, and `merge_tokens` that are likely defined within the same class.",3,"def extract_date_strings_inner(self, text, start_index, strict=False):
        def tokenize_string(text):
            # Tokenize the text
            pass
        
        def merge_tokens(tokens):
            # Merge tokens
            pass
        
        def split_date_range(tokens):
            # Split date range tokens
            pass
        
        def extract_date_strings_inner(text, start_index, strict):
            # Recursive function to extract date strings
            pass
        
        # Main extraction function
        tokens = tokenize_string(text)
        merged_tokens = merge_tokens(tokens)
        date_strings = []
        date_components = []
        
        # Check for date strings in the merged tokens
        for i in range(len(merged_tokens)):
            if strict:
                if check_strict_date_format(merged_tokens[i]):
                    date_strings.append(merged_tokens[i])
                    date_components.append(extract_date_components(merged_tokens[i]))
            else:
                if check_date_format(merged_tokens[i]):
                    date_strings.append(merged_tokens[i])
                    date_components.append(extract_date_components(merged_tokens[i]))
        
        return date_strings, start_index, date_components","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The purpose of the `tokenize_string` function is to extract matches from a given text based on a specific regex pattern (DATE_REGEX). It iterates through the text, finding matches and their corresponding indices, captures, and group. It then returns a list of tuples containing the extracted matches, their groups, and captures. The function ensures that any text portions between matches are also included in the output. This function plays a crucial role in preparing the text for further processing, such as composing potential date strings.

If this function is a method within a class, it likely interacts with other methods or attributes within the class to process the text and handle the extracted tokens accordingly.",1,"def tokenize_string(self, text):
    DATE_REGEX = r'\d{2}/\d{2}/\d{4}'
    
    matches = re.finditer(DATE_REGEX, text)
    tokens = []
    
    start = 0
    for match in matches:
        tokens.append((text[start:match.start()], None, None))
        tokens.append((match.group(), match.group(1), match.group(2)))
        start = match.end()
    
    tokens.append((text[start:], None, None))
    
    return tokens","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The purpose of the `tokenize_string` function is to extract matches from a given text based on a specific regex pattern (DATE_REGEX). It iterates through the text, finding matches and their corresponding indices, captures, and group. It then returns a list of tuples containing the extracted matches, their groups, and captures. The function ensures that any text portions between matches are also included in the output. This function plays a crucial role in preparing the text for further processing, such as composing potential date strings.

If this function is a method within a class, it likely interacts with other methods or attributes within the class to process the text and handle the extracted tokens accordingly.",2,"def tokenize_string(self, text):
    DATE_REGEX = r'\d{2}/\d{2}/\d{4}'
    matches = re.finditer(DATE_REGEX, text)
    tokens = []
    prev_end = 0
    for match in matches:
        start, end = match.span()
        if start > prev_end:
            tokens.append((text[prev_end:start], None, None))
        tokens.append((match.group(), match.group(0), match.groups()))
        prev_end = end
    if prev_end < len(text):
        tokens.append((text[prev_end:], None, None))
    return tokens","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The purpose of the `tokenize_string` function is to extract matches from a given text based on a specific regex pattern (DATE_REGEX). It iterates through the text, finding matches and their corresponding indices, captures, and group. It then returns a list of tuples containing the extracted matches, their groups, and captures. The function ensures that any text portions between matches are also included in the output. This function plays a crucial role in preparing the text for further processing, such as composing potential date strings.

If this function is a method within a class, it likely interacts with other methods or attributes within the class to process the text and handle the extracted tokens accordingly.",3,"def tokenize_string(self, text):
    DATE_REGEX = r'\d{2}/\d{2}/\d{4}'
    matches = re.finditer(DATE_REGEX, text)
    tokens = []
    start = 0
    for match in matches:
        tokens.append((text[start:match.start()], None, None))
        tokens.append((match.group(), match.group(), match.group()))
        start = match.end()
    tokens.append((text[start:], None, None))
    return tokens","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merges a list of tokens into potential date strings based on certain conditions.

    Args:
    tokens (list): A list of tokens containing matched text, groups, and capture dictionaries.

    Returns:
    list: A list of DateFragment objects, each representing a potential date string.
    """"""
    fragments = []
    frag = DateFragment()
    start_char = 0
    total_chars = 0
    for token in tokens:
        if token.group_id is None:
            if self.get_captures_count(frag) >= MIN_MATCHES:
                fragments.append(frag)
            frag = DateFragment()
            start_char = total_chars + len(token.text)
        else:
            frag.indices.extend([start_char, start_char + len(token.text)])
            frag.match_str += token.text
            for key, value in token.captures.items():
                if key not in frag.captures:
                    frag.captures[key] = []
                frag.captures[key].extend(value)
            total_chars += len(token.text)
    if self.get_captures_count(frag) >= MIN_MATCHES:
        fragments.append(frag)
    for frag in fragments:
        for group in ALL_GROUPS:
            if group not in frag.captures:
                frag.captures[group] = []
    return fragments","The function `merge_tokens` takes a list of tokens as input and combines them into potential date strings based on certain conditions. It creates DateFragment objects for each potential date string, considering the text content, groups, and capture dictionaries of the tokens. The function then returns a list of these DateFragment objects representing the potential date strings. If the function is within a class context, it may interact with class attributes or methods to process the tokens and generate the final output.",1,Invalid Syntax / No valid code,N/A,Failed,[],[],0,0
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merges a list of tokens into potential date strings based on certain conditions.

    Args:
    tokens (list): A list of tokens containing matched text, groups, and capture dictionaries.

    Returns:
    list: A list of DateFragment objects, each representing a potential date string.
    """"""
    fragments = []
    frag = DateFragment()
    start_char = 0
    total_chars = 0
    for token in tokens:
        if token.group_id is None:
            if self.get_captures_count(frag) >= MIN_MATCHES:
                fragments.append(frag)
            frag = DateFragment()
            start_char = total_chars + len(token.text)
        else:
            frag.indices.extend([start_char, start_char + len(token.text)])
            frag.match_str += token.text
            for key, value in token.captures.items():
                if key not in frag.captures:
                    frag.captures[key] = []
                frag.captures[key].extend(value)
            total_chars += len(token.text)
    if self.get_captures_count(frag) >= MIN_MATCHES:
        fragments.append(frag)
    for frag in fragments:
        for group in ALL_GROUPS:
            if group not in frag.captures:
                frag.captures[group] = []
    return fragments","The function `merge_tokens` takes a list of tokens as input and combines them into potential date strings based on certain conditions. It creates DateFragment objects for each potential date string, considering the text content, groups, and capture dictionaries of the tokens. The function then returns a list of these DateFragment objects representing the potential date strings. If the function is within a class context, it may interact with class attributes or methods to process the tokens and generate the final output.",2,"def merge_tokens(self, tokens):
    date_fragments = []
    
    for token in tokens:
        # Combine tokens into potential date strings
        potential_date = """"
        # Logic to create potential date string
        
        # Create DateFragment object
        date_fragment = DateFragment(potential_date)
        
        # Consider text content, groups, and capture dictionaries of tokens
        # Logic to consider text content, groups, and capture dictionaries
        
        date_fragments.append(date_fragment)
    
    return date_fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merges a list of tokens into potential date strings based on certain conditions.

    Args:
    tokens (list): A list of tokens containing matched text, groups, and capture dictionaries.

    Returns:
    list: A list of DateFragment objects, each representing a potential date string.
    """"""
    fragments = []
    frag = DateFragment()
    start_char = 0
    total_chars = 0
    for token in tokens:
        if token.group_id is None:
            if self.get_captures_count(frag) >= MIN_MATCHES:
                fragments.append(frag)
            frag = DateFragment()
            start_char = total_chars + len(token.text)
        else:
            frag.indices.extend([start_char, start_char + len(token.text)])
            frag.match_str += token.text
            for key, value in token.captures.items():
                if key not in frag.captures:
                    frag.captures[key] = []
                frag.captures[key].extend(value)
            total_chars += len(token.text)
    if self.get_captures_count(frag) >= MIN_MATCHES:
        fragments.append(frag)
    for frag in fragments:
        for group in ALL_GROUPS:
            if group not in frag.captures:
                frag.captures[group] = []
    return fragments","The function `merge_tokens` takes a list of tokens as input and combines them into potential date strings based on certain conditions. It creates DateFragment objects for each potential date string, considering the text content, groups, and capture dictionaries of the tokens. The function then returns a list of these DateFragment objects representing the potential date strings. If the function is within a class context, it may interact with class attributes or methods to process the tokens and generate the final output.",3,"def merge_tokens(self, tokens):
    date_fragments = []
    for token in tokens:
        # Check conditions and create DateFragment objects
        date_fragment = DateFragment(token.text, token.groups, token.capture)
        date_fragments.append(date_fragment)
    
    return date_fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the _find_and_replace function is to modify a given date_string by replacing certain patterns with specified replacements. It also removes timezone strings from the date_string and returns the modified date_string along with the removed timezone string. It interacts with the class context by accessing the REPLACEMENTS and DELIMITERS_PATTERN attributes of the class, and it also utilizes the _pop_tz_string method to handle timezone strings.",1,"def _find_and_replace(self, date_string, captures):
    new_date_string = date_string.replace(""pattern1"", ""replacement1"").replace(""pattern2"", ""replacement2"")
    timezone_string = self._pop_tz_string(date_string)
    for key, value in captures.items():
        new_date_string = new_date_string.replace(key, value)
    return new_date_string, timezone_string","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the _find_and_replace function is to modify a given date_string by replacing certain patterns with specified replacements. It also removes timezone strings from the date_string and returns the modified date_string along with the removed timezone string. It interacts with the class context by accessing the REPLACEMENTS and DELIMITERS_PATTERN attributes of the class, and it also utilizes the _pop_tz_string method to handle timezone strings.",2,"def _find_and_replace(self, date_string, captures):
    modified_date_string = date_string

    for pattern, replacement in self.REPLACEMENTS.items():
        modified_date_string = modified_date_string.replace(pattern, replacement)

    timezone_string = self._pop_tz_string(modified_date_string)

    return modified_date_string, timezone_string","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_find_and_replace,"def _find_and_replace(self, date_string, captures):
    """"""
        :warning: when multiple tz matches exist the last sorted capture will trump
        :param date_string:
        :return: date_string, tz_string
        """"""
    cloned_replacements = copy.copy(REPLACEMENTS)
    for tz_string in captures.get('timezones', []):
        cloned_replacements.update({tz_string: ' '})
    date_string = date_string.lower()
    for key, replacement in cloned_replacements.items():
        full_match_pattern = '(^|{delimiters_pattern}){key}($|{delimiters_pattern})'.format(delimiters_pattern=DELIMITERS_PATTERN, key=key)
        date_string = re.sub(full_match_pattern, replacement, date_string, flags=re.IGNORECASE)
    return (date_string, self._pop_tz_string(sorted(captures.get('timezones', []))))","The goal of the _find_and_replace function is to modify a given date_string by replacing certain patterns with specified replacements. It also removes timezone strings from the date_string and returns the modified date_string along with the removed timezone string. It interacts with the class context by accessing the REPLACEMENTS and DELIMITERS_PATTERN attributes of the class, and it also utilizes the _pop_tz_string method to handle timezone strings.",3,"def _find_and_replace(self, date_string, replacements):
    modified_date_string = date_string
    removed_timezone = ''
    
    for pattern, replacement in replacements.items():
        modified_date_string = re.sub(pattern, replacement, modified_date_string)
    
    modified_date_string, removed_timezone = self._pop_tz_string(modified_date_string)
    
    return modified_date_string, removed_timezone","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","The goal of the function is to take a naive datetime object and add a timezone information (tzinfo) to it using the tz_string provided. This ensures that the datetime object is aware of the timezone it belongs to, allowing for accurate time calculations and conversions. If the datetime object is None, the function will return None.",1,"def _add_tzinfo(self, datetime_obj, tz_string):
    if datetime_obj is None:
        return None
    else:
        # Add logic to parse tz_string and add timezone info to datetime_obj
        return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","The goal of the function is to take a naive datetime object and add a timezone information (tzinfo) to it using the tz_string provided. This ensures that the datetime object is aware of the timezone it belongs to, allowing for accurate time calculations and conversions. If the datetime object is None, the function will return None.",2,"def _add_tzinfo(self, datetime_obj, tz_string):
    if datetime_obj is None:
        return None
    
    # Add timezone info to datetime_obj
    timezone = pytz.timezone(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=timezone)
    
    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,_add_tzinfo,"def _add_tzinfo(self, datetime_obj, tz_string):
    """"""
        take a naive datetime and add dateutil.tz.tzinfo object

        :param datetime_obj: naive datetime object
        :return: datetime object with tzinfo
        """"""
    if datetime_obj is None:
        return None
    tzinfo_match = tz.gettz(tz_string)
    return datetime_obj.replace(tzinfo=tzinfo_match)","The goal of the function is to take a naive datetime object and add a timezone information (tzinfo) to it using the tz_string provided. This ensures that the datetime object is aware of the timezone it belongs to, allowing for accurate time calculations and conversions. If the datetime object is None, the function will return None.",3,"def _add_tzinfo(self, datetime_obj, tz_string):
    if datetime_obj is None:
        return None
    
    timezone = pytz.timezone(tz_string)
    datetime_obj = datetime_obj.replace(tzinfo=timezone)
    
    return datetime_obj","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The goal of this function is to extract date strings from a given text, taking into account the starting position of the text. It tokenizes the text, merges tokens, and then checks for matches that represent date information such as digits, months, and years. It provides the extracted date strings along with their indices and captured date components. The function can also operate in strict mode, where it only considers date strings that meet specific criteria for completeness. This function is designed to be used internally within a larger class that handles text processing and date extraction.",1,"def extract_date_strings_inner(self, text, text_start, strict=False):
    import re
    
    def tokenize(text):
        return re.findall(r""[\w']+|[.,!?;]"", text)
    
    def merge_tokens(tokens):
        merged = []
        current = """"
        for token in tokens:
            if token.isnumeric() or token.lower() in [""january"", ""february"", ""march"", ""april"", ""may"", ""june"", ""july"", ""august"", ""september"", ""october"", ""november"", ""december""]:
                current += token + "" ""
            else:
                if current:
                    merged.append(current.strip())
                    current = """"
        if current:
            merged.append(current.strip())
        return merged
    
    def extract_date_components(date_string):
        components = date_string.split()
        day = month = year = None
        for component in components:
            if component.isnumeric():
                if len(component) == 4:
                    year = int(component)
                else:
                    day = int(component)
            else:
                month = component.lower()
        return day, month, year
    
    def is_complete_date(day, month, year):
        return day is not None and month is not None and year is not None
    
    tokens = merge_tokens(tokenize(text))
    date_strings = []
    for idx, token in enumerate(tokens):
        if token.isnumeric() or token.lower() in [""january"", ""february"", ""march"", ""april"", ""may"", ""june"", ""july"", ""august"", ""september"", ""october"", ""november"", ""december""]:
            date_strings.append((text_start + text.index(token), token))

    extracted_dates = []
    for idx, (start, date_string) in enumerate(date_strings):
        day, month, year = extract_date_components(date_string)
        if strict and not is_complete_date(day, month, year):
            continue
        extracted_dates.append((start, (day, month, year)))
    
    return extracted_dates","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The goal of this function is to extract date strings from a given text, taking into account the starting position of the text. It tokenizes the text, merges tokens, and then checks for matches that represent date information such as digits, months, and years. It provides the extracted date strings along with their indices and captured date components. The function can also operate in strict mode, where it only considers date strings that meet specific criteria for completeness. This function is designed to be used internally within a larger class that handles text processing and date extraction.",2,"def extract_date_strings_inner(self, text, text_start, strict):
    tokens = tokenize(text)
    merged_tokens = merge_tokens(tokens)
    
    extracted_dates = []
    for token in merged_tokens:
        if is_potential_date(token):
            date_info = parse_date(token)
            if date_info:
                if strict:
                    if is_complete_date(date_info):
                        extracted_dates.append((token, date_info, text_start + text.find(token)))
                else:
                    extracted_dates.append((token, date_info, text_start + text.find(token)))
    
    return extracted_dates","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,extract_date_strings_inner,"def extract_date_strings_inner(self, text, text_start=0, strict=False):
    """"""
        Extends extract_date_strings by text_start parameter: used in recursive calls to
        store true text coordinates in output
        """"""
    rng = self.split_date_range(text)
    if rng and len(rng) > 1:
        range_strings = []
        for range_str in rng:
            range_strings.extend(self.extract_date_strings_inner(range_str[0], text_start=range_str[1][0], strict=strict))
        for range_string in range_strings:
            yield range_string
        return
    tokens = self.tokenize_string(text)
    items = self.merge_tokens(tokens)
    for match in items:
        match_str = match.match_str
        indices = (match.indices[0] + text_start, match.indices[1] + text_start)
        captures = match.captures
        digits = captures.get('digits')
        months = captures.get('months')
        years = captures.get('years')
        if strict:
            complete = False
            if len(digits) == 3:
                complete = True
            elif len(months) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(digits) == 2:
                complete = True
            elif len(years) == 1 and len(months) == 1 and (len(digits) == 1):
                complete = True
            if not complete:
                continue
        match_str = re.sub('[\\n\\t\\s\\xa0]+', ' ', match_str)
        match_str = match_str.strip(STRIP_CHARS)
        yield (match_str, indices, captures)","The goal of this function is to extract date strings from a given text, taking into account the starting position of the text. It tokenizes the text, merges tokens, and then checks for matches that represent date information such as digits, months, and years. It provides the extracted date strings along with their indices and captured date components. The function can also operate in strict mode, where it only considers date strings that meet specific criteria for completeness. This function is designed to be used internally within a larger class that handles text processing and date extraction.",3,"def extract_date_strings_inner(self, text, text_start, strict=False):
    import re
    
    def merge_tokens(tokens, text):
        merged_tokens = []
        start = 0
        for token in tokens:
            end = start + len(token)
            if end < len(text) and text[end].isdigit() and token[-1].isdigit():
                merged_tokens[-1] += token
            else:
                merged_tokens.append(token)
            start = end
        return merged_tokens
    
    def extract_date_components(date_str):
        date_components = re.findall(r'\b\d+\b|\b(?:jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\b|\b\d{4}\b', date_str, re.IGNORECASE)
        return date_components
    
    tokens = re.findall(r'\b\w+\b', text)
    tokens = merge_tokens(tokens, text)
    
    date_strings = []
    index = text_start
    for token in tokens:
        if re.match(r'\b\d{1,2}\b', token):
            if index < len(tokens) - 1:
                if re.match(r'\b(?:jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\b', tokens[index + 1], re.IGNORECASE):
                    date_strings.append((token + ' ' + tokens[index + 1], index, extract_date_components(token + ' ' + tokens[index + 1])))
        elif re.match(r'\b(?:jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\b', token, re.IGNORECASE):
            if index > 0:
                if re.match(r'\b\d{1,2}\b', tokens[index - 1]):
                    date_strings.append((tokens[index - 1] + ' ' + token, index - 1, extract_date_components(tokens[index - 1] + ' ' + token)))
        elif re.match(r'\b\d{4}\b', token):
            date_strings.append((token, index, extract_date_components(token)))
        index += 1
    
    if strict:
        date_strings = [(date, idx, components) for date, idx, components in date_strings if len(components) == 3]
    
    return date_strings","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The `tokenize_string` function is designed to extract matches from a given source text based on a predefined date regex pattern. These matches, along with their respective groups and captures, are then stored in a list of tuples. This function is part of a larger process where these extracted matches will be used to compose potential date strings. By breaking down the source text into tokens, this function facilitates the identification and manipulation of date-related information within the text.",1,"def tokenize_string(self, text):
    import re
    
    date_pattern = r'\d{1,2}/\d{1,2}/\d{2,4}'
    matches = re.finditer(date_pattern, text)
    
    extracted_dates = []
    for match in matches:
        extracted_dates.append(match.group())
    
    return extracted_dates","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The `tokenize_string` function is designed to extract matches from a given source text based on a predefined date regex pattern. These matches, along with their respective groups and captures, are then stored in a list of tuples. This function is part of a larger process where these extracted matches will be used to compose potential date strings. By breaking down the source text into tokens, this function facilitates the identification and manipulation of date-related information within the text.",2,"def tokenize_string(self, text):
    import re
    
    date_pattern = r'\d{2}/\d{2}/\d{4}'  # Custom date regex pattern
    
    matches = re.finditer(date_pattern, text)
    
    extracted_dates = []
    
    for match in matches:
        date = match.group()
        groups = match.groups()
        captures = match.captures()
        
        extracted_dates.append((date, groups, captures))
    
    return extracted_dates","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,tokenize_string,"def tokenize_string(self, text):
    """"""
        Get matches from source text. Method merge_tokens will later compose
        potential date strings out of these matches.
        :param text: source text like 'the big fight at 2p.m. mountain standard time on ufc.com'
        :return: [(match_text, match_group, {match.capturesdict()}), ...]
        """"""
    items = []
    last_index = 0
    for match in DATE_REGEX.finditer(text):
        match_str = match.group(0)
        indices = match.span(0)
        captures = match.capturesdict()
        group = self.get_token_group(captures)
        if indices[0] > last_index:
            items.append((text[last_index:indices[0]], '', {}))
        items.append((match_str, group, captures))
        last_index = indices[1]
    if last_index < len(text):
        items.append((text[last_index:len(text)], '', {}))
    return items","The `tokenize_string` function is designed to extract matches from a given source text based on a predefined date regex pattern. These matches, along with their respective groups and captures, are then stored in a list of tuples. This function is part of a larger process where these extracted matches will be used to compose potential date strings. By breaking down the source text into tokens, this function facilitates the identification and manipulation of date-related information within the text.",3,"def tokenize_string(self, text):
    import re
    
    date_pattern = r'\b(\d{1,2})[/.-](\d{1,2})[/.-](\d{2,4})\b'
    matches = re.findall(date_pattern, text)
    
    extracted_dates = []
    for match in matches:
        extracted_dates.append(match)
    
    return extracted_dates","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merges tokens into potential date strings based on their group membership and capture counts.
    
    Args:
    tokens (list): A list of tokens containing matched text, groups, and capture dictionaries.
    
    Returns:
    list: A list of DateFragment objects representing potential date strings.
    """"""
    MIN_MATCHES = 2
    fragments = []
    frag = DateFragment()
    start_char = 0
    total_chars = 0
    for token in tokens:
        if 'group' in token:
            frag.indices.extend(token['indices'])
            frag.match_str += token['text']
            for key, value in token['captures'].items():
                if key in frag.captures:
                    frag.captures[key].extend(value)
                else:
                    frag.captures[key] = value
            total_chars += len(token['text'])
        else:
            if self.get_captures_count(frag) >= MIN_MATCHES:
                fragments.append(frag)
            frag = DateFragment()
            start_char = total_chars
            frag.match_str = token['text']
            frag.indices = token['indices']
            frag.captures = token['captures']
            total_chars += len(token['text'])
    if self.get_captures_count(frag) >= MIN_MATCHES:
        fragments.append(frag)
    for frag in fragments:
        for group in ALL_GROUPS:
            if group not in frag.captures:
                frag.captures[group] = []
    return fragments","The function `merge_tokens` takes a list of tokens, each containing matched text, groups, and capture dictionaries. It merges these tokens into potential date strings based on their group membership and capture counts. The function aims to identify and construct DateFragment objects representing possible date strings by combining tokens that satisfy a minimum number of capture matches. The function iterates through the tokens, accumulating matched text and capture information to form DateFragment objects. It ensures that the constructed DateFragment objects meet the minimum capture count requirement before adding them to the final list of fragments. Additionally, the function ensures that each DateFragment captures all possible groups, even if they were not explicitly present in the original tokens.",1,"def merge_tokens(self, tokens):
    fragments = []
    current_fragment = None
    
    for token in tokens:
        if current_fragment is None or not current_fragment.can_merge(token):
            if current_fragment is not None and current_fragment.has_min_captures():
                fragments.append(current_fragment)
            current_fragment = DateFragment(token)
        else:
            current_fragment.merge(token)
    
    if current_fragment is not None and current_fragment.has_min_captures():
        fragments.append(current_fragment)
    
    return fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merges tokens into potential date strings based on their group membership and capture counts.
    
    Args:
    tokens (list): A list of tokens containing matched text, groups, and capture dictionaries.
    
    Returns:
    list: A list of DateFragment objects representing potential date strings.
    """"""
    MIN_MATCHES = 2
    fragments = []
    frag = DateFragment()
    start_char = 0
    total_chars = 0
    for token in tokens:
        if 'group' in token:
            frag.indices.extend(token['indices'])
            frag.match_str += token['text']
            for key, value in token['captures'].items():
                if key in frag.captures:
                    frag.captures[key].extend(value)
                else:
                    frag.captures[key] = value
            total_chars += len(token['text'])
        else:
            if self.get_captures_count(frag) >= MIN_MATCHES:
                fragments.append(frag)
            frag = DateFragment()
            start_char = total_chars
            frag.match_str = token['text']
            frag.indices = token['indices']
            frag.captures = token['captures']
            total_chars += len(token['text'])
    if self.get_captures_count(frag) >= MIN_MATCHES:
        fragments.append(frag)
    for frag in fragments:
        for group in ALL_GROUPS:
            if group not in frag.captures:
                frag.captures[group] = []
    return fragments","The function `merge_tokens` takes a list of tokens, each containing matched text, groups, and capture dictionaries. It merges these tokens into potential date strings based on their group membership and capture counts. The function aims to identify and construct DateFragment objects representing possible date strings by combining tokens that satisfy a minimum number of capture matches. The function iterates through the tokens, accumulating matched text and capture information to form DateFragment objects. It ensures that the constructed DateFragment objects meet the minimum capture count requirement before adding them to the final list of fragments. Additionally, the function ensures that each DateFragment captures all possible groups, even if they were not explicitly present in the original tokens.",2,"def merge_tokens(self, tokens):
    fragments = []
    current_fragment = None
    
    for token in tokens:
        if current_fragment is None:
            current_fragment = DateFragment(token['text'], token['groups'], token['captures'])
        else:
            if current_fragment.can_merge(token['groups'], token['captures']):
                current_fragment.merge(token['text'], token['groups'], token['captures'])
            else:
                if current_fragment.has_min_captures():
                    fragments.append(current_fragment)
                current_fragment = DateFragment(token['text'], token['groups'], token['captures'])
    
    if current_fragment is not None and current_fragment.has_min_captures():
        fragments.append(current_fragment)
    
    return fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
datefinder,merge_tokens,"def merge_tokens(self, tokens):
    """"""
    Merges tokens into potential date strings based on their group membership and capture counts.
    
    Args:
    tokens (list): A list of tokens containing matched text, groups, and capture dictionaries.
    
    Returns:
    list: A list of DateFragment objects representing potential date strings.
    """"""
    MIN_MATCHES = 2
    fragments = []
    frag = DateFragment()
    start_char = 0
    total_chars = 0
    for token in tokens:
        if 'group' in token:
            frag.indices.extend(token['indices'])
            frag.match_str += token['text']
            for key, value in token['captures'].items():
                if key in frag.captures:
                    frag.captures[key].extend(value)
                else:
                    frag.captures[key] = value
            total_chars += len(token['text'])
        else:
            if self.get_captures_count(frag) >= MIN_MATCHES:
                fragments.append(frag)
            frag = DateFragment()
            start_char = total_chars
            frag.match_str = token['text']
            frag.indices = token['indices']
            frag.captures = token['captures']
            total_chars += len(token['text'])
    if self.get_captures_count(frag) >= MIN_MATCHES:
        fragments.append(frag)
    for frag in fragments:
        for group in ALL_GROUPS:
            if group not in frag.captures:
                frag.captures[group] = []
    return fragments","The function `merge_tokens` takes a list of tokens, each containing matched text, groups, and capture dictionaries. It merges these tokens into potential date strings based on their group membership and capture counts. The function aims to identify and construct DateFragment objects representing possible date strings by combining tokens that satisfy a minimum number of capture matches. The function iterates through the tokens, accumulating matched text and capture information to form DateFragment objects. It ensures that the constructed DateFragment objects meet the minimum capture count requirement before adding them to the final list of fragments. Additionally, the function ensures that each DateFragment captures all possible groups, even if they were not explicitly present in the original tokens.",3,"def merge_tokens(self, tokens):
    fragments = []
    current_fragment = None
    
    for token in tokens:
        if current_fragment is None:
            current_fragment = DateFragment(token['matched_text'], token['groups'], token['captures'])
        else:
            if current_fragment.can_combine(token['groups'], token['captures']):
                current_fragment.add_token(token['matched_text'], token['captures'])
            else:
                if current_fragment.has_min_captures():
                    fragments.append(current_fragment)
                current_fragment = DateFragment(token['matched_text'], token['groups'], token['captures'])
    
    if current_fragment is not None and current_fragment.has_min_captures():
        fragments.append(current_fragment)
    
    return fragments","['./repos/datefinder\\tests', './repos/datefinder\\tests\\test_add_tzinfo.py::test_add_tzinfo', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings', './repos/datefinder\\tests\\test_extract_date_strings.py::test_extract_date_strings_with_strict_option', './repos/datefinder\\tests\\test_find_and_replace.py::test_find_and_replace', './repos/datefinder\\tests\\test_find_dates.py::test_find_date_strings', './repos/datefinder\\tests\\test_find_dates_strict.py::test_find_date_strings_strict', './repos/datefinder\\tests\\test_simple.py::test_success', './repos/datefinder\\tests\\test_tz_gettz.py::test_tz_gettz_for_all_patterns']","54 Passed, 0 Failed",54,0,[],[]
