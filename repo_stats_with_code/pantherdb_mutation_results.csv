Repo Name,Function Name,original_code,Description,Mutant Index,Mutant Code,Test Case,Test Result,Passed Count,Failed Count,Failed Tests,Failure Reasons
pantherdb,find_one,"def find_one(self, **kwargs) -> PantherDocument | dict | None:
    documents = self._get_collection()
    if not documents:
        return None
    if not kwargs:
        return self.__create_result(documents[0])
    for _, d in self._find(documents, **kwargs):
        return d","The `find_one` function is responsible for searching and returning a single document from a collection based on the provided criteria. If no criteria are provided, it returns the first document in the collection. This function is part of a class context and interacts with other class methods to retrieve and filter the documents before returning the selected one.",1,"def find_one(self, criteria=None):
    if criteria:
        return self.collection.find_one(criteria)
    else:
        return self.collection.find_one()",['./repos/pantherdb\\tests'],"25 Passed, 20 Failed",25,20,"['tests/test_normal.py::TestNormalPantherDB::test_delete', 'tests/test_normal.py::TestNormalPantherDB::test_delete_one', 'tests/test_normal.py::TestNormalPantherDB::test_document_fields', 'tests/test_normal.py::TestNormalPantherDB::test_document_json_method', 'tests/test_normal.py::TestNormalPantherDB::test_document_save_method', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_first', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_last', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_none', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_with_kwargs_from_empty_collection', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_without_kwargs_from_empty_collection', 'tests/test_normal.py::TestNormalPantherDB::test_first_none', 'tests/test_normal.py::TestNormalPantherDB::test_first_of_many_finds', 'tests/test_normal.py::TestNormalPantherDB::test_first_when_its_first', 'tests/test_normal.py::TestNormalPantherDB::test_first_when_its_last', 'tests/test_normal.py::TestNormalPantherDB::test_first_with_kwargs_from_empty_collection', 'tests/test_normal.py::TestNormalPantherDB::test_first_without_kwargs_from_empty_collection', 'tests/test_normal.py::TestNormalPantherDB::test_last_when_its_first', 'tests/test_normal.py::TestNormalPantherDB::test_update', 'tests/test_normal.py::TestNormalPantherDB::test_update_one_single_document', 'tests/test_normal.py::TestNormalPantherDB::test_update_one_single_document_not_found']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete>\n\n    def test_delete(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n>       obj = collection.find_one(first_name=first_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:417: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one>\n\n    def test_delete_one(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Delete One\n        is_deleted = collection.delete_one(first_name=first_name)\n        assert is_deleted is True\n    \n        # Find It Again\n>       new_obj = collection.find_one(first_name=first_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:445: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_fields>\n\n    def test_document_fields(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n        collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Find\n>       obj = collection.find_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:640: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_json_method>\n\n    def test_document_json_method(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n        collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Find\n>       obj = collection.find_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:680: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_save_method>\n\n    def test_document_save_method(self):\n        collection = self.db.collection(f.word())\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find One\n>       obj = collection.find_one(first_name=first_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:653: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_first>\n\n    def test_find_one_first(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n        collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.find_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:118: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_last>\n\n    def test_find_one_last(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Insert with specific names\n        collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Find\n>       obj = collection.find_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:135: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_none>\n\n    def test_find_one_none(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.find_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:149: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_with_kwargs_from_empty_collection>\n\n    def test_find_one_with_kwargs_from_empty_collection(self):\n        collection = self.db.collection(f.word())\n    \n        # Find\n>       obj = collection.find_one(first_name=f.first_name(), last_name=f.last_name())\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:156: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_without_kwargs_from_empty_collection>\n\n    def test_find_one_without_kwargs_from_empty_collection(self):\n        collection = self.db.collection(f.word())\n    \n        # Find\n>       obj = collection.find_one()\n\nrepos\\pantherdb\\tests\\test_normal.py:163: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1a68a1a4ad0>\ncriteria = None\n\n    def find_one(self, criteria=None):\n        if criteria:\n            return self.collection.find_one(criteria)\n        else:\n>           return self.collection.find_one()\nE           AttributeError: 'function' object has no attribute 'find_one'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:171: AttributeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_none>\n\n    def test_first_none(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.first(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:229: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1a68aada5d0>\nkwargs = {'first_name': 'Shelly', 'last_name': 'Hinton'}\n\n    def first(self, **kwargs) -> PantherDocument | dict | None:\n>       return self.find_one(**kwargs)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:181: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_of_many_finds>\n\n    def test_first_of_many_finds(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n        expected = collection.insert_one(first_name=first_name, last_name=last_name)\n        collection.insert_one(first_name=first_name, last_name=last_name)\n        collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.first(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:198: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1a68aad63c0>\nkwargs = {'first_name': 'Ryan', 'last_name': 'Smith'}\n\n    def first(self, **kwargs) -> PantherDocument | dict | None:\n>       return self.find_one(**kwargs)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:181: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_when_its_first>\n\n    def test_first_when_its_first(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n        collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.first(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1a68aad6450>\nkwargs = {'first_name': 'Brett', 'last_name': 'Armstrong'}\n\n    def first(self, **kwargs) -> PantherDocument | dict | None:\n>       return self.find_one(**kwargs)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:181: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_when_its_last>\n\n    def test_first_when_its_last(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Insert with specific names\n        expected = collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Find\n>       obj = collection.first(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:214: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1a68aad64e0>\nkwargs = {'first_name': 'Melissa', 'last_name': 'Kennedy'}\n\n    def first(self, **kwargs) -> PantherDocument | dict | None:\n>       return self.find_one(**kwargs)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:181: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_with_kwargs_from_empty_collection>\n\n    def test_first_with_kwargs_from_empty_collection(self):\n        collection = self.db.collection(f.word())\n    \n        # Find\n>       obj = collection.first(first_name=f.first_name(), last_name=f.last_name())\n\nrepos\\pantherdb\\tests\\test_normal.py:236: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1a68aad68d0>\nkwargs = {'first_name': 'Richard', 'last_name': 'Morgan'}\n\n    def first(self, **kwargs) -> PantherDocument | dict | None:\n>       return self.find_one(**kwargs)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:181: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_without_kwargs_from_empty_collection>\n\n    def test_first_without_kwargs_from_empty_collection(self):\n        collection = self.db.collection(f.word())\n    \n        # Find\n>       obj = collection.first()\n\nrepos\\pantherdb\\tests\\test_normal.py:243: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:181: in first\n    return self.find_one(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1a68aad6840>\ncriteria = None\n\n    def find_one(self, criteria=None):\n        if criteria:\n            return self.collection.find_one(criteria)\n        else:\n>           return self.collection.find_one()\nE           AttributeError: 'function' object has no attribute 'find_one'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:171: AttributeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_when_its_first>\n\n    def test_last_when_its_first(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n        collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.first(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:259: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1a68aad6c30>\nkwargs = {'first_name': 'Brian', 'last_name': 'Stewart'}\n\n    def first(self, **kwargs) -> PantherDocument | dict | None:\n>       return self.find_one(**kwargs)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:181: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update>\n\n    def test_update(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find One\n>       obj = collection.find_one(first_name=first_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:540: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_one_single_document>\n\n    def test_update_one_single_document(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Update One\n        new_name = f.first_name()\n        is_updated = collection.update_one({'first_name': first_name}, first_name=new_name)\n        assert is_updated is True\n    \n        # Find with old name\n>       old_obj = collection.find_one(first_name=first_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:570: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_one_single_document_not_found>\n\n    def test_update_one_single_document_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Update One\n        new_name = f.first_name()\n        is_updated = collection.update_one({'first_name': f.first_name()}, first_name=new_name)\n        assert is_updated is False\n    \n        # Find with old name\n>       old_obj = collection.find_one(first_name=first_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:593: TypeError""]"
pantherdb,find_one,"def find_one(self, **kwargs) -> PantherDocument | dict | None:
    documents = self._get_collection()
    if not documents:
        return None
    if not kwargs:
        return self.__create_result(documents[0])
    for _, d in self._find(documents, **kwargs):
        return d","The `find_one` function is responsible for searching and returning a single document from a collection based on the provided criteria. If no criteria are provided, it returns the first document in the collection. This function is part of a class context and interacts with other class methods to retrieve and filter the documents before returning the selected one.",2,"def find_one(self, criteria=None):
    if criteria:
        return self.collection.find_one(criteria)
    else:
        return self.collection.find_one()",['./repos/pantherdb\\tests'],"25 Passed, 20 Failed",25,20,"['tests/test_normal.py::TestNormalPantherDB::test_delete', 'tests/test_normal.py::TestNormalPantherDB::test_delete_one', 'tests/test_normal.py::TestNormalPantherDB::test_document_fields', 'tests/test_normal.py::TestNormalPantherDB::test_document_json_method', 'tests/test_normal.py::TestNormalPantherDB::test_document_save_method', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_first', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_last', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_none', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_with_kwargs_from_empty_collection', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_without_kwargs_from_empty_collection', 'tests/test_normal.py::TestNormalPantherDB::test_first_none', 'tests/test_normal.py::TestNormalPantherDB::test_first_of_many_finds', 'tests/test_normal.py::TestNormalPantherDB::test_first_when_its_first', 'tests/test_normal.py::TestNormalPantherDB::test_first_when_its_last', 'tests/test_normal.py::TestNormalPantherDB::test_first_with_kwargs_from_empty_collection', 'tests/test_normal.py::TestNormalPantherDB::test_first_without_kwargs_from_empty_collection', 'tests/test_normal.py::TestNormalPantherDB::test_last_when_its_first', 'tests/test_normal.py::TestNormalPantherDB::test_update', 'tests/test_normal.py::TestNormalPantherDB::test_update_one_single_document', 'tests/test_normal.py::TestNormalPantherDB::test_update_one_single_document_not_found']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete>\n\n    def test_delete(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n>       obj = collection.find_one(first_name=first_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:417: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one>\n\n    def test_delete_one(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Delete One\n        is_deleted = collection.delete_one(first_name=first_name)\n        assert is_deleted is True\n    \n        # Find It Again\n>       new_obj = collection.find_one(first_name=first_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:445: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_fields>\n\n    def test_document_fields(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n        collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Find\n>       obj = collection.find_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:640: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_json_method>\n\n    def test_document_json_method(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n        collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Find\n>       obj = collection.find_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:680: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_save_method>\n\n    def test_document_save_method(self):\n        collection = self.db.collection(f.word())\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find One\n>       obj = collection.find_one(first_name=first_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:653: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_first>\n\n    def test_find_one_first(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n        collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.find_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:118: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_last>\n\n    def test_find_one_last(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Insert with specific names\n        collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Find\n>       obj = collection.find_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:135: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_none>\n\n    def test_find_one_none(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.find_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:149: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_with_kwargs_from_empty_collection>\n\n    def test_find_one_with_kwargs_from_empty_collection(self):\n        collection = self.db.collection(f.word())\n    \n        # Find\n>       obj = collection.find_one(first_name=f.first_name(), last_name=f.last_name())\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:156: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_without_kwargs_from_empty_collection>\n\n    def test_find_one_without_kwargs_from_empty_collection(self):\n        collection = self.db.collection(f.word())\n    \n        # Find\n>       obj = collection.find_one()\n\nrepos\\pantherdb\\tests\\test_normal.py:163: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x201263a4ad0>\ncriteria = None\n\n    def find_one(self, criteria=None):\n        if criteria:\n            return self.collection.find_one(criteria)\n        else:\n>           return self.collection.find_one()\nE           AttributeError: 'function' object has no attribute 'find_one'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:171: AttributeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_none>\n\n    def test_first_none(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.first(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:229: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x20126cd6530>\nkwargs = {'first_name': 'Justin', 'last_name': 'Moss'}\n\n    def first(self, **kwargs) -> PantherDocument | dict | None:\n>       return self.find_one(**kwargs)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:181: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_of_many_finds>\n\n    def test_first_of_many_finds(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n        expected = collection.insert_one(first_name=first_name, last_name=last_name)\n        collection.insert_one(first_name=first_name, last_name=last_name)\n        collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.first(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:198: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x20126cd23c0>\nkwargs = {'first_name': 'Mary', 'last_name': 'Barber'}\n\n    def first(self, **kwargs) -> PantherDocument | dict | None:\n>       return self.find_one(**kwargs)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:181: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_when_its_first>\n\n    def test_first_when_its_first(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n        collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.first(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x20126cd2450>\nkwargs = {'first_name': 'Jonathan', 'last_name': 'Lam'}\n\n    def first(self, **kwargs) -> PantherDocument | dict | None:\n>       return self.find_one(**kwargs)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:181: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_when_its_last>\n\n    def test_first_when_its_last(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Insert with specific names\n        expected = collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Find\n>       obj = collection.first(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:214: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x20126cd24e0>\nkwargs = {'first_name': 'Nicole', 'last_name': 'Moore'}\n\n    def first(self, **kwargs) -> PantherDocument | dict | None:\n>       return self.find_one(**kwargs)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:181: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_with_kwargs_from_empty_collection>\n\n    def test_first_with_kwargs_from_empty_collection(self):\n        collection = self.db.collection(f.word())\n    \n        # Find\n>       obj = collection.first(first_name=f.first_name(), last_name=f.last_name())\n\nrepos\\pantherdb\\tests\\test_normal.py:236: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x20126cd28d0>\nkwargs = {'first_name': 'Daniel', 'last_name': 'Martinez'}\n\n    def first(self, **kwargs) -> PantherDocument | dict | None:\n>       return self.find_one(**kwargs)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:181: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_without_kwargs_from_empty_collection>\n\n    def test_first_without_kwargs_from_empty_collection(self):\n        collection = self.db.collection(f.word())\n    \n        # Find\n>       obj = collection.first()\n\nrepos\\pantherdb\\tests\\test_normal.py:243: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:181: in first\n    return self.find_one(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x20126cd2840>\ncriteria = None\n\n    def find_one(self, criteria=None):\n        if criteria:\n            return self.collection.find_one(criteria)\n        else:\n>           return self.collection.find_one()\nE           AttributeError: 'function' object has no attribute 'find_one'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:171: AttributeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_when_its_first>\n\n    def test_last_when_its_first(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n        collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.first(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:259: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x20126cd2c30>\nkwargs = {'first_name': 'Andrew', 'last_name': 'Glass'}\n\n    def first(self, **kwargs) -> PantherDocument | dict | None:\n>       return self.find_one(**kwargs)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:181: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update>\n\n    def test_update(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find One\n>       obj = collection.find_one(first_name=first_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:540: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_one_single_document>\n\n    def test_update_one_single_document(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Update One\n        new_name = f.first_name()\n        is_updated = collection.update_one({'first_name': first_name}, first_name=new_name)\n        assert is_updated is True\n    \n        # Find with old name\n>       old_obj = collection.find_one(first_name=first_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:570: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_one_single_document_not_found>\n\n    def test_update_one_single_document_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Update One\n        new_name = f.first_name()\n        is_updated = collection.update_one({'first_name': f.first_name()}, first_name=new_name)\n        assert is_updated is False\n    \n        # Find with old name\n>       old_obj = collection.find_one(first_name=first_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:593: TypeError""]"
pantherdb,find_one,"def find_one(self, **kwargs) -> PantherDocument | dict | None:
    documents = self._get_collection()
    if not documents:
        return None
    if not kwargs:
        return self.__create_result(documents[0])
    for _, d in self._find(documents, **kwargs):
        return d","The `find_one` function is responsible for searching and returning a single document from a collection based on the provided criteria. If no criteria are provided, it returns the first document in the collection. This function is part of a class context and interacts with other class methods to retrieve and filter the documents before returning the selected one.",3,"def find_one(self, criteria=None):
    if criteria is None:
        return self.collection[0]
    
    for doc in self.collection:
        if criteria in doc:
            return doc

    return None",['./repos/pantherdb\\tests'],"25 Passed, 20 Failed",25,20,"['tests/test_normal.py::TestNormalPantherDB::test_delete', 'tests/test_normal.py::TestNormalPantherDB::test_delete_one', 'tests/test_normal.py::TestNormalPantherDB::test_document_fields', 'tests/test_normal.py::TestNormalPantherDB::test_document_json_method', 'tests/test_normal.py::TestNormalPantherDB::test_document_save_method', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_first', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_last', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_none', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_with_kwargs_from_empty_collection', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_without_kwargs_from_empty_collection', 'tests/test_normal.py::TestNormalPantherDB::test_first_none', 'tests/test_normal.py::TestNormalPantherDB::test_first_of_many_finds', 'tests/test_normal.py::TestNormalPantherDB::test_first_when_its_first', 'tests/test_normal.py::TestNormalPantherDB::test_first_when_its_last', 'tests/test_normal.py::TestNormalPantherDB::test_first_with_kwargs_from_empty_collection', 'tests/test_normal.py::TestNormalPantherDB::test_first_without_kwargs_from_empty_collection', 'tests/test_normal.py::TestNormalPantherDB::test_last_when_its_first', 'tests/test_normal.py::TestNormalPantherDB::test_update', 'tests/test_normal.py::TestNormalPantherDB::test_update_one_single_document', 'tests/test_normal.py::TestNormalPantherDB::test_update_one_single_document_not_found']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete>\n\n    def test_delete(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n>       obj = collection.find_one(first_name=first_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:417: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one>\n\n    def test_delete_one(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Delete One\n        is_deleted = collection.delete_one(first_name=first_name)\n        assert is_deleted is True\n    \n        # Find It Again\n>       new_obj = collection.find_one(first_name=first_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:445: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_fields>\n\n    def test_document_fields(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n        collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Find\n>       obj = collection.find_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:640: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_json_method>\n\n    def test_document_json_method(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n        collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Find\n>       obj = collection.find_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:680: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_save_method>\n\n    def test_document_save_method(self):\n        collection = self.db.collection(f.word())\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find One\n>       obj = collection.find_one(first_name=first_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:653: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_first>\n\n    def test_find_one_first(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n        collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.find_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:118: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_last>\n\n    def test_find_one_last(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Insert with specific names\n        collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Find\n>       obj = collection.find_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:135: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_none>\n\n    def test_find_one_none(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.find_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:149: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_with_kwargs_from_empty_collection>\n\n    def test_find_one_with_kwargs_from_empty_collection(self):\n        collection = self.db.collection(f.word())\n    \n        # Find\n>       obj = collection.find_one(first_name=f.first_name(), last_name=f.last_name())\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:156: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_without_kwargs_from_empty_collection>\n\n    def test_find_one_without_kwargs_from_empty_collection(self):\n        collection = self.db.collection(f.word())\n    \n        # Find\n>       obj = collection.find_one()\n\nrepos\\pantherdb\\tests\\test_normal.py:163: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x22403324ad0>\ncriteria = None\n\n    def find_one(self, criteria=None):\n        if criteria is None:\n>           return self.collection[0]\nE           TypeError: 'method' object is not subscriptable\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:169: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_none>\n\n    def test_first_none(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.first(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:229: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x22403c5a530>\nkwargs = {'first_name': 'Jessica', 'last_name': 'Hernandez'}\n\n    def first(self, **kwargs) -> PantherDocument | dict | None:\n>       return self.find_one(**kwargs)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:183: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_of_many_finds>\n\n    def test_first_of_many_finds(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n        expected = collection.insert_one(first_name=first_name, last_name=last_name)\n        collection.insert_one(first_name=first_name, last_name=last_name)\n        collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.first(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:198: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x22403c56450>\nkwargs = {'first_name': 'Charles', 'last_name': 'Roberts'}\n\n    def first(self, **kwargs) -> PantherDocument | dict | None:\n>       return self.find_one(**kwargs)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:183: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_when_its_first>\n\n    def test_first_when_its_first(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n        collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.first(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x22403c564e0>\nkwargs = {'first_name': 'Rachael', 'last_name': 'Brooks'}\n\n    def first(self, **kwargs) -> PantherDocument | dict | None:\n>       return self.find_one(**kwargs)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:183: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_when_its_last>\n\n    def test_first_when_its_last(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Insert with specific names\n        expected = collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Find\n>       obj = collection.first(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:214: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x22403c56570>\nkwargs = {'first_name': 'Laurie', 'last_name': 'White'}\n\n    def first(self, **kwargs) -> PantherDocument | dict | None:\n>       return self.find_one(**kwargs)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:183: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_with_kwargs_from_empty_collection>\n\n    def test_first_with_kwargs_from_empty_collection(self):\n        collection = self.db.collection(f.word())\n    \n        # Find\n>       obj = collection.first(first_name=f.first_name(), last_name=f.last_name())\n\nrepos\\pantherdb\\tests\\test_normal.py:236: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x22403c56960>\nkwargs = {'first_name': 'Angela', 'last_name': 'Sullivan'}\n\n    def first(self, **kwargs) -> PantherDocument | dict | None:\n>       return self.find_one(**kwargs)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:183: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_without_kwargs_from_empty_collection>\n\n    def test_first_without_kwargs_from_empty_collection(self):\n        collection = self.db.collection(f.word())\n    \n        # Find\n>       obj = collection.first()\n\nrepos\\pantherdb\\tests\\test_normal.py:243: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:183: in first\n    return self.find_one(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x22403c568d0>\ncriteria = None\n\n    def find_one(self, criteria=None):\n        if criteria is None:\n>           return self.collection[0]\nE           TypeError: 'method' object is not subscriptable\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:169: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_when_its_first>\n\n    def test_last_when_its_first(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n        collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.first(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:259: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x22403c56cc0>\nkwargs = {'first_name': 'Tiffany', 'last_name': 'Duran'}\n\n    def first(self, **kwargs) -> PantherDocument | dict | None:\n>       return self.find_one(**kwargs)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:183: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update>\n\n    def test_update(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find One\n>       obj = collection.find_one(first_name=first_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:540: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_one_single_document>\n\n    def test_update_one_single_document(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Update One\n        new_name = f.first_name()\n        is_updated = collection.update_one({'first_name': first_name}, first_name=new_name)\n        assert is_updated is True\n    \n        # Find with old name\n>       old_obj = collection.find_one(first_name=first_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:570: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_one_single_document_not_found>\n\n    def test_update_one_single_document_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Update One\n        new_name = f.first_name()\n        is_updated = collection.update_one({'first_name': f.first_name()}, first_name=new_name)\n        assert is_updated is False\n    \n        # Find with old name\n>       old_obj = collection.find_one(first_name=first_name)\nE       TypeError: PantherCollection.find_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:593: TypeError""]"
pantherdb,find,"def find(self, **kwargs) -> Cursor | List[PantherDocument | dict]:
    documents = self._get_collection()
    result = [d for _, d in self._find(documents, **kwargs) if d is not None]
    if self.return_cursor:
        return Cursor(result, kwargs)
    return result","The goal of this function is to find documents in a collection based on specified criteria, passed as keyword arguments. It retrieves the collection, filters the documents based on the criteria, and returns either a list of documents or a Cursor object if specified. This function is likely part of a class that interacts with a database or data source to query and retrieve documents.",1,"def find(self, return_cursor=False):
    collection = self.get_collection()
    filtered_documents = [doc for doc in collection if all(item in doc.items() for item in self.criteria.items())]
    if return_cursor:
        return Cursor(filtered_documents)
    else:
        return filtered_documents",['./repos/pantherdb\\tests'],"36 Passed, 9 Failed",36,9,"['tests/test_normal.py::TestNormalPantherDB::test_count_with_filter', 'tests/test_normal.py::TestNormalPantherDB::test_find_response_type', 'tests/test_normal.py::TestNormalPantherDB::test_find_with_filter', 'tests/test_normal.py::TestNormalPantherDB::test_find_without_filter', 'tests/test_normal.py::TestNormalPantherDB::test_update_many', 'tests/test_normal.py::TestCursorPantherDB::test_find_response_type', 'tests/test_normal.py::TestCursorPantherDB::test_find_with_filter', 'tests/test_normal.py::TestCursorPantherDB::test_find_with_sort', 'tests/test_normal.py::TestCursorPantherDB::test_find_without_filter']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_count_with_filter>\n\n    def test_count_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        # Insert with specific names\n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        count_specific = collection.count(first_name=first_name)\n        assert count_specific == _count_2\n>       assert count_specific == len(collection.find(first_name=first_name))\nE       TypeError: PantherCollection.find() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:403: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_response_type>\n\n    def test_find_response_type(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n>       objs = collection.find(first_name=first_name)\nE       TypeError: PantherCollection.find() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:333: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_with_filter>\n\n    def test_find_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Insert with specific names\n        first_name = f.first_name()\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n>       objs = collection.find(first_name=first_name)\nE       TypeError: PantherCollection.find() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:352: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_without_filter>\n\n    def test_find_without_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        # Insert with specific names\n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n>       objs = collection.find()\n\nrepos\\pantherdb\\tests\\test_normal.py:372: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c4d0e3e170>\nreturn_cursor = False\n\n    def find(self, return_cursor=False):\n>       collection = self.get_collection()\nE       AttributeError: 'PantherCollection' object has no attribute 'get_collection'. Did you mean: 'collection'?\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:177: AttributeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_many>\n\n    def test_update_many(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Update Many\n        new_name = f.first_name()\n        updated_count = collection.update_many({'first_name': first_name}, first_name=new_name)\n        assert updated_count == _count_2\n    \n        # Find Them with old name\n>       objs = collection.find(first_name=first_name)\nE       TypeError: PantherCollection.find() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:619: TypeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_response_type>\n\n    def test_find_response_type(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n>       objs = collection.find(first_name=first_name)\nE       TypeError: PantherCollection.find() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:715: TypeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_with_filter>\n\n    def test_find_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Insert with specific names\n        first_name = f.first_name()\n        _count = f.random.randint(2, 10)\n        last_names = []\n        for i in range(_count):\n            last_name = f.last_name()\n            last_names.append(last_name)\n            collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Find\n>       objs = collection.find(first_name=first_name)\nE       TypeError: PantherCollection.find() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:737: TypeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_with_sort>\n\n    def test_find_with_sort(self):\n        collection = self.db.collection(f.word())\n    \n        # Insert with specific values\n        collection.insert_one(first_name='A', last_name=0)\n        collection.insert_one(first_name='A', last_name=1)\n        collection.insert_one(first_name='B', last_name=0)\n        collection.insert_one(first_name='B', last_name=1)\n    \n        # Find without sort\n>       objs = collection.find()\n\nrepos\\pantherdb\\tests\\test_normal.py:784: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c4d0e3e030>\nreturn_cursor = False\n\n    def find(self, return_cursor=False):\n>       collection = self.get_collection()\nE       AttributeError: 'PantherCollection' object has no attribute 'get_collection'. Did you mean: 'collection'?\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:177: AttributeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_without_filter>\n\n    def test_find_without_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        # Insert with specific names\n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n>       objs = collection.find()\n\nrepos\\pantherdb\\tests\\test_normal.py:758: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c4d0e3f750>\nreturn_cursor = False\n\n    def find(self, return_cursor=False):\n>       collection = self.get_collection()\nE       AttributeError: 'PantherCollection' object has no attribute 'get_collection'. Did you mean: 'collection'?\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:177: AttributeError""]"
pantherdb,find,"def find(self, **kwargs) -> Cursor | List[PantherDocument | dict]:
    documents = self._get_collection()
    result = [d for _, d in self._find(documents, **kwargs) if d is not None]
    if self.return_cursor:
        return Cursor(result, kwargs)
    return result","The goal of this function is to find documents in a collection based on specified criteria, passed as keyword arguments. It retrieves the collection, filters the documents based on the criteria, and returns either a list of documents or a Cursor object if specified. This function is likely part of a class that interacts with a database or data source to query and retrieve documents.",2,"def find(self, return_cursor=False):
    collection = self.get_collection()
    filtered_documents = []

    for document in collection:
        if self.matches_criteria(document):
            filtered_documents.append(document)

    if return_cursor:
        return collection.find(filtered_documents)
    else:
        return filtered_documents",['./repos/pantherdb\\tests'],"36 Passed, 9 Failed",36,9,"['tests/test_normal.py::TestNormalPantherDB::test_count_with_filter', 'tests/test_normal.py::TestNormalPantherDB::test_find_response_type', 'tests/test_normal.py::TestNormalPantherDB::test_find_with_filter', 'tests/test_normal.py::TestNormalPantherDB::test_find_without_filter', 'tests/test_normal.py::TestNormalPantherDB::test_update_many', 'tests/test_normal.py::TestCursorPantherDB::test_find_response_type', 'tests/test_normal.py::TestCursorPantherDB::test_find_with_filter', 'tests/test_normal.py::TestCursorPantherDB::test_find_with_sort', 'tests/test_normal.py::TestCursorPantherDB::test_find_without_filter']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_count_with_filter>\n\n    def test_count_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        # Insert with specific names\n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        count_specific = collection.count(first_name=first_name)\n        assert count_specific == _count_2\n>       assert count_specific == len(collection.find(first_name=first_name))\nE       TypeError: PantherCollection.find() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:403: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_response_type>\n\n    def test_find_response_type(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n>       objs = collection.find(first_name=first_name)\nE       TypeError: PantherCollection.find() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:333: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_with_filter>\n\n    def test_find_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Insert with specific names\n        first_name = f.first_name()\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n>       objs = collection.find(first_name=first_name)\nE       TypeError: PantherCollection.find() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:352: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_without_filter>\n\n    def test_find_without_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        # Insert with specific names\n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n>       objs = collection.find()\n\nrepos\\pantherdb\\tests\\test_normal.py:372: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x17d4a1d2030>\nreturn_cursor = False\n\n    def find(self, return_cursor=False):\n>       collection = self.get_collection()\nE       AttributeError: 'PantherCollection' object has no attribute 'get_collection'. Did you mean: 'collection'?\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:177: AttributeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_many>\n\n    def test_update_many(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Update Many\n        new_name = f.first_name()\n        updated_count = collection.update_many({'first_name': first_name}, first_name=new_name)\n        assert updated_count == _count_2\n    \n        # Find Them with old name\n>       objs = collection.find(first_name=first_name)\nE       TypeError: PantherCollection.find() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:619: TypeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_response_type>\n\n    def test_find_response_type(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n>       objs = collection.find(first_name=first_name)\nE       TypeError: PantherCollection.find() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:715: TypeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_with_filter>\n\n    def test_find_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Insert with specific names\n        first_name = f.first_name()\n        _count = f.random.randint(2, 10)\n        last_names = []\n        for i in range(_count):\n            last_name = f.last_name()\n            last_names.append(last_name)\n            collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Find\n>       objs = collection.find(first_name=first_name)\nE       TypeError: PantherCollection.find() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:737: TypeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_with_sort>\n\n    def test_find_with_sort(self):\n        collection = self.db.collection(f.word())\n    \n        # Insert with specific values\n        collection.insert_one(first_name='A', last_name=0)\n        collection.insert_one(first_name='A', last_name=1)\n        collection.insert_one(first_name='B', last_name=0)\n        collection.insert_one(first_name='B', last_name=1)\n    \n        # Find without sort\n>       objs = collection.find()\n\nrepos\\pantherdb\\tests\\test_normal.py:784: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x17d4a1d1ef0>\nreturn_cursor = False\n\n    def find(self, return_cursor=False):\n>       collection = self.get_collection()\nE       AttributeError: 'PantherCollection' object has no attribute 'get_collection'. Did you mean: 'collection'?\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:177: AttributeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_without_filter>\n\n    def test_find_without_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        # Insert with specific names\n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n>       objs = collection.find()\n\nrepos\\pantherdb\\tests\\test_normal.py:758: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x17d4a1d3610>\nreturn_cursor = False\n\n    def find(self, return_cursor=False):\n>       collection = self.get_collection()\nE       AttributeError: 'PantherCollection' object has no attribute 'get_collection'. Did you mean: 'collection'?\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:177: AttributeError""]"
pantherdb,find,"def find(self, **kwargs) -> Cursor | List[PantherDocument | dict]:
    documents = self._get_collection()
    result = [d for _, d in self._find(documents, **kwargs) if d is not None]
    if self.return_cursor:
        return Cursor(result, kwargs)
    return result","The goal of this function is to find documents in a collection based on specified criteria, passed as keyword arguments. It retrieves the collection, filters the documents based on the criteria, and returns either a list of documents or a Cursor object if specified. This function is likely part of a class that interacts with a database or data source to query and retrieve documents.",3,"def find(self, return_cursor=False):
    collection = self.retrieve_collection()
    filtered_documents = [doc for doc in collection if self.meets_criteria(doc)]
    if return_cursor:
        return Cursor(filtered_documents)
    else:
        return filtered_documents",['./repos/pantherdb\\tests'],"36 Passed, 9 Failed",36,9,"['tests/test_normal.py::TestNormalPantherDB::test_count_with_filter', 'tests/test_normal.py::TestNormalPantherDB::test_find_response_type', 'tests/test_normal.py::TestNormalPantherDB::test_find_with_filter', 'tests/test_normal.py::TestNormalPantherDB::test_find_without_filter', 'tests/test_normal.py::TestNormalPantherDB::test_update_many', 'tests/test_normal.py::TestCursorPantherDB::test_find_response_type', 'tests/test_normal.py::TestCursorPantherDB::test_find_with_filter', 'tests/test_normal.py::TestCursorPantherDB::test_find_with_sort', 'tests/test_normal.py::TestCursorPantherDB::test_find_without_filter']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_count_with_filter>\n\n    def test_count_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        # Insert with specific names\n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        count_specific = collection.count(first_name=first_name)\n        assert count_specific == _count_2\n>       assert count_specific == len(collection.find(first_name=first_name))\nE       TypeError: PantherCollection.find() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:403: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_response_type>\n\n    def test_find_response_type(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n>       objs = collection.find(first_name=first_name)\nE       TypeError: PantherCollection.find() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:333: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_with_filter>\n\n    def test_find_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Insert with specific names\n        first_name = f.first_name()\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n>       objs = collection.find(first_name=first_name)\nE       TypeError: PantherCollection.find() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:352: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_without_filter>\n\n    def test_find_without_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        # Insert with specific names\n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n>       objs = collection.find()\n\nrepos\\pantherdb\\tests\\test_normal.py:372: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2373989e030>\nreturn_cursor = False\n\n    def find(self, return_cursor=False):\n>       collection = self.retrieve_collection()\nE       AttributeError: 'PantherCollection' object has no attribute 'retrieve_collection'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:177: AttributeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_many>\n\n    def test_update_many(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Update Many\n        new_name = f.first_name()\n        updated_count = collection.update_many({'first_name': first_name}, first_name=new_name)\n        assert updated_count == _count_2\n    \n        # Find Them with old name\n>       objs = collection.find(first_name=first_name)\nE       TypeError: PantherCollection.find() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:619: TypeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_response_type>\n\n    def test_find_response_type(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n>       objs = collection.find(first_name=first_name)\nE       TypeError: PantherCollection.find() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:715: TypeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_with_filter>\n\n    def test_find_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Insert with specific names\n        first_name = f.first_name()\n        _count = f.random.randint(2, 10)\n        last_names = []\n        for i in range(_count):\n            last_name = f.last_name()\n            last_names.append(last_name)\n            collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Find\n>       objs = collection.find(first_name=first_name)\nE       TypeError: PantherCollection.find() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:737: TypeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_with_sort>\n\n    def test_find_with_sort(self):\n        collection = self.db.collection(f.word())\n    \n        # Insert with specific values\n        collection.insert_one(first_name='A', last_name=0)\n        collection.insert_one(first_name='A', last_name=1)\n        collection.insert_one(first_name='B', last_name=0)\n        collection.insert_one(first_name='B', last_name=1)\n    \n        # Find without sort\n>       objs = collection.find()\n\nrepos\\pantherdb\\tests\\test_normal.py:784: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2373989def0>\nreturn_cursor = False\n\n    def find(self, return_cursor=False):\n>       collection = self.retrieve_collection()\nE       AttributeError: 'PantherCollection' object has no attribute 'retrieve_collection'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:177: AttributeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_without_filter>\n\n    def test_find_without_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        # Insert with specific names\n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n>       objs = collection.find()\n\nrepos\\pantherdb\\tests\\test_normal.py:758: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2373989f390>\nreturn_cursor = False\n\n    def find(self, return_cursor=False):\n>       collection = self.retrieve_collection()\nE       AttributeError: 'PantherCollection' object has no attribute 'retrieve_collection'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:177: AttributeError""]"
pantherdb,last,"def last(self, **kwargs) -> PantherDocument | dict | None:
    documents = self._get_collection()
    documents.reverse()
    if not documents:
        return None
    if not kwargs:
        return self.__create_result(documents[0])
    for _, d in self._find(documents, **kwargs):
        return d","The goal of this function is to retrieve the last document from a collection, either as a PantherDocument object, a dictionary, or None if the collection is empty. It can also filter the results based on key-value arguments provided. If no filtering arguments are given, it returns the last document in the collection. If filtering arguments are provided, it returns the last document that matches the criteria.",1,"def last(self, **kwargs):
    if not kwargs:
        return self.collection.find_one(sort=[('_id', -1)])
    else:
        return self.collection.find_one(kwargs, sort=[('_id', -1)])",['./repos/pantherdb\\tests'],"40 Passed, 5 Failed",40,5,"['tests/test_normal.py::TestNormalPantherDB::test_last_none', 'tests/test_normal.py::TestNormalPantherDB::test_last_of_many_finds', 'tests/test_normal.py::TestNormalPantherDB::test_last_when_its_last', 'tests/test_normal.py::TestNormalPantherDB::test_last_with_kwargs_from_empty_collection', 'tests/test_normal.py::TestNormalPantherDB::test_last_without_kwargs_from_empty_collection']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_none>\n\n    def test_last_none(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.last(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:309: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2398896b020>\nkwargs = {'first_name': 'Angela', 'last_name': 'Harris'}\n\n    def last(self, **kwargs):\n        if not kwargs:\n            return self.collection.find_one(sort=[('_id', -1)])\n        else:\n>           return self.collection.find_one(kwargs, sort=[('_id', -1)])\nE           AttributeError: 'function' object has no attribute 'find_one'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:190: AttributeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_of_many_finds>\n\n    def test_last_of_many_finds(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n        collection.insert_one(first_name=first_name, last_name=last_name)\n        collection.insert_one(first_name=first_name, last_name=last_name)\n        expected = collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.last(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:278: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2398933dd00>\nkwargs = {'first_name': 'Brendan', 'last_name': 'Jackson'}\n\n    def last(self, **kwargs):\n        if not kwargs:\n            return self.collection.find_one(sort=[('_id', -1)])\n        else:\n>           return self.collection.find_one(kwargs, sort=[('_id', -1)])\nE           AttributeError: 'function' object has no attribute 'find_one'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:190: AttributeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_when_its_last>\n\n    def test_last_when_its_last(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Insert with specific names\n        expected = collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Find\n>       obj = collection.last(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:294: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2398933da30>\nkwargs = {'first_name': 'Janet', 'last_name': 'Mcconnell'}\n\n    def last(self, **kwargs):\n        if not kwargs:\n            return self.collection.find_one(sort=[('_id', -1)])\n        else:\n>           return self.collection.find_one(kwargs, sort=[('_id', -1)])\nE           AttributeError: 'function' object has no attribute 'find_one'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:190: AttributeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_with_kwargs_from_empty_collection>\n\n    def test_last_with_kwargs_from_empty_collection(self):\n        collection = self.db.collection(f.word())\n    \n        # Find\n>       obj = collection.last(first_name=f.first_name(), last_name=f.last_name())\n\nrepos\\pantherdb\\tests\\test_normal.py:316: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2398933d880>\nkwargs = {'first_name': 'Jeff', 'last_name': 'Robinson'}\n\n    def last(self, **kwargs):\n        if not kwargs:\n            return self.collection.find_one(sort=[('_id', -1)])\n        else:\n>           return self.collection.find_one(kwargs, sort=[('_id', -1)])\nE           AttributeError: 'function' object has no attribute 'find_one'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:190: AttributeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_without_kwargs_from_empty_collection>\n\n    def test_last_without_kwargs_from_empty_collection(self):\n        collection = self.db.collection(f.word())\n    \n        # Find\n>       obj = collection.last()\n\nrepos\\pantherdb\\tests\\test_normal.py:323: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2398933da30>\nkwargs = {}\n\n    def last(self, **kwargs):\n        if not kwargs:\n>           return self.collection.find_one(sort=[('_id', -1)])\nE           AttributeError: 'function' object has no attribute 'find_one'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:188: AttributeError""]"
pantherdb,last,"def last(self, **kwargs) -> PantherDocument | dict | None:
    documents = self._get_collection()
    documents.reverse()
    if not documents:
        return None
    if not kwargs:
        return self.__create_result(documents[0])
    for _, d in self._find(documents, **kwargs):
        return d","The goal of this function is to retrieve the last document from a collection, either as a PantherDocument object, a dictionary, or None if the collection is empty. It can also filter the results based on key-value arguments provided. If no filtering arguments are given, it returns the last document in the collection. If filtering arguments are provided, it returns the last document that matches the criteria.",2,"def last(self, **kwargs):
    if not kwargs:
        result = self.collection[-1] if self.collection else None
    else:
        filtered_collection = [doc for doc in self.collection if all(item in doc.items() for item in kwargs.items())]
        result = filtered_collection[-1] if filtered_collection else None
    return result",['./repos/pantherdb\\tests'],"40 Passed, 5 Failed",40,5,"['tests/test_normal.py::TestNormalPantherDB::test_last_none', 'tests/test_normal.py::TestNormalPantherDB::test_last_of_many_finds', 'tests/test_normal.py::TestNormalPantherDB::test_last_when_its_last', 'tests/test_normal.py::TestNormalPantherDB::test_last_with_kwargs_from_empty_collection', 'tests/test_normal.py::TestNormalPantherDB::test_last_without_kwargs_from_empty_collection']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_none>\n\n    def test_last_none(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.last(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:309: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1dba3cab410>\nkwargs = {'first_name': 'Heather', 'last_name': 'Robinson'}\n\n    def last(self, **kwargs):\n        if not kwargs:\n            result = self.collection[-1] if self.collection else None\n        else:\n>           filtered_collection = [doc for doc in self.collection if all((item in doc.items() for item in kwargs.items()))]\nE           TypeError: 'method' object is not iterable\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:190: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_of_many_finds>\n\n    def test_last_of_many_finds(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n        collection.insert_one(first_name=first_name, last_name=last_name)\n        collection.insert_one(first_name=first_name, last_name=last_name)\n        expected = collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.last(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:278: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1dba467dc70>\nkwargs = {'first_name': 'Robert', 'last_name': 'Padilla'}\n\n    def last(self, **kwargs):\n        if not kwargs:\n            result = self.collection[-1] if self.collection else None\n        else:\n>           filtered_collection = [doc for doc in self.collection if all((item in doc.items() for item in kwargs.items()))]\nE           TypeError: 'method' object is not iterable\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:190: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_when_its_last>\n\n    def test_last_when_its_last(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Insert with specific names\n        expected = collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Find\n>       obj = collection.last(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:294: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1dba467d9a0>\nkwargs = {'first_name': 'Kara', 'last_name': 'Glenn'}\n\n    def last(self, **kwargs):\n        if not kwargs:\n            result = self.collection[-1] if self.collection else None\n        else:\n>           filtered_collection = [doc for doc in self.collection if all((item in doc.items() for item in kwargs.items()))]\nE           TypeError: 'method' object is not iterable\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:190: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_with_kwargs_from_empty_collection>\n\n    def test_last_with_kwargs_from_empty_collection(self):\n        collection = self.db.collection(f.word())\n    \n        # Find\n>       obj = collection.last(first_name=f.first_name(), last_name=f.last_name())\n\nrepos\\pantherdb\\tests\\test_normal.py:316: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1dba467d7f0>\nkwargs = {'first_name': 'Russell', 'last_name': 'Holmes'}\n\n    def last(self, **kwargs):\n        if not kwargs:\n            result = self.collection[-1] if self.collection else None\n        else:\n>           filtered_collection = [doc for doc in self.collection if all((item in doc.items() for item in kwargs.items()))]\nE           TypeError: 'method' object is not iterable\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:190: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_without_kwargs_from_empty_collection>\n\n    def test_last_without_kwargs_from_empty_collection(self):\n        collection = self.db.collection(f.word())\n    \n        # Find\n>       obj = collection.last()\n\nrepos\\pantherdb\\tests\\test_normal.py:323: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1dba467d9a0>\nkwargs = {}\n\n    def last(self, **kwargs):\n        if not kwargs:\n>           result = self.collection[-1] if self.collection else None\nE           TypeError: 'method' object is not subscriptable\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:188: TypeError""]"
pantherdb,last,"def last(self, **kwargs) -> PantherDocument | dict | None:
    documents = self._get_collection()
    documents.reverse()
    if not documents:
        return None
    if not kwargs:
        return self.__create_result(documents[0])
    for _, d in self._find(documents, **kwargs):
        return d","The goal of this function is to retrieve the last document from a collection, either as a PantherDocument object, a dictionary, or None if the collection is empty. It can also filter the results based on key-value arguments provided. If no filtering arguments are given, it returns the last document in the collection. If filtering arguments are provided, it returns the last document that matches the criteria.",3,"def last(self, **kwargs):
    if not kwargs:
        return self.collection[-1] if self.collection else None
    else:
        for doc in reversed(self.collection):
            if all(key in doc and doc[key] == value for key, value in kwargs.items()):
                return doc
    return None",['./repos/pantherdb\\tests'],"39 Passed, 6 Failed",39,6,"['tests/test_normal.py::TestNormalPantherDB::test_last_none', 'tests/test_normal.py::TestNormalPantherDB::test_last_of_many_finds', 'tests/test_normal.py::TestNormalPantherDB::test_last_when_its_last', 'tests/test_normal.py::TestNormalPantherDB::test_last_with_kwargs_from_empty_collection', 'tests/test_normal.py::TestNormalPantherDB::test_last_without_kwargs_from_empty_collection', 'tests/test_normal.py::TestNormalPantherDB::test_update']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_none>\n\n    def test_last_none(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.last(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:309: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x27617abb020>\nkwargs = {'first_name': 'Emily', 'last_name': 'Simpson'}\n\n    def last(self, **kwargs):\n        if not kwargs:\n            return self.collection[-1] if self.collection else None\n        else:\n>           for doc in reversed(self.collection):\nE           TypeError: 'method' object is not reversible\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:190: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_of_many_finds>\n\n    def test_last_of_many_finds(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n        collection.insert_one(first_name=first_name, last_name=last_name)\n        collection.insert_one(first_name=first_name, last_name=last_name)\n        expected = collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Find\n>       obj = collection.last(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:278: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2761848de20>\nkwargs = {'first_name': 'Lisa', 'last_name': 'Hoover'}\n\n    def last(self, **kwargs):\n        if not kwargs:\n            return self.collection[-1] if self.collection else None\n        else:\n>           for doc in reversed(self.collection):\nE           TypeError: 'method' object is not reversible\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:190: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_when_its_last>\n\n    def test_last_when_its_last(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Insert with specific names\n        expected = collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Find\n>       obj = collection.last(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:294: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2761848dc70>\nkwargs = {'first_name': 'Sharon', 'last_name': 'Bates'}\n\n    def last(self, **kwargs):\n        if not kwargs:\n            return self.collection[-1] if self.collection else None\n        else:\n>           for doc in reversed(self.collection):\nE           TypeError: 'method' object is not reversible\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:190: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_with_kwargs_from_empty_collection>\n\n    def test_last_with_kwargs_from_empty_collection(self):\n        collection = self.db.collection(f.word())\n    \n        # Find\n>       obj = collection.last(first_name=f.first_name(), last_name=f.last_name())\n\nrepos\\pantherdb\\tests\\test_normal.py:316: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2761848dac0>\nkwargs = {'first_name': 'Marcus', 'last_name': 'Tyler'}\n\n    def last(self, **kwargs):\n        if not kwargs:\n            return self.collection[-1] if self.collection else None\n        else:\n>           for doc in reversed(self.collection):\nE           TypeError: 'method' object is not reversible\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:190: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_without_kwargs_from_empty_collection>\n\n    def test_last_without_kwargs_from_empty_collection(self):\n        collection = self.db.collection(f.word())\n    \n        # Find\n>       obj = collection.last()\n\nrepos\\pantherdb\\tests\\test_normal.py:323: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2761848e210>\nkwargs = {}\n\n    def last(self, **kwargs):\n        if not kwargs:\n>           return self.collection[-1] if self.collection else None\nE           TypeError: 'method' object is not subscriptable\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:188: TypeError"", 'self = <tests.test_normal.TestNormalPantherDB testMethod=test_update>\n\n    def test_update(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find One\n        obj = collection.find_one(first_name=first_name)\n        new_name = f.first_name()\n        obj.update(first_name=new_name)\n        assert obj.first_name == new_name\n    \n        # Find with old name\n        old_obj = collection.find_one(first_name=first_name)\n>       assert old_obj is None\nE       assert about(first_name=Daniel, last_name=Sanders, _id=01JRT9AZXH3MBWQZD3D091BTTR) is None\n\nrepos\\pantherdb\\tests\\test_normal.py:547: AssertionError']"
pantherdb,insert_one,"def insert_one(self, **kwargs) -> PantherDocument | dict:
    documents = self._get_collection()
    kwargs['_id'] = self.ulid.new()
    documents.append(kwargs)
    self._write_collection(documents)
    return self.__create_result(kwargs)","The goal of the `insert_one` function is to add a new document (record) to a collection. It generates a new unique identifier for the document, adds the document to the collection, and then returns the result of the operation. This function likely belongs to a class that interacts with a database or collection, as it references methods like `_get_collection` and `_write_collection`.",1,"def insert_one(self):
    new_document = {}
    new_document['_id'] = generate_unique_id()
    result = self._write_collection(new_document)
    return result",['./repos/pantherdb\\tests'],"11 Passed, 34 Failed",11,34,"['tests/test_normal.py::TestNormalPantherDB::test_count_with_filter', 'tests/test_normal.py::TestNormalPantherDB::test_delete', 'tests/test_normal.py::TestNormalPantherDB::test_delete_many', 'tests/test_normal.py::TestNormalPantherDB::test_delete_many_not_found', 'tests/test_normal.py::TestNormalPantherDB::test_delete_one', 'tests/test_normal.py::TestNormalPantherDB::test_delete_one_first', 'tests/test_normal.py::TestNormalPantherDB::test_delete_one_not_found', 'tests/test_normal.py::TestNormalPantherDB::test_document_fields', 'tests/test_normal.py::TestNormalPantherDB::test_document_json_method', 'tests/test_normal.py::TestNormalPantherDB::test_document_save_method', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_first', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_last', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_none', 'tests/test_normal.py::TestNormalPantherDB::test_find_response_type', 'tests/test_normal.py::TestNormalPantherDB::test_find_with_filter', 'tests/test_normal.py::TestNormalPantherDB::test_find_without_filter', 'tests/test_normal.py::TestNormalPantherDB::test_first_none', 'tests/test_normal.py::TestNormalPantherDB::test_first_of_many_finds', 'tests/test_normal.py::TestNormalPantherDB::test_first_when_its_first', 'tests/test_normal.py::TestNormalPantherDB::test_first_when_its_last', 'tests/test_normal.py::TestNormalPantherDB::test_id_assignments', 'tests/test_normal.py::TestNormalPantherDB::test_insert_one', 'tests/test_normal.py::TestNormalPantherDB::test_last_none', 'tests/test_normal.py::TestNormalPantherDB::test_last_of_many_finds', 'tests/test_normal.py::TestNormalPantherDB::test_last_when_its_first', 'tests/test_normal.py::TestNormalPantherDB::test_last_when_its_last', 'tests/test_normal.py::TestNormalPantherDB::test_update', 'tests/test_normal.py::TestNormalPantherDB::test_update_many', 'tests/test_normal.py::TestNormalPantherDB::test_update_one_single_document', 'tests/test_normal.py::TestNormalPantherDB::test_update_one_single_document_not_found', 'tests/test_normal.py::TestCursorPantherDB::test_find_response_type', 'tests/test_normal.py::TestCursorPantherDB::test_find_with_filter', 'tests/test_normal.py::TestCursorPantherDB::test_find_with_sort', 'tests/test_normal.py::TestCursorPantherDB::test_find_without_filter']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_count_with_filter>\n\n    def test_count_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:393: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c7557e0ad0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete>\n\n    def test_delete(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:410: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c7556374d0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_many>\n\n    def test_delete_many(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:496: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c755691940>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_many_not_found>\n\n    def test_delete_many_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:516: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c755692c40>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one>\n\n    def test_delete_one(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:435: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c755801fd0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one_first>\n\n    def test_delete_one_first(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:472: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c7558c4d10>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one_not_found>\n\n    def test_delete_one_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:456: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c7558c5370>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_fields>\n\n    def test_document_fields(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:637: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_json_method>\n\n    def test_document_json_method(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:677: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_save_method>\n\n    def test_document_save_method(self):\n        collection = self.db.collection(f.word())\n    \n        # Insert with specific name\n        first_name = f.first_name()\n>       collection.insert_one(first_name=first_name, last_name=f.last_name())\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:650: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_first>\n\n    def test_find_one_first(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:112: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_last>\n\n    def test_find_one_last(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c755910910>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_none>\n\n    def test_find_one_none(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:146: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c7559fc7a0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_response_type>\n\n    def test_find_response_type(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n>       collection.insert_one(first_name=first_name, last_name=f.last_name())\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:330: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_with_filter>\n\n    def test_find_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:343: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c7558a9a70>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_without_filter>\n\n    def test_find_without_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:363: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c75588efd0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_none>\n\n    def test_first_none(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:226: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c75588f250>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_of_many_finds>\n\n    def test_first_of_many_finds(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       expected = collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:190: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_when_its_first>\n\n    def test_first_when_its_first(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:173: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_when_its_last>\n\n    def test_first_when_its_last(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:208: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c75588bad0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_id_assignments>\n\n    def test_id_assignments(self):\n        collection = self.db.collection(f.word())\n        ids = set()\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           obj = collection.insert_one(first_name=f.first_name(), last_name=f.last_name())\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:98: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_insert_one>\n\n    def test_insert_one(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n>       obj = collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:87: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_none>\n\n    def test_last_none(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:306: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c7558e40e0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_of_many_finds>\n\n    def test_last_of_many_finds(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:270: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_when_its_first>\n\n    def test_last_when_its_first(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:253: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_when_its_last>\n\n    def test_last_when_its_last(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:288: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c7558e4830>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update>\n\n    def test_update(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:533: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c7558e4170>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_many>\n\n    def test_update_many(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:605: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c7558e4b00>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_one_single_document>\n\n    def test_update_one_single_document(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:558: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c7558e50a0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_one_single_document_not_found>\n\n    def test_update_one_single_document_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:581: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c7558e5370>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_response_type>\n\n    def test_find_response_type(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n>       collection.insert_one(first_name=first_name, last_name=f.last_name())\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:712: TypeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_with_filter>\n\n    def test_find_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:725: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestCursorPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c7558e51c0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:705: TypeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_with_sort>\n\n    def test_find_with_sort(self):\n        collection = self.db.collection(f.word())\n    \n        # Insert with specific values\n>       collection.insert_one(first_name='A', last_name=0)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:778: TypeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_without_filter>\n\n    def test_find_without_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:749: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestCursorPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c7558e5640>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:705: TypeError""]"
pantherdb,insert_one,"def insert_one(self, **kwargs) -> PantherDocument | dict:
    documents = self._get_collection()
    kwargs['_id'] = self.ulid.new()
    documents.append(kwargs)
    self._write_collection(documents)
    return self.__create_result(kwargs)","The goal of the `insert_one` function is to add a new document (record) to a collection. It generates a new unique identifier for the document, adds the document to the collection, and then returns the result of the operation. This function likely belongs to a class that interacts with a database or collection, as it references methods like `_get_collection` and `_write_collection`.",2,"def insert_one(self):
        new_document = {}  # create a new empty document
        new_document['_id'] = self.generate_unique_id()  # generate unique identifier
        self._get_collection().append(new_document)  # add document to collection
        return self._write_collection()  # return result of the operation",['./repos/pantherdb\\tests'],"11 Passed, 34 Failed",11,34,"['tests/test_normal.py::TestNormalPantherDB::test_count_with_filter', 'tests/test_normal.py::TestNormalPantherDB::test_delete', 'tests/test_normal.py::TestNormalPantherDB::test_delete_many', 'tests/test_normal.py::TestNormalPantherDB::test_delete_many_not_found', 'tests/test_normal.py::TestNormalPantherDB::test_delete_one', 'tests/test_normal.py::TestNormalPantherDB::test_delete_one_first', 'tests/test_normal.py::TestNormalPantherDB::test_delete_one_not_found', 'tests/test_normal.py::TestNormalPantherDB::test_document_fields', 'tests/test_normal.py::TestNormalPantherDB::test_document_json_method', 'tests/test_normal.py::TestNormalPantherDB::test_document_save_method', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_first', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_last', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_none', 'tests/test_normal.py::TestNormalPantherDB::test_find_response_type', 'tests/test_normal.py::TestNormalPantherDB::test_find_with_filter', 'tests/test_normal.py::TestNormalPantherDB::test_find_without_filter', 'tests/test_normal.py::TestNormalPantherDB::test_first_none', 'tests/test_normal.py::TestNormalPantherDB::test_first_of_many_finds', 'tests/test_normal.py::TestNormalPantherDB::test_first_when_its_first', 'tests/test_normal.py::TestNormalPantherDB::test_first_when_its_last', 'tests/test_normal.py::TestNormalPantherDB::test_id_assignments', 'tests/test_normal.py::TestNormalPantherDB::test_insert_one', 'tests/test_normal.py::TestNormalPantherDB::test_last_none', 'tests/test_normal.py::TestNormalPantherDB::test_last_of_many_finds', 'tests/test_normal.py::TestNormalPantherDB::test_last_when_its_first', 'tests/test_normal.py::TestNormalPantherDB::test_last_when_its_last', 'tests/test_normal.py::TestNormalPantherDB::test_update', 'tests/test_normal.py::TestNormalPantherDB::test_update_many', 'tests/test_normal.py::TestNormalPantherDB::test_update_one_single_document', 'tests/test_normal.py::TestNormalPantherDB::test_update_one_single_document_not_found', 'tests/test_normal.py::TestCursorPantherDB::test_find_response_type', 'tests/test_normal.py::TestCursorPantherDB::test_find_with_filter', 'tests/test_normal.py::TestCursorPantherDB::test_find_with_sort', 'tests/test_normal.py::TestCursorPantherDB::test_find_without_filter']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_count_with_filter>\n\n    def test_count_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:393: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x20700450ad0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete>\n\n    def test_delete(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:410: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2077fe474d0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_many>\n\n    def test_delete_many(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:496: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2077fea1940>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_many_not_found>\n\n    def test_delete_many_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:516: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2077fea2c40>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one>\n\n    def test_delete_one(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:435: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x20700471fd0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one_first>\n\n    def test_delete_one_first(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:472: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x207005b8c00>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one_not_found>\n\n    def test_delete_one_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:456: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x207005b9260>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_fields>\n\n    def test_document_fields(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:637: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_json_method>\n\n    def test_document_json_method(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:677: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_save_method>\n\n    def test_document_save_method(self):\n        collection = self.db.collection(f.word())\n    \n        # Insert with specific name\n        first_name = f.first_name()\n>       collection.insert_one(first_name=first_name, last_name=f.last_name())\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:650: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_first>\n\n    def test_find_one_first(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:112: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_last>\n\n    def test_find_one_last(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x20700578910>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_none>\n\n    def test_find_one_none(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:146: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x207006a8c80>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_response_type>\n\n    def test_find_response_type(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n>       collection.insert_one(first_name=first_name, last_name=f.last_name())\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:330: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_with_filter>\n\n    def test_find_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:343: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x207006b9b20>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_without_filter>\n\n    def test_find_without_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:363: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x207004fefd0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_none>\n\n    def test_first_none(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:226: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x207004ff250>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_of_many_finds>\n\n    def test_first_of_many_finds(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       expected = collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:190: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_when_its_first>\n\n    def test_first_when_its_first(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:173: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_when_its_last>\n\n    def test_first_when_its_last(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:208: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x207004fbad0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_id_assignments>\n\n    def test_id_assignments(self):\n        collection = self.db.collection(f.word())\n        ids = set()\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           obj = collection.insert_one(first_name=f.first_name(), last_name=f.last_name())\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:98: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_insert_one>\n\n    def test_insert_one(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n>       obj = collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:87: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_none>\n\n    def test_last_none(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:306: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2070054c0e0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_of_many_finds>\n\n    def test_last_of_many_finds(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:270: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_when_its_first>\n\n    def test_last_when_its_first(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:253: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_when_its_last>\n\n    def test_last_when_its_last(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:288: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2070054c830>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update>\n\n    def test_update(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:533: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2070054c170>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_many>\n\n    def test_update_many(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:605: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2070054cb00>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_one_single_document>\n\n    def test_update_one_single_document(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:558: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2070054d0a0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_one_single_document_not_found>\n\n    def test_update_one_single_document_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:581: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2070054d370>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_response_type>\n\n    def test_find_response_type(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n>       collection.insert_one(first_name=first_name, last_name=f.last_name())\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:712: TypeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_with_filter>\n\n    def test_find_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:725: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestCursorPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2070054d1c0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:705: TypeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_with_sort>\n\n    def test_find_with_sort(self):\n        collection = self.db.collection(f.word())\n    \n        # Insert with specific values\n>       collection.insert_one(first_name='A', last_name=0)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:778: TypeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_without_filter>\n\n    def test_find_without_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:749: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestCursorPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2070054d640>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:705: TypeError""]"
pantherdb,insert_one,"def insert_one(self, **kwargs) -> PantherDocument | dict:
    documents = self._get_collection()
    kwargs['_id'] = self.ulid.new()
    documents.append(kwargs)
    self._write_collection(documents)
    return self.__create_result(kwargs)","The goal of the `insert_one` function is to add a new document (record) to a collection. It generates a new unique identifier for the document, adds the document to the collection, and then returns the result of the operation. This function likely belongs to a class that interacts with a database or collection, as it references methods like `_get_collection` and `_write_collection`.",3,"def insert_one(self):
    new_document = {""_id"": generate_new_id(), ""data"": ""example""}
    collection = self._get_collection()
    result = collection.insert_one(new_document)
    return result",['./repos/pantherdb\\tests'],"11 Passed, 34 Failed",11,34,"['tests/test_normal.py::TestNormalPantherDB::test_count_with_filter', 'tests/test_normal.py::TestNormalPantherDB::test_delete', 'tests/test_normal.py::TestNormalPantherDB::test_delete_many', 'tests/test_normal.py::TestNormalPantherDB::test_delete_many_not_found', 'tests/test_normal.py::TestNormalPantherDB::test_delete_one', 'tests/test_normal.py::TestNormalPantherDB::test_delete_one_first', 'tests/test_normal.py::TestNormalPantherDB::test_delete_one_not_found', 'tests/test_normal.py::TestNormalPantherDB::test_document_fields', 'tests/test_normal.py::TestNormalPantherDB::test_document_json_method', 'tests/test_normal.py::TestNormalPantherDB::test_document_save_method', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_first', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_last', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_none', 'tests/test_normal.py::TestNormalPantherDB::test_find_response_type', 'tests/test_normal.py::TestNormalPantherDB::test_find_with_filter', 'tests/test_normal.py::TestNormalPantherDB::test_find_without_filter', 'tests/test_normal.py::TestNormalPantherDB::test_first_none', 'tests/test_normal.py::TestNormalPantherDB::test_first_of_many_finds', 'tests/test_normal.py::TestNormalPantherDB::test_first_when_its_first', 'tests/test_normal.py::TestNormalPantherDB::test_first_when_its_last', 'tests/test_normal.py::TestNormalPantherDB::test_id_assignments', 'tests/test_normal.py::TestNormalPantherDB::test_insert_one', 'tests/test_normal.py::TestNormalPantherDB::test_last_none', 'tests/test_normal.py::TestNormalPantherDB::test_last_of_many_finds', 'tests/test_normal.py::TestNormalPantherDB::test_last_when_its_first', 'tests/test_normal.py::TestNormalPantherDB::test_last_when_its_last', 'tests/test_normal.py::TestNormalPantherDB::test_update', 'tests/test_normal.py::TestNormalPantherDB::test_update_many', 'tests/test_normal.py::TestNormalPantherDB::test_update_one_single_document', 'tests/test_normal.py::TestNormalPantherDB::test_update_one_single_document_not_found', 'tests/test_normal.py::TestCursorPantherDB::test_find_response_type', 'tests/test_normal.py::TestCursorPantherDB::test_find_with_filter', 'tests/test_normal.py::TestCursorPantherDB::test_find_with_sort', 'tests/test_normal.py::TestCursorPantherDB::test_find_without_filter']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_count_with_filter>\n\n    def test_count_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:393: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x11a9e780ad0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete>\n\n    def test_delete(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:410: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x11a9e5d74d0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_many>\n\n    def test_delete_many(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:496: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x11a9e631a70>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_many_not_found>\n\n    def test_delete_many_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:516: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x11a9e632d70>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one>\n\n    def test_delete_one(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:435: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x11a9e7a1fd0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one_first>\n\n    def test_delete_one_first(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:472: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x11a9e874c00>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one_not_found>\n\n    def test_delete_one_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:456: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x11a9e875260>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_fields>\n\n    def test_document_fields(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:637: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_json_method>\n\n    def test_document_json_method(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:677: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_save_method>\n\n    def test_document_save_method(self):\n        collection = self.db.collection(f.word())\n    \n        # Insert with specific name\n        first_name = f.first_name()\n>       collection.insert_one(first_name=first_name, last_name=f.last_name())\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:650: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_first>\n\n    def test_find_one_first(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:112: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_last>\n\n    def test_find_one_last(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x11a9e8a8910>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_none>\n\n    def test_find_one_none(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:146: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x11a9e9d8c80>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_response_type>\n\n    def test_find_response_type(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n>       collection.insert_one(first_name=first_name, last_name=f.last_name())\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:330: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_with_filter>\n\n    def test_find_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:343: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x11a9e871a70>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_without_filter>\n\n    def test_find_without_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:363: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x11a9e82efd0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_none>\n\n    def test_first_none(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:226: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x11a9e82f250>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_of_many_finds>\n\n    def test_first_of_many_finds(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       expected = collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:190: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_when_its_first>\n\n    def test_first_when_its_first(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:173: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_when_its_last>\n\n    def test_first_when_its_last(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:208: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x11a9e82bb60>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_id_assignments>\n\n    def test_id_assignments(self):\n        collection = self.db.collection(f.word())\n        ids = set()\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           obj = collection.insert_one(first_name=f.first_name(), last_name=f.last_name())\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:98: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_insert_one>\n\n    def test_insert_one(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n>       obj = collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:87: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_none>\n\n    def test_last_none(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:306: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x11a9e8f8320>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_of_many_finds>\n\n    def test_last_of_many_finds(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:270: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_when_its_first>\n\n    def test_last_when_its_first(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:253: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_when_its_last>\n\n    def test_last_when_its_last(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:288: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x11a9e8f88c0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update>\n\n    def test_update(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:533: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x11a9e8f8290>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_many>\n\n    def test_update_many(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:605: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x11a9e8f8b90>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_one_single_document>\n\n    def test_update_one_single_document(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:558: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x11a9e8f9130>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_one_single_document_not_found>\n\n    def test_update_one_single_document_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:581: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestNormalPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x11a9e8f9400>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:30: TypeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_response_type>\n\n    def test_find_response_type(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n>       collection.insert_one(first_name=first_name, last_name=f.last_name())\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:712: TypeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_with_filter>\n\n    def test_find_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:725: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestCursorPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x11a9e8f9250>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:705: TypeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_with_sort>\n\n    def test_find_with_sort(self):\n        collection = self.db.collection(f.word())\n    \n        # Insert with specific values\n>       collection.insert_one(first_name='A', last_name=0)\nE       TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:778: TypeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_without_filter>\n\n    def test_find_without_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:749: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tests.test_normal.TestCursorPantherDB'>\ncollection = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x11a9e8f96d0>\n\n    @classmethod\n    def create_junk_document(cls, collection) -> int:\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nE           TypeError: PantherCollection.insert_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:705: TypeError""]"
pantherdb,delete_one,"def delete_one(self, **kwargs) -> bool:
    documents = self._get_collection()
    if not documents:
        return False
    if not kwargs:
        return False
    for i, _ in self._find(documents, **kwargs):
        if i is None:
            return False
        documents.pop(i)
        self._write_collection(documents)
        return True","The goal of this function is to delete a single document from a collection based on the provided key-value pairs (kwargs). It interacts with the class context by accessing the collection through the `_get_collection()` method, finding the document to delete using the `_find()` method, and then updating the collection by removing the document and writing it back using the `_write_collection()` method.",1,"def delete_one(self):
    collection = self._get_collection()
    document = self._find(**kwargs)
    if document:
        collection.remove(document)
        self._write_collection(collection)",['./repos/pantherdb\\tests'],"42 Passed, 3 Failed",42,3,"['tests/test_normal.py::TestNormalPantherDB::test_delete_one', 'tests/test_normal.py::TestNormalPantherDB::test_delete_one_first', 'tests/test_normal.py::TestNormalPantherDB::test_delete_one_not_found']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one>\n\n    def test_delete_one(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Delete One\n>       is_deleted = collection.delete_one(first_name=first_name)\nE       TypeError: PantherCollection.delete_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:441: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one_first>\n\n    def test_delete_one_first(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Delete One\n>       is_deleted = collection.delete_one(first_name=first_name)\nE       TypeError: PantherCollection.delete_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:480: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one_not_found>\n\n    def test_delete_one_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        first_name = f.first_name()\n    \n        # Delete One\n>       is_deleted = collection.delete_one(first_name=first_name)\nE       TypeError: PantherCollection.delete_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:461: TypeError""]"
pantherdb,delete_one,"def delete_one(self, **kwargs) -> bool:
    documents = self._get_collection()
    if not documents:
        return False
    if not kwargs:
        return False
    for i, _ in self._find(documents, **kwargs):
        if i is None:
            return False
        documents.pop(i)
        self._write_collection(documents)
        return True","The goal of this function is to delete a single document from a collection based on the provided key-value pairs (kwargs). It interacts with the class context by accessing the collection through the `_get_collection()` method, finding the document to delete using the `_find()` method, and then updating the collection by removing the document and writing it back using the `_write_collection()` method.",2,"def delete_one(self, **kwargs):
    collection = self._get_collection()
    document = self._find(**kwargs)
    
    if document:
        collection.remove(document)
        self._write_collection(collection)",['./repos/pantherdb\\tests'],"42 Passed, 3 Failed",42,3,"['tests/test_normal.py::TestNormalPantherDB::test_delete_one', 'tests/test_normal.py::TestNormalPantherDB::test_delete_one_first', 'tests/test_normal.py::TestNormalPantherDB::test_delete_one_not_found']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one>\n\n    def test_delete_one(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Delete One\n>       is_deleted = collection.delete_one(first_name=first_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:441: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2050531c3b0>\nkwargs = {'first_name': 'Joy'}\ncollection = [{'_id': '01JRT9CAJ9EFVA86J0ESWFQ7HR', 'first_name': 'Danielle0', 'last_name': 'Scott0'}, {'_id': '01JRT9CAJTCHV00B0EW... 'last_name': 'Burnett4'}, {'_id': '01JRT9CAMA0M3V4VKVF8KTV04D', 'first_name': 'Aaron5', 'last_name': 'Patrick5'}, ...]\n\n    def delete_one(self, **kwargs):\n        collection = self._get_collection()\n>       document = self._find(**kwargs)\nE       TypeError: PantherCollection._find() missing 1 required positional argument: '_documents'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:214: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one_first>\n\n    def test_delete_one_first(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Delete One\n>       is_deleted = collection.delete_one(first_name=first_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:480: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2050516acf0>\nkwargs = {'first_name': 'Brendan'}\ncollection = [{'_id': '01JRT9CAWV8J5GKCXQERZDKWTJ', 'first_name': 'Andrea0', 'last_name': 'Brown0'}, {'_id': '01JRT9CAXAYFHEGWR9HDT..., 'last_name': 'Barrett4'}, {'_id': '01JRT9CAYG1QJW6XJAM40RDHGR', 'first_name': 'Rhonda5', 'last_name': 'Perez5'}, ...]\n\n    def delete_one(self, **kwargs):\n        collection = self._get_collection()\n>       document = self._find(**kwargs)\nE       TypeError: PantherCollection._find() missing 1 required positional argument: '_documents'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:214: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one_not_found>\n\n    def test_delete_one_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        first_name = f.first_name()\n    \n        # Delete One\n>       is_deleted = collection.delete_one(first_name=first_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:461: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2050516b350>\nkwargs = {'first_name': 'Dylan'}\ncollection = [{'_id': '01JRT9CB3A37V6GPQX3BM3RQ20', 'first_name': 'Anita0', 'last_name': 'Dixon0'}, {'_id': '01JRT9CB3S79RCYV4GHN3A...homas4', 'last_name': 'Cook4'}, {'_id': '01JRT9CB59HJAZRRJZGRB1ZY21', 'first_name': 'Diana5', 'last_name': 'Wu5'}, ...]\n\n    def delete_one(self, **kwargs):\n        collection = self._get_collection()\n>       document = self._find(**kwargs)\nE       TypeError: PantherCollection._find() missing 1 required positional argument: '_documents'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:214: TypeError""]"
pantherdb,delete_one,"def delete_one(self, **kwargs) -> bool:
    documents = self._get_collection()
    if not documents:
        return False
    if not kwargs:
        return False
    for i, _ in self._find(documents, **kwargs):
        if i is None:
            return False
        documents.pop(i)
        self._write_collection(documents)
        return True","The goal of this function is to delete a single document from a collection based on the provided key-value pairs (kwargs). It interacts with the class context by accessing the collection through the `_get_collection()` method, finding the document to delete using the `_find()` method, and then updating the collection by removing the document and writing it back using the `_write_collection()` method.",3,"def delete_one(self, **kwargs):
    collection = self._get_collection()
    document_to_delete = self._find(kwargs)
    if document_to_delete:
        collection.remove(document_to_delete)
        self._write_collection(collection)",['./repos/pantherdb\\tests'],"42 Passed, 3 Failed",42,3,"['tests/test_normal.py::TestNormalPantherDB::test_delete_one', 'tests/test_normal.py::TestNormalPantherDB::test_delete_one_first', 'tests/test_normal.py::TestNormalPantherDB::test_delete_one_not_found']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one>\n\n    def test_delete_one(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Delete One\n>       is_deleted = collection.delete_one(first_name=first_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:441: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x27639f7c3b0>\nkwargs = {'first_name': 'Christopher'}\ncollection = [{'_id': '01JRT9CH60N6PSRJAF7N6WQBS9', 'first_name': 'Angela0', 'last_name': 'Ramirez0'}, {'_id': '01JRT9CH6EMK5A8VJNK...t_name': 'Franklin4'}, {'_id': '01JRT9CH7Z7W4B04242Z9NNZ0N', 'first_name': 'Rebecca5', 'last_name': 'Gutierrez5'}, ...]\ndocument_to_delete = <generator object PantherCollection._find at 0x0000027639DCA790>\n\n    def delete_one(self, **kwargs):\n        collection = self._get_collection()\n        document_to_delete = self._find(kwargs)\n        if document_to_delete:\n>           collection.remove(document_to_delete)\nE           ValueError: list.remove(x): x not in list\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:216: ValueError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one_first>\n\n    def test_delete_one_first(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Delete One\n>       is_deleted = collection.delete_one(first_name=first_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:480: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x27639dcae00>\nkwargs = {'first_name': 'Jason'}\ncollection = [{'_id': '01JRT9CHDYWHY5AXX0RN5BJZ7C', 'first_name': 'Michael0', 'last_name': 'Graves0'}, {'_id': '01JRT9CHEA3JM750BEV... 'last_name': 'Campbell4'}, {'_id': '01JRT9CHFYSGY8NPD8MXZ7JNKC', 'first_name': 'Brenda5', 'last_name': 'Cantu5'}, ...]\ndocument_to_delete = <generator object PantherCollection._find at 0x0000027639DCAF00>\n\n    def delete_one(self, **kwargs):\n        collection = self._get_collection()\n        document_to_delete = self._find(kwargs)\n        if document_to_delete:\n>           collection.remove(document_to_delete)\nE           ValueError: list.remove(x): x not in list\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:216: ValueError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one_not_found>\n\n    def test_delete_one_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        first_name = f.first_name()\n    \n        # Delete One\n>       is_deleted = collection.delete_one(first_name=first_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:461: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x27639dcb570>\nkwargs = {'first_name': 'Tommy'}\ncollection = [{'_id': '01JRT9CHN9R3GC6D2TASYENE42', 'first_name': 'Michele0', 'last_name': 'Carrillo0'}, {'_id': '01JRT9CHNQKYHDRM5...erly2', 'last_name': 'Wilson2'}, {'_id': '01JRT9CHPECNWAJ6N8NP2TZG2A', 'first_name': 'Anna3', 'last_name': 'Wallace3'}]\ndocument_to_delete = <generator object PantherCollection._find at 0x0000027639DCB670>\n\n    def delete_one(self, **kwargs):\n        collection = self._get_collection()\n        document_to_delete = self._find(kwargs)\n        if document_to_delete:\n>           collection.remove(document_to_delete)\nE           ValueError: list.remove(x): x not in list\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:216: ValueError""]"
pantherdb,delete_many,"def delete_many(self, **kwargs) -> int:
    documents = self._get_collection()
    if not documents:
        return 0
    if not kwargs:
        return 0
    indexes = [i for i, _ in self._find(documents, **kwargs) if i is not None]
    for i in indexes[::-1]:
        documents.pop(i)
    self._write_collection(documents)
    return len(indexes)","The goal of this function is to delete multiple documents from a collection based on the specified criteria provided as keyword arguments. It first retrieves the collection of documents, then finds the indexes of the documents that match the criteria. Finally, it removes these documents from the collection and returns the number of documents deleted. This function helps in managing and modifying the contents of the collection efficiently.",1,"def delete_many(self, criteria):
    documents = self.collection.find(criteria)
    indexes = [doc['_id'] for doc in documents]
    result = self.collection.delete_many({'_id': {'$in': indexes}})
    return result.deleted_count",['./repos/pantherdb\\tests'],"43 Passed, 2 Failed",43,2,"['tests/test_normal.py::TestNormalPantherDB::test_delete_many', 'tests/test_normal.py::TestNormalPantherDB::test_delete_many_not_found']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_many>\n\n    def test_delete_many(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Delete Many\n>       deleted_count = collection.delete_many(first_name=first_name)\nE       TypeError: PantherCollection.delete_many() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:505: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_many_not_found>\n\n    def test_delete_many_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        first_name = f.first_name()\n    \n        # Delete Many\n>       deleted_count = collection.delete_many(first_name=first_name)\nE       TypeError: PantherCollection.delete_many() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:521: TypeError""]"
pantherdb,delete_many,"def delete_many(self, **kwargs) -> int:
    documents = self._get_collection()
    if not documents:
        return 0
    if not kwargs:
        return 0
    indexes = [i for i, _ in self._find(documents, **kwargs) if i is not None]
    for i in indexes[::-1]:
        documents.pop(i)
    self._write_collection(documents)
    return len(indexes)","The goal of this function is to delete multiple documents from a collection based on the specified criteria provided as keyword arguments. It first retrieves the collection of documents, then finds the indexes of the documents that match the criteria. Finally, it removes these documents from the collection and returns the number of documents deleted. This function helps in managing and modifying the contents of the collection efficiently.",2,"def delete_many(self):
    documents = self.retrieve_documents()
    indexes = [i for i, doc in enumerate(documents) if self.match_criteria(doc)]
    for idx in sorted(indexes, reverse=True):
        del documents[idx]
    return len(indexes)",['./repos/pantherdb\\tests'],"43 Passed, 2 Failed",43,2,"['tests/test_normal.py::TestNormalPantherDB::test_delete_many', 'tests/test_normal.py::TestNormalPantherDB::test_delete_many_not_found']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_many>\n\n    def test_delete_many(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Delete Many\n>       deleted_count = collection.delete_many(first_name=first_name)\nE       TypeError: PantherCollection.delete_many() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:505: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_many_not_found>\n\n    def test_delete_many_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        first_name = f.first_name()\n    \n        # Delete Many\n>       deleted_count = collection.delete_many(first_name=first_name)\nE       TypeError: PantherCollection.delete_many() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:521: TypeError""]"
pantherdb,delete_many,"def delete_many(self, **kwargs) -> int:
    documents = self._get_collection()
    if not documents:
        return 0
    if not kwargs:
        return 0
    indexes = [i for i, _ in self._find(documents, **kwargs) if i is not None]
    for i in indexes[::-1]:
        documents.pop(i)
    self._write_collection(documents)
    return len(indexes)","The goal of this function is to delete multiple documents from a collection based on the specified criteria provided as keyword arguments. It first retrieves the collection of documents, then finds the indexes of the documents that match the criteria. Finally, it removes these documents from the collection and returns the number of documents deleted. This function helps in managing and modifying the contents of the collection efficiently.",3,"def delete_many(self, criteria):
    documents = self.retrieve_documents(criteria)
    indexes = [i for i, doc in enumerate(documents) if self.match_criteria(doc, criteria)]
    for index in sorted(indexes, reverse=True):
        del documents[index]
    return len(indexes)",['./repos/pantherdb\\tests'],"43 Passed, 2 Failed",43,2,"['tests/test_normal.py::TestNormalPantherDB::test_delete_many', 'tests/test_normal.py::TestNormalPantherDB::test_delete_many_not_found']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_many>\n\n    def test_delete_many(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Delete Many\n>       deleted_count = collection.delete_many(first_name=first_name)\nE       TypeError: PantherCollection.delete_many() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:505: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_many_not_found>\n\n    def test_delete_many_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        first_name = f.first_name()\n    \n        # Delete Many\n>       deleted_count = collection.delete_many(first_name=first_name)\nE       TypeError: PantherCollection.delete_many() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:521: TypeError""]"
pantherdb,update_one,"def update_one(self, condition: dict, **kwargs) -> bool:
    documents = self._get_collection()
    result = False
    if not condition:
        return result
    for d in documents:
        for k, v in condition.items():
            if d.get(k) != v:
                break
        else:
            result = True
            for new_k, new_v in kwargs.items():
                d[new_k] = new_v
            self._write_collection(documents)
            break
    return result","The goal of the function is to update a document in a collection based on a specified condition. It iterates through the collection to find a document that matches the condition, and if found, updates the document with the new key-value pairs provided in the arguments. The function returns a boolean value indicating whether the update was successful or not.

If this function is part of a class, it interacts with the class context by accessing the collection through the `_get_collection` method and writing the updated collection back using the `_write_collection` method.",1,"def update_one(self, condition, new_values):
    collection = self._get_collection()
    
    for document in collection:
        if condition in document:
            document.update(new_values)
            self._write_collection(collection)
            return True
    
    return False",['./repos/pantherdb\\tests'],"43 Passed, 2 Failed",43,2,"['tests/test_normal.py::TestNormalPantherDB::test_update_one_single_document', 'tests/test_normal.py::TestNormalPantherDB::test_update_one_single_document_not_found']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_one_single_document>\n\n    def test_update_one_single_document(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Update One\n        new_name = f.first_name()\n>       is_updated = collection.update_one({'first_name': first_name}, first_name=new_name)\nE       TypeError: PantherCollection.update_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:566: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_one_single_document_not_found>\n\n    def test_update_one_single_document_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Update One\n        new_name = f.first_name()\n>       is_updated = collection.update_one({'first_name': f.first_name()}, first_name=new_name)\nE       TypeError: PantherCollection.update_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:589: TypeError""]"
pantherdb,update_one,"def update_one(self, condition: dict, **kwargs) -> bool:
    documents = self._get_collection()
    result = False
    if not condition:
        return result
    for d in documents:
        for k, v in condition.items():
            if d.get(k) != v:
                break
        else:
            result = True
            for new_k, new_v in kwargs.items():
                d[new_k] = new_v
            self._write_collection(documents)
            break
    return result","The goal of the function is to update a document in a collection based on a specified condition. It iterates through the collection to find a document that matches the condition, and if found, updates the document with the new key-value pairs provided in the arguments. The function returns a boolean value indicating whether the update was successful or not.

If this function is part of a class, it interacts with the class context by accessing the collection through the `_get_collection` method and writing the updated collection back using the `_write_collection` method.",2,"def update_one(self, condition, new_values):
        collection = self._get_collection()
        
        for document in collection:
            if document == condition:
                document.update(new_values)
                self._write_collection(collection)
                return True
        
        return False",['./repos/pantherdb\\tests'],"43 Passed, 2 Failed",43,2,"['tests/test_normal.py::TestNormalPantherDB::test_update_one_single_document', 'tests/test_normal.py::TestNormalPantherDB::test_update_one_single_document_not_found']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_one_single_document>\n\n    def test_update_one_single_document(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Update One\n        new_name = f.first_name()\n>       is_updated = collection.update_one({'first_name': first_name}, first_name=new_name)\nE       TypeError: PantherCollection.update_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:566: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_one_single_document_not_found>\n\n    def test_update_one_single_document_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Update One\n        new_name = f.first_name()\n>       is_updated = collection.update_one({'first_name': f.first_name()}, first_name=new_name)\nE       TypeError: PantherCollection.update_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:589: TypeError""]"
pantherdb,update_one,"def update_one(self, condition: dict, **kwargs) -> bool:
    documents = self._get_collection()
    result = False
    if not condition:
        return result
    for d in documents:
        for k, v in condition.items():
            if d.get(k) != v:
                break
        else:
            result = True
            for new_k, new_v in kwargs.items():
                d[new_k] = new_v
            self._write_collection(documents)
            break
    return result","The goal of the function is to update a document in a collection based on a specified condition. It iterates through the collection to find a document that matches the condition, and if found, updates the document with the new key-value pairs provided in the arguments. The function returns a boolean value indicating whether the update was successful or not.

If this function is part of a class, it interacts with the class context by accessing the collection through the `_get_collection` method and writing the updated collection back using the `_write_collection` method.",3,"def update_one(self, condition, new_values):
    collection = self._get_collection()
    for doc in collection:
        if condition in doc:
            doc.update(new_values)
            self._write_collection(collection)
            return True
    return False",['./repos/pantherdb\\tests'],"43 Passed, 2 Failed",43,2,"['tests/test_normal.py::TestNormalPantherDB::test_update_one_single_document', 'tests/test_normal.py::TestNormalPantherDB::test_update_one_single_document_not_found']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_one_single_document>\n\n    def test_update_one_single_document(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Update One\n        new_name = f.first_name()\n>       is_updated = collection.update_one({'first_name': first_name}, first_name=new_name)\nE       TypeError: PantherCollection.update_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:566: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_one_single_document_not_found>\n\n    def test_update_one_single_document_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Update One\n        new_name = f.first_name()\n>       is_updated = collection.update_one({'first_name': f.first_name()}, first_name=new_name)\nE       TypeError: PantherCollection.update_one() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:589: TypeError""]"
pantherdb,update_many,"def update_many(self, condition: dict, **kwargs) -> int:
    documents = self._get_collection()
    if not condition:
        return 0
    updated_count = 0
    for d in documents:
        for k, v in condition.items():
            if d.get(k) != v:
                break
        else:
            updated_count += 1
            for new_k, new_v in kwargs.items():
                d[new_k] = new_v
    if updated_count:
        self._write_collection(documents)
    return updated_count","The goal of this function is to update multiple documents in a collection based on a given condition. It iterates through the documents and checks if each document meets the condition specified. If a document meets the condition, it updates the document with new key-value pairs provided as arguments. Finally, it returns the count of documents that were successfully updated. If any documents were updated, the function also writes the modified documents back to the collection.",1,"def update_many(self, condition, **kwargs):
    count = 0
    for document in self.collection:
        if condition(document):
            document.update(kwargs)
            count += 1
            
    if count > 0:
        self.write_back_to_collection()
        
    return count",['./repos/pantherdb\\tests'],"44 Passed, 1 Failed",44,1,['tests/test_normal.py::TestNormalPantherDB::test_update_many'],"[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_many>\n\n    def test_update_many(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Update Many\n        new_name = f.first_name()\n>       updated_count = collection.update_many({'first_name': first_name}, first_name=new_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:615: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x2a6c2d7b410>\ncondition = {'first_name': 'Jeffrey'}, kwargs = {'first_name': 'Anne'}\ncount = 0\n\n    def update_many(self, condition, **kwargs):\n        count = 0\n>       for document in self.collection:\nE       TypeError: 'method' object is not iterable\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:266: TypeError""]"
pantherdb,update_many,"def update_many(self, condition: dict, **kwargs) -> int:
    documents = self._get_collection()
    if not condition:
        return 0
    updated_count = 0
    for d in documents:
        for k, v in condition.items():
            if d.get(k) != v:
                break
        else:
            updated_count += 1
            for new_k, new_v in kwargs.items():
                d[new_k] = new_v
    if updated_count:
        self._write_collection(documents)
    return updated_count","The goal of this function is to update multiple documents in a collection based on a given condition. It iterates through the documents and checks if each document meets the condition specified. If a document meets the condition, it updates the document with new key-value pairs provided as arguments. Finally, it returns the count of documents that were successfully updated. If any documents were updated, the function also writes the modified documents back to the collection.",2,"def update_many(self, condition, **kwargs):
    count = 0
    for doc in self.collection:
        if condition(doc):
            doc.update(kwargs)
            count += 1
    if count > 0:
        self.write_to_collection()
    return count",['./repos/pantherdb\\tests'],"44 Passed, 1 Failed",44,1,['tests/test_normal.py::TestNormalPantherDB::test_update_many'],"[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_many>\n\n    def test_update_many(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Update Many\n        new_name = f.first_name()\n>       updated_count = collection.update_many({'first_name': first_name}, first_name=new_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:615: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[FileNotFoundError(2, 'No such file or directory') raised in repr()] PantherCollection object at 0x1c4bf3eb410>\ncondition = {'first_name': 'Joshua'}, kwargs = {'first_name': 'Sarah'}\ncount = 0\n\n    def update_many(self, condition, **kwargs):\n        count = 0\n>       for doc in self.collection:\nE       TypeError: 'method' object is not iterable\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:266: TypeError""]"
pantherdb,update_many,"def update_many(self, condition: dict, **kwargs) -> int:
    documents = self._get_collection()
    if not condition:
        return 0
    updated_count = 0
    for d in documents:
        for k, v in condition.items():
            if d.get(k) != v:
                break
        else:
            updated_count += 1
            for new_k, new_v in kwargs.items():
                d[new_k] = new_v
    if updated_count:
        self._write_collection(documents)
    return updated_count","The goal of this function is to update multiple documents in a collection based on a given condition. It iterates through the documents and checks if each document meets the condition specified. If a document meets the condition, it updates the document with new key-value pairs provided as arguments. Finally, it returns the count of documents that were successfully updated. If any documents were updated, the function also writes the modified documents back to the collection.",3,"def update_many(self, condition, new_values):
    count = 0
    updated_documents = []
    
    for document in collection:
        if meets_condition(document, condition):
            update_document(document, new_values)
            count += 1
            updated_documents.append(document)
    
    if count > 0:
        write_back_to_collection(updated_documents)
    
    return count",['./repos/pantherdb\\tests'],"43 Passed, 2 Failed",43,2,"['tests/test_normal.py::TestNormalPantherDB::test_update_many', 'tests/test_normal.py::TestNormalPantherDB::test_update_one_single_document_not_found']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_many>\n\n    def test_update_many(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Update Many\n        new_name = f.first_name()\n>       updated_count = collection.update_many({'first_name': first_name}, first_name=new_name)\nE       TypeError: PantherCollection.update_many() got an unexpected keyword argument 'first_name'\n\nrepos\\pantherdb\\tests\\test_normal.py:615: TypeError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_one_single_document_not_found>\n\n    def test_update_one_single_document_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count = self.create_junk_document(collection)\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Update One\n        new_name = f.first_name()\n        is_updated = collection.update_one({'first_name': f.first_name()}, first_name=new_name)\n        assert is_updated is False\n    \n        # Find with old name\n        old_obj = collection.find_one(first_name=first_name)\n        assert old_obj is not None\n    \n        # Find with new name\n        obj = collection.find_one(first_name=new_name)\n>       assert obj is None\nE       assert right(first_name=Crystal, last_name=Jimenez, _id=01JRT9FC65BHA8TCB0EVNYSK2D) is None\n\nrepos\\pantherdb\\tests\\test_normal.py:598: AssertionError""]"
pantherdb,save,"def save(self) -> None:
    """"""Pop & Insert New Document""""""
    documents = self._get_collection()
    for i, d in enumerate(documents):
        if d['_id'] == self.id:
            documents.pop(i)
            documents.insert(i, self.data)
            break
    self._write_collection(documents)","The goal of this function is to update a document in a collection by replacing it with a new document. It searches for the document with a specific ID, removes it from the collection, and inserts the new document in its place. This function is typically used in a class context where the class has attributes like 'id' and 'data' that are used to identify and update the document.",1,"def save(self):
    self.collection.delete_one({""id"": self.id})
    self.collection.insert_one({""id"": self.id, ""data"": self.data})",['./repos/pantherdb\\tests'],"44 Passed, 1 Failed",44,1,['tests/test_normal.py::TestNormalPantherDB::test_document_save_method'],"[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_save_method>\n\n    def test_document_save_method(self):\n        collection = self.db.collection(f.word())\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find One\n        obj = collection.find_one(first_name=first_name)\n        new_name = f.first_name()\n    \n        # Update it\n        obj.first_name = new_name\n>       obj.save()\n\nrepos\\pantherdb\\tests\\test_normal.py:658: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = by(first_name=Joseph, last_name=Colon, _id=01JRT9FV1MYWSYSKNTK1K7X8SH)\n\n    def save(self):\n>       self.collection.delete_one({'id': self.id})\nE       AttributeError: 'function' object has no attribute 'delete_one'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:329: AttributeError""]"
pantherdb,save,"def save(self) -> None:
    """"""Pop & Insert New Document""""""
    documents = self._get_collection()
    for i, d in enumerate(documents):
        if d['_id'] == self.id:
            documents.pop(i)
            documents.insert(i, self.data)
            break
    self._write_collection(documents)","The goal of this function is to update a document in a collection by replacing it with a new document. It searches for the document with a specific ID, removes it from the collection, and inserts the new document in its place. This function is typically used in a class context where the class has attributes like 'id' and 'data' that are used to identify and update the document.",2,"def save(self):
    collection = self.db[self.collection]
    query = {""id"": self.id}
    new_document = {""id"": self.id, ""data"": self.data}
    
    collection.delete_one(query)
    collection.insert_one(new_document)",['./repos/pantherdb\\tests'],"44 Passed, 1 Failed",44,1,['tests/test_normal.py::TestNormalPantherDB::test_document_save_method'],"['self = station(first_name=Ana, last_name=Graham, _id=01JRT9G16H8MDTGNSC78Y0GAXG)\nitem = \'db\'\n\n    def __getattr__(self, item: str):\n        try:\n>           return object.__getattribute__(self, \'_PantherDocument__data\')[item]\nE           KeyError: \'db\'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:304: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_normal.TestNormalPantherDB testMethod=test_document_save_method>\n\n    def test_document_save_method(self):\n        collection = self.db.collection(f.word())\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find One\n        obj = collection.find_one(first_name=first_name)\n        new_name = f.first_name()\n    \n        # Update it\n        obj.first_name = new_name\n>       obj.save()\n\nrepos\\pantherdb\\tests\\test_normal.py:658: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:329: in save\n    collection = self.db[self.collection]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = station(first_name=Ana, last_name=Graham, _id=01JRT9G16H8MDTGNSC78Y0GAXG)\nitem = \'db\'\n\n    def __getattr__(self, item: str):\n        try:\n            return object.__getattribute__(self, \'_PantherDocument__data\')[item]\n        except KeyError:\n            error = f\'Invalid Collection Field: ""{item}""\'\n>           raise PantherDBException(error)\nE           pantherdb.pantherdb.PantherDBException: Invalid Collection Field: ""db""\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:307: PantherDBException']"
pantherdb,save,"def save(self) -> None:
    """"""Pop & Insert New Document""""""
    documents = self._get_collection()
    for i, d in enumerate(documents):
        if d['_id'] == self.id:
            documents.pop(i)
            documents.insert(i, self.data)
            break
    self._write_collection(documents)","The goal of this function is to update a document in a collection by replacing it with a new document. It searches for the document with a specific ID, removes it from the collection, and inserts the new document in its place. This function is typically used in a class context where the class has attributes like 'id' and 'data' that are used to identify and update the document.",3,"def save(self):
    # Find the document with the specific ID
    document = collection.find_one({""id"": self.id})
    
    # If the document exists, replace it with the new document
    if document:
        collection.delete_one({""id"": self.id})
        collection.insert_one({""id"": self.id, ""data"": self.data})
    else:
        # Handle case where document with ID is not found
        print(""Document with ID not found"")",['./repos/pantherdb\\tests'],"44 Passed, 1 Failed",44,1,['tests/test_normal.py::TestNormalPantherDB::test_document_save_method'],"[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_save_method>\n\n    def test_document_save_method(self):\n        collection = self.db.collection(f.word())\n    \n        # Insert with specific name\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find One\n        obj = collection.find_one(first_name=first_name)\n        new_name = f.first_name()\n    \n        # Update it\n        obj.first_name = new_name\n>       obj.save()\n\nrepos\\pantherdb\\tests\\test_normal.py:658: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = see(first_name=Kendra, last_name=Bennett, _id=01JRT9G7AZGH1VKYZY3SESJJGC)\n\n    def save(self):\n>       document = collection.find_one({'id': self.id})\nE       NameError: name 'collection' is not defined\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:329: NameError""]"
pantherdb,next,"def next(self):
    if not self._conditions_applied:
        self._apply_conditions()
    self._cursor += 1
    if self._limit and self._cursor > self._limit:
        raise StopIteration
    try:
        result = self.documents[self._cursor]
    except IndexError:
        raise StopIteration
    if self.response_type:
        return self.response_type(result)
    return result","The function ""next"" is designed to iterate through a collection of documents, applying conditions if necessary, and returning the next document in the sequence. It keeps track of the cursor position and stops iterating if a limit is reached. If a response type is specified, it will return the document of that type. Overall, the function facilitates the sequential retrieval of documents with optional conditions applied.",1,"def next(self, response_type=None):
    if response_type:
        while self.cursor < len(self.documents):
            if isinstance(self.documents[self.cursor], response_type):
                document = self.documents[self.cursor]
                self.cursor += 1
                return document
            self.cursor += 1
    else:
        if self.cursor < len(self.documents):
            document = self.documents[self.cursor]
            self.cursor += 1
            return document",['./repos/pantherdb\\tests'],"45 Passed, 0 Failed",45,0,[],[]
pantherdb,next,"def next(self):
    if not self._conditions_applied:
        self._apply_conditions()
    self._cursor += 1
    if self._limit and self._cursor > self._limit:
        raise StopIteration
    try:
        result = self.documents[self._cursor]
    except IndexError:
        raise StopIteration
    if self.response_type:
        return self.response_type(result)
    return result","The function ""next"" is designed to iterate through a collection of documents, applying conditions if necessary, and returning the next document in the sequence. It keeps track of the cursor position and stops iterating if a limit is reached. If a response type is specified, it will return the document of that type. Overall, the function facilitates the sequential retrieval of documents with optional conditions applied.",2,"def next(self, response_type=None, limit=None):
    if limit is not None and limit <= 0:
        raise ValueError(""Limit must be a positive integer"")
    
    for document in self.collection:
        if response_type is not None and document.type != response_type:
            continue
        
        if limit is not None and limit == 0:
            break
        
        if limit is not None:
            limit -= 1
        
        return document",['./repos/pantherdb\\tests'],"45 Passed, 0 Failed",45,0,[],[]
pantherdb,next,"def next(self):
    if not self._conditions_applied:
        self._apply_conditions()
    self._cursor += 1
    if self._limit and self._cursor > self._limit:
        raise StopIteration
    try:
        result = self.documents[self._cursor]
    except IndexError:
        raise StopIteration
    if self.response_type:
        return self.response_type(result)
    return result","The function ""next"" is designed to iterate through a collection of documents, applying conditions if necessary, and returning the next document in the sequence. It keeps track of the cursor position and stops iterating if a limit is reached. If a response type is specified, it will return the document of that type. Overall, the function facilitates the sequential retrieval of documents with optional conditions applied.",3,"def next(self, response_type=None, limit=None):
    if response_type:
        for doc in self.documents:
            if isinstance(doc, response_type):
                if limit and limit > 0:
                    limit -= 1
                    yield doc
                elif not limit:
                    yield doc
    else:
        for doc in self.documents:
            if limit and limit > 0:
                limit -= 1
                yield doc
            elif not limit:
                yield doc",['./repos/pantherdb\\tests'],"45 Passed, 0 Failed",45,0,[],[]
pantherdb,_apply_conditions,"def _apply_conditions(self):
    self._apply_sort()
    self._apply_skip()
    self._apply_limit()
    self._conditions_applied = True","The function `_apply_conditions` is responsible for applying various conditions such as sorting, skipping, and limiting to a dataset. Once these conditions are applied, a flag `conditions_applied` is set to true. This function helps in organizing and manipulating the dataset according to specified criteria.",1,"def _apply_conditions(self):
    self.dataset = sorted(self.dataset)
    self.dataset = self.dataset[5:]
    self.conditions_applied = True",['./repos/pantherdb\\tests'],"41 Passed, 4 Failed",41,4,"['tests/test_normal.py::TestCursorPantherDB::test_find_response_type', 'tests/test_normal.py::TestCursorPantherDB::test_find_with_filter', 'tests/test_normal.py::TestCursorPantherDB::test_find_with_sort', 'tests/test_normal.py::TestCursorPantherDB::test_find_without_filter']","[""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_response_type>\n\n    def test_find_response_type(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n        objs = collection.find(first_name=first_name)\n    \n        assert isinstance(objs, Cursor)\n>       assert len([o for o in objs]) == 1\n\nrepos\\pantherdb\\tests\\test_normal.py:718: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:371: in __getitem__\n    self._apply_conditions()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.pantherdb.Cursor object at 0x00000240774C2BA0>\n\n    def _apply_conditions(self):\n>       self.dataset = sorted(self.dataset)\nE       AttributeError: 'Cursor' object has no attribute 'dataset'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:393: AttributeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_with_filter>\n\n    def test_find_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Insert with specific names\n        first_name = f.first_name()\n        _count = f.random.randint(2, 10)\n        last_names = []\n        for i in range(_count):\n            last_name = f.last_name()\n            last_names.append(last_name)\n            collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Find\n        objs = collection.find(first_name=first_name)\n    \n        assert isinstance(objs, Cursor)\n>       assert len([o for o in objs]) == _count\n\nrepos\\pantherdb\\tests\\test_normal.py:740: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:371: in __getitem__\n    self._apply_conditions()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.pantherdb.Cursor object at 0x0000024077C55E50>\n\n    def _apply_conditions(self):\n>       self.dataset = sorted(self.dataset)\nE       AttributeError: 'Cursor' object has no attribute 'dataset'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:393: AttributeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_with_sort>\n\n    def test_find_with_sort(self):\n        collection = self.db.collection(f.word())\n    \n        # Insert with specific values\n        collection.insert_one(first_name='A', last_name=0)\n        collection.insert_one(first_name='A', last_name=1)\n        collection.insert_one(first_name='B', last_name=0)\n        collection.insert_one(first_name='B', last_name=1)\n    \n        # Find without sort\n        objs = collection.find()\n>       assert (objs[0].first_name, objs[0].last_name) == ('A', 0)\n\nrepos\\pantherdb\\tests\\test_normal.py:785: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:371: in __getitem__\n    self._apply_conditions()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.pantherdb.Cursor object at 0x0000024077C55810>\n\n    def _apply_conditions(self):\n>       self.dataset = sorted(self.dataset)\nE       AttributeError: 'Cursor' object has no attribute 'dataset'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:393: AttributeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_without_filter>\n\n    def test_find_without_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        # Insert with specific names\n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n        objs = collection.find()\n        _count_all = _count_1 + _count_2\n    \n        assert isinstance(objs, Cursor)\n>       assert len([o for o in objs]) == _count_all\n\nrepos\\pantherdb\\tests\\test_normal.py:762: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:371: in __getitem__\n    self._apply_conditions()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.pantherdb.Cursor object at 0x0000024077C55090>\n\n    def _apply_conditions(self):\n>       self.dataset = sorted(self.dataset)\nE       AttributeError: 'Cursor' object has no attribute 'dataset'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:393: AttributeError""]"
pantherdb,_apply_conditions,"def _apply_conditions(self):
    self._apply_sort()
    self._apply_skip()
    self._apply_limit()
    self._conditions_applied = True","The function `_apply_conditions` is responsible for applying various conditions such as sorting, skipping, and limiting to a dataset. Once these conditions are applied, a flag `conditions_applied` is set to true. This function helps in organizing and manipulating the dataset according to specified criteria.",2,"def _apply_conditions(self):
    self.dataset = sorted(self.dataset)
    self.dataset = self.dataset[self.skip:]
    self.dataset = self.dataset[:self.limit]
    self.conditions_applied = True",['./repos/pantherdb\\tests'],"41 Passed, 4 Failed",41,4,"['tests/test_normal.py::TestCursorPantherDB::test_find_response_type', 'tests/test_normal.py::TestCursorPantherDB::test_find_with_filter', 'tests/test_normal.py::TestCursorPantherDB::test_find_with_sort', 'tests/test_normal.py::TestCursorPantherDB::test_find_without_filter']","[""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_response_type>\n\n    def test_find_response_type(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n        objs = collection.find(first_name=first_name)\n    \n        assert isinstance(objs, Cursor)\n>       assert len([o for o in objs]) == 1\n\nrepos\\pantherdb\\tests\\test_normal.py:718: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:371: in __getitem__\n    self._apply_conditions()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.pantherdb.Cursor object at 0x000001EBA8CF2BA0>\n\n    def _apply_conditions(self):\n>       self.dataset = sorted(self.dataset)\nE       AttributeError: 'Cursor' object has no attribute 'dataset'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:393: AttributeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_with_filter>\n\n    def test_find_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Insert with specific names\n        first_name = f.first_name()\n        _count = f.random.randint(2, 10)\n        last_names = []\n        for i in range(_count):\n            last_name = f.last_name()\n            last_names.append(last_name)\n            collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Find\n        objs = collection.find(first_name=first_name)\n    \n        assert isinstance(objs, Cursor)\n>       assert len([o for o in objs]) == _count\n\nrepos\\pantherdb\\tests\\test_normal.py:740: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:371: in __getitem__\n    self._apply_conditions()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.pantherdb.Cursor object at 0x000001EBA9485D10>\n\n    def _apply_conditions(self):\n>       self.dataset = sorted(self.dataset)\nE       AttributeError: 'Cursor' object has no attribute 'dataset'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:393: AttributeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_with_sort>\n\n    def test_find_with_sort(self):\n        collection = self.db.collection(f.word())\n    \n        # Insert with specific values\n        collection.insert_one(first_name='A', last_name=0)\n        collection.insert_one(first_name='A', last_name=1)\n        collection.insert_one(first_name='B', last_name=0)\n        collection.insert_one(first_name='B', last_name=1)\n    \n        # Find without sort\n        objs = collection.find()\n>       assert (objs[0].first_name, objs[0].last_name) == ('A', 0)\n\nrepos\\pantherdb\\tests\\test_normal.py:785: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:371: in __getitem__\n    self._apply_conditions()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.pantherdb.Cursor object at 0x000001EBA94856D0>\n\n    def _apply_conditions(self):\n>       self.dataset = sorted(self.dataset)\nE       AttributeError: 'Cursor' object has no attribute 'dataset'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:393: AttributeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_without_filter>\n\n    def test_find_without_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        # Insert with specific names\n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n        objs = collection.find()\n        _count_all = _count_1 + _count_2\n    \n        assert isinstance(objs, Cursor)\n>       assert len([o for o in objs]) == _count_all\n\nrepos\\pantherdb\\tests\\test_normal.py:762: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:371: in __getitem__\n    self._apply_conditions()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.pantherdb.Cursor object at 0x000001EBA9484F50>\n\n    def _apply_conditions(self):\n>       self.dataset = sorted(self.dataset)\nE       AttributeError: 'Cursor' object has no attribute 'dataset'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:393: AttributeError""]"
pantherdb,_apply_conditions,"def _apply_conditions(self):
    self._apply_sort()
    self._apply_skip()
    self._apply_limit()
    self._conditions_applied = True","The function `_apply_conditions` is responsible for applying various conditions such as sorting, skipping, and limiting to a dataset. Once these conditions are applied, a flag `conditions_applied` is set to true. This function helps in organizing and manipulating the dataset according to specified criteria.",3,"def _apply_conditions(self):
    self.dataset = sorted(self.dataset)
    self.dataset = self.dataset[self.skip:]
    self.dataset = self.dataset[:self.limit]
    self.conditions_applied = True",['./repos/pantherdb\\tests'],"41 Passed, 4 Failed",41,4,"['tests/test_normal.py::TestCursorPantherDB::test_find_response_type', 'tests/test_normal.py::TestCursorPantherDB::test_find_with_filter', 'tests/test_normal.py::TestCursorPantherDB::test_find_with_sort', 'tests/test_normal.py::TestCursorPantherDB::test_find_without_filter']","[""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_response_type>\n\n    def test_find_response_type(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n        objs = collection.find(first_name=first_name)\n    \n        assert isinstance(objs, Cursor)\n>       assert len([o for o in objs]) == 1\n\nrepos\\pantherdb\\tests\\test_normal.py:718: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:371: in __getitem__\n    self._apply_conditions()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.pantherdb.Cursor object at 0x0000023C16572BA0>\n\n    def _apply_conditions(self):\n>       self.dataset = sorted(self.dataset)\nE       AttributeError: 'Cursor' object has no attribute 'dataset'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:393: AttributeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_with_filter>\n\n    def test_find_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        self.create_junk_document(collection)\n    \n        # Insert with specific names\n        first_name = f.first_name()\n        _count = f.random.randint(2, 10)\n        last_names = []\n        for i in range(_count):\n            last_name = f.last_name()\n            last_names.append(last_name)\n            collection.insert_one(first_name=first_name, last_name=last_name)\n    \n        # Find\n        objs = collection.find(first_name=first_name)\n    \n        assert isinstance(objs, Cursor)\n>       assert len([o for o in objs]) == _count\n\nrepos\\pantherdb\\tests\\test_normal.py:740: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:371: in __getitem__\n    self._apply_conditions()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.pantherdb.Cursor object at 0x0000023C16D05D10>\n\n    def _apply_conditions(self):\n>       self.dataset = sorted(self.dataset)\nE       AttributeError: 'Cursor' object has no attribute 'dataset'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:393: AttributeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_with_sort>\n\n    def test_find_with_sort(self):\n        collection = self.db.collection(f.word())\n    \n        # Insert with specific values\n        collection.insert_one(first_name='A', last_name=0)\n        collection.insert_one(first_name='A', last_name=1)\n        collection.insert_one(first_name='B', last_name=0)\n        collection.insert_one(first_name='B', last_name=1)\n    \n        # Find without sort\n        objs = collection.find()\n>       assert (objs[0].first_name, objs[0].last_name) == ('A', 0)\n\nrepos\\pantherdb\\tests\\test_normal.py:785: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:371: in __getitem__\n    self._apply_conditions()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.pantherdb.Cursor object at 0x0000023C16D056D0>\n\n    def _apply_conditions(self):\n>       self.dataset = sorted(self.dataset)\nE       AttributeError: 'Cursor' object has no attribute 'dataset'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:393: AttributeError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_without_filter>\n\n    def test_find_without_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n        _count_1 = self.create_junk_document(collection)\n    \n        # Insert with specific names\n        first_name = f.first_name()\n        _count_2 = f.random.randint(2, 10)\n        for i in range(_count_2):\n            collection.insert_one(first_name=first_name, last_name=f.last_name())\n    \n        # Find\n        objs = collection.find()\n        _count_all = _count_1 + _count_2\n    \n        assert isinstance(objs, Cursor)\n>       assert len([o for o in objs]) == _count_all\n\nrepos\\pantherdb\\tests\\test_normal.py:762: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:371: in __getitem__\n    self._apply_conditions()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.pantherdb.Cursor object at 0x0000023C16D04F50>\n\n    def _apply_conditions(self):\n>       self.dataset = sorted(self.dataset)\nE       AttributeError: 'Cursor' object has no attribute 'dataset'\n\nrepos\\pantherdb\\pantherdb\\pantherdb.py:393: AttributeError""]"
pantherdb,new,"def new(self):
    current_timestamp = int(datetime.now(timezone.utc).timestamp() * 1000)
    epoch_bits = '{0:050b}'.format(current_timestamp)
    random_bits = '{0:080b}'.format(secrets.randbits(80))
    bits = epoch_bits + random_bits
    return self._generate(bits)",The goal of this function is to generate a unique identifier by combining the current timestamp with random bits. This identifier will be used for some purpose in the context of the class it belongs to.,1,"def new(self):
        import random
        import time
        
        timestamp = str(time.time())
        random_bits = ''.join(str(random.randint(0, 1)) for _ in range(5))
        
        unique_id = timestamp + random_bits
        return unique_id",['./repos/pantherdb\\tests'],"44 Passed, 1 Failed",44,1,['tests/test_normal.py::TestNormalPantherDB::test_id_assignments'],"[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_id_assignments>\n\n    def test_id_assignments(self):\n        collection = self.db.collection(f.word())\n        ids = set()\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n            obj = collection.insert_one(first_name=f.first_name(), last_name=f.last_name())\n            ids.add(obj.id)\n>           assert len(obj.id) == 26\nE           AssertionError: assert 21 == 26\nE            +  where 21 = len('1744639187.0796901011')\nE            +    where '1744639187.0796901011' = sure(first_name=Jimmy, last_name=Frost, _id=1744639187.0796901011).id\n\nrepos\\pantherdb\\tests\\test_normal.py:100: AssertionError""]"
pantherdb,new,"def new(self):
    current_timestamp = int(datetime.now(timezone.utc).timestamp() * 1000)
    epoch_bits = '{0:050b}'.format(current_timestamp)
    random_bits = '{0:080b}'.format(secrets.randbits(80))
    bits = epoch_bits + random_bits
    return self._generate(bits)",The goal of this function is to generate a unique identifier by combining the current timestamp with random bits. This identifier will be used for some purpose in the context of the class it belongs to.,2,"def new(self):
    import uuid
    import random
    
    timestamp = str(time.time())
    random_bits = str(random.getrandbits(32))
    
    unique_id = timestamp + random_bits
    
    return unique_id",['./repos/pantherdb\\tests'],"11 Passed, 34 Failed",11,34,"['tests/test_normal.py::TestNormalPantherDB::test_count_with_filter', 'tests/test_normal.py::TestNormalPantherDB::test_delete', 'tests/test_normal.py::TestNormalPantherDB::test_delete_many', 'tests/test_normal.py::TestNormalPantherDB::test_delete_many_not_found', 'tests/test_normal.py::TestNormalPantherDB::test_delete_one', 'tests/test_normal.py::TestNormalPantherDB::test_delete_one_first', 'tests/test_normal.py::TestNormalPantherDB::test_delete_one_not_found', 'tests/test_normal.py::TestNormalPantherDB::test_document_fields', 'tests/test_normal.py::TestNormalPantherDB::test_document_json_method', 'tests/test_normal.py::TestNormalPantherDB::test_document_save_method', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_first', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_last', 'tests/test_normal.py::TestNormalPantherDB::test_find_one_none', 'tests/test_normal.py::TestNormalPantherDB::test_find_response_type', 'tests/test_normal.py::TestNormalPantherDB::test_find_with_filter', 'tests/test_normal.py::TestNormalPantherDB::test_find_without_filter', 'tests/test_normal.py::TestNormalPantherDB::test_first_none', 'tests/test_normal.py::TestNormalPantherDB::test_first_of_many_finds', 'tests/test_normal.py::TestNormalPantherDB::test_first_when_its_first', 'tests/test_normal.py::TestNormalPantherDB::test_first_when_its_last', 'tests/test_normal.py::TestNormalPantherDB::test_id_assignments', 'tests/test_normal.py::TestNormalPantherDB::test_insert_one', 'tests/test_normal.py::TestNormalPantherDB::test_last_none', 'tests/test_normal.py::TestNormalPantherDB::test_last_of_many_finds', 'tests/test_normal.py::TestNormalPantherDB::test_last_when_its_first', 'tests/test_normal.py::TestNormalPantherDB::test_last_when_its_last', 'tests/test_normal.py::TestNormalPantherDB::test_update', 'tests/test_normal.py::TestNormalPantherDB::test_update_many', 'tests/test_normal.py::TestNormalPantherDB::test_update_one_single_document', 'tests/test_normal.py::TestNormalPantherDB::test_update_one_single_document_not_found', 'tests/test_normal.py::TestCursorPantherDB::test_find_response_type', 'tests/test_normal.py::TestCursorPantherDB::test_find_with_filter', 'tests/test_normal.py::TestCursorPantherDB::test_find_with_sort', 'tests/test_normal.py::TestCursorPantherDB::test_find_without_filter']","[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_count_with_filter>\n\n    def test_count_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:393: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\tests\\test_normal.py:30: in create_junk_document\n    collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x0000019717064E10>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete>\n\n    def test_delete(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:410: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\tests\\test_normal.py:30: in create_junk_document\n    collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x0000019716EF6C50>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_many>\n\n    def test_delete_many(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:496: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\tests\\test_normal.py:30: in create_junk_document\n    collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x0000019716FA65D0>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_many_not_found>\n\n    def test_delete_many_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:516: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\tests\\test_normal.py:30: in create_junk_document\n    collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x00000197171984B0>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one>\n\n    def test_delete_one(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:435: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\tests\\test_normal.py:30: in create_junk_document\n    collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x0000019716F0BEE0>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one_first>\n\n    def test_delete_one_first(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:472: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\tests\\test_normal.py:30: in create_junk_document\n    collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x0000019716FC8DD0>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_delete_one_not_found>\n\n    def test_delete_one_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:456: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\tests\\test_normal.py:30: in create_junk_document\n    collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x0000019717118050>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_fields>\n\n    def test_document_fields(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:637: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x00000197170E1BD0>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_json_method>\n\n    def test_document_json_method(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:677: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x00000197172A0B50>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_document_save_method>\n\n    def test_document_save_method(self):\n        collection = self.db.collection(f.word())\n    \n        # Insert with specific name\n        first_name = f.first_name()\n>       collection.insert_one(first_name=first_name, last_name=f.last_name())\n\nrepos\\pantherdb\\tests\\test_normal.py:650: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x00000197170EFE00>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_first>\n\n    def test_find_one_first(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x0000019717144730>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_last>\n\n    def test_find_one_last(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\tests\\test_normal.py:30: in create_junk_document\n    collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x0000019717144FA0>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_one_none>\n\n    def test_find_one_none(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:146: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\tests\\test_normal.py:30: in create_junk_document\n    collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x00000197171453B0>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_response_type>\n\n    def test_find_response_type(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n>       collection.insert_one(first_name=first_name, last_name=f.last_name())\n\nrepos\\pantherdb\\tests\\test_normal.py:330: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x0000019717145B30>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_with_filter>\n\n    def test_find_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:343: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\tests\\test_normal.py:30: in create_junk_document\n    collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x0000019717146030>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_find_without_filter>\n\n    def test_find_without_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:363: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\tests\\test_normal.py:30: in create_junk_document\n    collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x0000019717146710>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_none>\n\n    def test_first_none(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:226: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\tests\\test_normal.py:30: in create_junk_document\n    collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x00000197170F7980>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_of_many_finds>\n\n    def test_first_of_many_finds(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       expected = collection.insert_one(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:190: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x0000019717146A80>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_when_its_first>\n\n    def test_first_when_its_first(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x0000019717146FD0>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_first_when_its_last>\n\n    def test_first_when_its_last(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:208: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\tests\\test_normal.py:30: in create_junk_document\n    collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x00000197171475C0>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_id_assignments>\n\n    def test_id_assignments(self):\n        collection = self.db.collection(f.word())\n        ids = set()\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n>           obj = collection.insert_one(first_name=f.first_name(), last_name=f.last_name())\n\nrepos\\pantherdb\\tests\\test_normal.py:98: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x00000197171453B0>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_insert_one>\n\n    def test_insert_one(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n>       obj = collection.insert_one(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x00000197172ABF20>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_none>\n\n    def test_last_none(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:306: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\tests\\test_normal.py:30: in create_junk_document\n    collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x0000019717146A80>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_of_many_finds>\n\n    def test_last_of_many_finds(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:270: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x00000197172ABE30>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_when_its_first>\n\n    def test_last_when_its_first(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Insert with specific names\n>       collection.insert_one(first_name=first_name, last_name=last_name)\n\nrepos\\pantherdb\\tests\\test_normal.py:253: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x00000197172A8CD0>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_last_when_its_last>\n\n    def test_last_when_its_last(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n        last_name = f.last_name()\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:288: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\tests\\test_normal.py:30: in create_junk_document\n    collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x00000197172A85F0>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update>\n\n    def test_update(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:533: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\tests\\test_normal.py:30: in create_junk_document\n    collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x00000197172A9270>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_many>\n\n    def test_update_many(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:605: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\tests\\test_normal.py:30: in create_junk_document\n    collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x00000197172A9770>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_one_single_document>\n\n    def test_update_one_single_document(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:558: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\tests\\test_normal.py:30: in create_junk_document\n    collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x00000197172A9F90>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestNormalPantherDB testMethod=test_update_one_single_document_not_found>\n\n    def test_update_one_single_document_not_found(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:581: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\tests\\test_normal.py:30: in create_junk_document\n    collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x00000197172AA580>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_response_type>\n\n    def test_find_response_type(self):\n        collection = self.db.collection(f.word())\n        first_name = f.first_name()\n>       collection.insert_one(first_name=first_name, last_name=f.last_name())\n\nrepos\\pantherdb\\tests\\test_normal.py:712: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x00000197172AABC0>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_with_filter>\n\n    def test_find_with_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:725: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\tests\\test_normal.py:705: in create_junk_document\n    collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x00000197172AB0C0>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_with_sort>\n\n    def test_find_with_sort(self):\n        collection = self.db.collection(f.word())\n    \n        # Insert with specific values\n>       collection.insert_one(first_name='A', last_name=0)\n\nrepos\\pantherdb\\tests\\test_normal.py:778: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x00000197172AB660>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError"", ""self = <tests.test_normal.TestCursorPantherDB testMethod=test_find_without_filter>\n\n    def test_find_without_filter(self):\n        collection = self.db.collection(f.word())\n    \n        # Add others\n>       _count_1 = self.create_junk_document(collection)\n\nrepos\\pantherdb\\tests\\test_normal.py:749: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\pantherdb\\tests\\test_normal.py:705: in create_junk_document\n    collection.insert_one(first_name=f'{f.first_name()}{i}', last_name=f'{f.last_name()}{i}')\nrepos\\pantherdb\\pantherdb\\pantherdb.py:261: in insert_one\n    kwargs['_id'] = self.ulid.new()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pantherdb.ulid.ULID object at 0x00000197172ABCA0>\n\n    def new(self):\n        import uuid\n        import random\n>       timestamp = str(time.time())\nE       NameError: name 'time' is not defined. Did you forget to import 'time'?\n\nrepos\\pantherdb\\pantherdb\\ulid.py:13: NameError""]"
pantherdb,new,"def new(self):
    current_timestamp = int(datetime.now(timezone.utc).timestamp() * 1000)
    epoch_bits = '{0:050b}'.format(current_timestamp)
    random_bits = '{0:080b}'.format(secrets.randbits(80))
    bits = epoch_bits + random_bits
    return self._generate(bits)",The goal of this function is to generate a unique identifier by combining the current timestamp with random bits. This identifier will be used for some purpose in the context of the class it belongs to.,3,"def new(self):
    import time
    import random
    
    timestamp = str(time.time())
    random_bits = ''.join(random.choice('01') for _ in range(5))
    
    unique_identifier = timestamp + random_bits
    
    return unique_identifier",['./repos/pantherdb\\tests'],"44 Passed, 1 Failed",44,1,['tests/test_normal.py::TestNormalPantherDB::test_id_assignments'],"[""self = <tests.test_normal.TestNormalPantherDB testMethod=test_id_assignments>\n\n    def test_id_assignments(self):\n        collection = self.db.collection(f.word())\n        ids = set()\n        _count = f.random.randint(2, 10)\n        for i in range(_count):\n            obj = collection.insert_one(first_name=f.first_name(), last_name=f.last_name())\n            ids.add(obj.id)\n>           assert len(obj.id) == 26\nE           AssertionError: assert 23 == 26\nE            +  where 23 = len('1744639197.042386810101')\nE            +    where '1744639197.042386810101' = dinner(first_name=Kathleen, last_name=Jones, _id=1744639197.042386810101).id\n\nrepos\\pantherdb\\tests\\test_normal.py:100: AssertionError""]"
