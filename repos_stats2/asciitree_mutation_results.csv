Repo Name,Function Name,Description,Mutant Index,Mutant Code,Test Case,Test Result,Passed Count,Failed Count,Failed Tests,Failure Reasons
asciitree,render,"This function is responsible for rendering a tree node by recursively traversing its children and generating a list of lines that represent the node and its children in a structured format. The function utilizes different drawing methods to handle the formatting of each node and its position within the tree. The rendered output can be used to visualize the hierarchy of the tree. If this function is part of a class, it likely interacts with other class methods or attributes to access the tree structure and drawing methods.",1,"def render(self, node):
    lines = []

    # Base case: If the node is None, return an empty list
    if node is None:
        return lines

    # Add the current node to the list of lines
    lines.append(node.name)

    # Recursively render the children of the current node
    for child in node.children:
        lines.extend(self.render(child))

    return lines","['./repos/asciitree\\tests', './repos/asciitree\\tests\\test_backwards_compat.py::test_behaves_as_originally_advertised', './repos/asciitree\\tests\\test_unicode.py::test_unicode_doesnt_crash']","0 Passed, 2 Failed",0,2,"['tests/test_backwards_compat.py::test_behaves_as_originally_advertised', 'tests/test_unicode.py::test_unicode_doesnt_crash']","['def test_behaves_as_originally_advertised():\n        expected_output = """"""root\n      +--sub1\n      +--sub2\n      |  +--sub2sub1\n      +--sub3\n         +--sub3sub1\n         |  +--sub3sub1sub1\n         +--sub3sub2""""""\n    \n        class Node(object):\n            def __init__(self, name, children):\n                self.name = name\n                self.children = children\n    \n            def __str__(self):\n                return self.name\n    \n        root = Node(\'root\', [\n            Node(\'sub1\', []),\n            Node(\'sub2\', [\n                Node(\'sub2sub1\', [])\n            ]),\n            Node(\'sub3\', [\n                Node(\'sub3sub1\', [\n                    Node(\'sub3sub1sub1\', [])\n                ]),\n                Node(\'sub3sub2\', [])\n            ])\n        ])\n    \n>       assert draw_tree(root) == expected_output\nE       AssertionError: assert \'root\\nsub1\\n...ub1\\nsub3sub2\' == \'root\\n  +--s...  +--sub3sub2\'\nE         \nE           root\nE         -   +--sub1\nE         -   +--sub2\nE         -   |  +--sub2sub1\nE         -   +--sub3\nE         -      +--sub3sub1...\nE         \nE         ...Full output truncated (9 lines hidden), use \'-vv\' to show\n\nrepos\\asciitree\\tests\\test_backwards_compat.py:35: AssertionError', 'def test_unicode_doesnt_crash():\n        tr = LeftAligned()\n>       assert tr({u""åäö"": {}}) == u""åäö""\n\nrepos\\asciitree\\tests\\test_unicode.py:6: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\asciitree\\asciitree\\__init__.py:28: in __call__\n    return \'\\n\'.join(self.render(self.traverse.get_root(tree)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <asciitree.LeftAligned object at 0x000001F2D1D47250>, node = (\'åäö\', {})\n\n    def render(self, node):\n        lines = []\n        if node is None:\n            return lines\n>       lines.append(node.name)\nE       AttributeError: \'tuple\' object has no attribute \'name\'\n\nrepos\\asciitree\\asciitree\\__init__.py:19: AttributeError']"
asciitree,render,"This function is responsible for rendering a tree node by recursively traversing its children and generating a list of lines that represent the node and its children in a structured format. The function utilizes different drawing methods to handle the formatting of each node and its position within the tree. The rendered output can be used to visualize the hierarchy of the tree. If this function is part of a class, it likely interacts with other class methods or attributes to access the tree structure and drawing methods.",2,"def render(self, node):
    def traverse(node, prefix='', children_prefix=''):
        lines = [prefix + str(node)]
        if node.children:
            for i, child in enumerate(node.children):
                if i == len(node.children) - 1:
                    lines.extend(traverse(child, children_prefix + '└── ', children_prefix + '    '))
                else:
                    lines.extend(traverse(child, children_prefix + '├── ', children_prefix + '│   '))
        return lines

    tree_lines = traverse(node)
    return '\n'.join(tree_lines)","['./repos/asciitree\\tests', './repos/asciitree\\tests\\test_backwards_compat.py::test_behaves_as_originally_advertised', './repos/asciitree\\tests\\test_unicode.py::test_unicode_doesnt_crash']","0 Passed, 2 Failed",0,2,"['tests/test_backwards_compat.py::test_behaves_as_originally_advertised', 'tests/test_unicode.py::test_unicode_doesnt_crash']","['def test_behaves_as_originally_advertised():\n        expected_output = """"""root\n      +--sub1\n      +--sub2\n      |  +--sub2sub1\n      +--sub3\n         +--sub3sub1\n         |  +--sub3sub1sub1\n         +--sub3sub2""""""\n    \n        class Node(object):\n            def __init__(self, name, children):\n                self.name = name\n                self.children = children\n    \n            def __str__(self):\n                return self.name\n    \n        root = Node(\'root\', [\n            Node(\'sub1\', []),\n            Node(\'sub2\', [\n                Node(\'sub2sub1\', [])\n            ]),\n            Node(\'sub3\', [\n                Node(\'sub3sub1\', [\n                    Node(\'sub3sub1sub1\', [])\n                ]),\n                Node(\'sub3sub2\', [])\n            ])\n        ])\n    \n>       assert draw_tree(root) == expected_output\nE       AssertionError: assert \'r\\no\\no\\nt\\n...3\\ns\\nu\\nb\\n2\' == \'root\\n  +--s...  +--sub3sub2\'\nE         \nE         - root\nE         -   +--sub1\nE         -   +--sub2\nE         -   |  +--sub2sub1\nE         -   +--sub3\nE         -      +--sub3sub1...\nE         \nE         ...Full output truncated (116 lines hidden), use \'-vv\' to show\n\nrepos\\asciitree\\tests\\test_backwards_compat.py:35: AssertionError', 'def test_unicode_doesnt_crash():\n        tr = LeftAligned()\n>       assert tr({u""åäö"": {}}) == u""åäö""\n\nrepos\\asciitree\\tests\\test_unicode.py:6: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nrepos\\asciitree\\asciitree\\__init__.py:33: in __call__\n    return \'\\n\'.join(self.render(self.traverse.get_root(tree)))\nrepos\\asciitree\\asciitree\\__init__.py:26: in render\n    tree_lines = traverse(node)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnode = (\'åäö\', {}), prefix = \'\', children_prefix = \'\'\n\n    def traverse(node, prefix=\'\', children_prefix=\'\'):\n        lines = [prefix + str(node)]\n>       if node.children:\nE       AttributeError: \'tuple\' object has no attribute \'children\'\n\nrepos\\asciitree\\asciitree\\__init__.py:19: AttributeError']"
asciitree,render,"This function is responsible for rendering a tree node by recursively traversing its children and generating a list of lines that represent the node and its children in a structured format. The function utilizes different drawing methods to handle the formatting of each node and its position within the tree. The rendered output can be used to visualize the hierarchy of the tree. If this function is part of a class, it likely interacts with other class methods or attributes to access the tree structure and drawing methods.",3,"def render(self, node):
    lines = []

    def render_node(node, prefix='', is_last=True):
        lines.append(f""{prefix}{'└─ ' if is_last else '├─ '}{node}"")
        children = getattr(node, 'children', [])
        for i, child in enumerate(children):
            is_last_child = i == len(children) - 1
            render_node(child, prefix + ('    ' if is_last else '│   '), is_last_child)

    render_node(node)
    
    return lines","['./repos/asciitree\\tests', './repos/asciitree\\tests\\test_backwards_compat.py::test_behaves_as_originally_advertised', './repos/asciitree\\tests\\test_unicode.py::test_unicode_doesnt_crash']","0 Passed, 2 Failed",0,2,"['tests/test_backwards_compat.py::test_behaves_as_originally_advertised', 'tests/test_unicode.py::test_unicode_doesnt_crash']","['def test_behaves_as_originally_advertised():\n        expected_output = """"""root\n      +--sub1\n      +--sub2\n      |  +--sub2sub1\n      +--sub3\n         +--sub3sub1\n         |  +--sub3sub1sub1\n         +--sub3sub2""""""\n    \n        class Node(object):\n            def __init__(self, name, children):\n                self.name = name\n                self.children = children\n    \n            def __str__(self):\n                return self.name\n    \n        root = Node(\'root\', [\n            Node(\'sub1\', []),\n            Node(\'sub2\', [\n                Node(\'sub2sub1\', [])\n            ]),\n            Node(\'sub3\', [\n                Node(\'sub3sub1\', [\n                    Node(\'sub3sub1sub1\', [])\n                ]),\n                Node(\'sub3sub2\', [])\n            ])\n        ])\n    \n>       assert draw_tree(root) == expected_output\nE       AssertionError: assert \'└─ root\\n   ...  └─ sub3sub2\' == \'root\\n  +--s...  +--sub3sub2\'\nE         \nE         - root\nE         + └─ root\nE         ? +++\nE         -   +--sub1\nE         -   +--sub2\nE         -   |  +--sub2sub1...\nE         \nE         ...Full output truncated (13 lines hidden), use \'-vv\' to show\n\nrepos\\asciitree\\tests\\test_backwards_compat.py:35: AssertionError', 'def test_unicode_doesnt_crash():\n        tr = LeftAligned()\n>       assert tr({u""åäö"": {}}) == u""åäö""\nE       assert ""└─ (\'åäö\', {})"" == \'åäö\'\nE         \nE         - åäö\nE         + └─ (\'åäö\', {})\n\nrepos\\asciitree\\tests\\test_unicode.py:6: AssertionError']"
